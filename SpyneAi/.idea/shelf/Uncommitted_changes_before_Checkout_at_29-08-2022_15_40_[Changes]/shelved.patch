Index: app/src/main/java/com/spyneai/shoot/ui/ecomwithgrid/SkuDetailFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.spyneai.shoot.ui.ecomwithgrid\r\n\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport androidx.recyclerview.widget.GridLayoutManager\r\nimport com.spyneai.*\r\nimport com.spyneai.base.BaseFragment\r\nimport com.spyneai.base.network.Resource\r\nimport com.spyneai.dashboard.ui.handleApiError\r\nimport com.spyneai.databinding.FragmentSkuDetailBinding\r\nimport com.spyneai.needs.AppConstants\r\nimport com.spyneai.needs.Utilities\r\nimport com.spyneai.posthog.Events\r\nimport com.spyneai.shoot.adapters.SkuImageAdapter\r\nimport com.spyneai.shoot.data.ShootViewModel\r\nimport com.spyneai.shoot.ui.base.ShootPortraitActivity\r\nimport com.spyneai.shoot.ui.ecomwithgrid.dialogs.EndProjectDialog\r\nimport com.spyneai.shoot.utils.log\r\nimport kotlinx.coroutines.Dispatchers\r\nimport kotlinx.coroutines.GlobalScope\r\nimport kotlinx.coroutines.launch\r\n\r\n\r\nclass SkuDetailFragment : BaseFragment<ShootViewModel, FragmentSkuDetailBinding>() {\r\n\r\n    lateinit var skuImageAdapter: SkuImageAdapter\r\n    var totalSkuImages = 0\r\n    var endProject = false\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r\n        when (viewModel.categoryDetails.value?.categoryId) {\r\n            AppConstants.FOOTWEAR_CATEGORY_ID,\r\n            AppConstants.MENS_FASHION_CATEGORY_ID,\r\n            AppConstants.WOMENS_FASHION_CATEGORY_ID,\r\n            AppConstants.CAPS_CATEGORY_ID,\r\n            AppConstants.FASHION_CATEGORY_ID,\r\n            AppConstants.ACCESSORIES_CATEGORY_ID,\r\n            AppConstants.HEALTH_AND_BEAUTY_CATEGORY_ID,\r\n            AppConstants.FOOD_AND_BEV_CATEGORY_ID-> {\r\n                binding.ivAddAngle.visibility = View.INVISIBLE\r\n                binding.tvAddAngle.visibility = View.INVISIBLE\r\n            }\r\n        }\r\n\r\n        when (getString(R.string.app_name)) {\r\n            AppConstants.SWIGGY,\r\n            AppConstants.ZOMATO,\r\n            AppConstants.FOODPANDA-> {\r\n                if (viewModel.categoryDetails.value?.categoryId == AppConstants.FOOD_AND_BEV_CATEGORY_ID) {\r\n                    binding.btNextSku.text = \"Next Dish\"\r\n                    binding.tvEndProject.text = \"END PROJECT\"\r\n                    binding.tvTotalImageCaptured.visibility = View.VISIBLE\r\n                    binding.tvTotalImage.visibility = View.VISIBLE\r\n                    binding.rvParentProjects.visibility = View.VISIBLE\r\n//                    binding.tvCapturedImages.visibility = View.GONE\r\n//                    binding.rvSkuImages.visibility = View.GONE\r\n                }\r\n            }\r\n        }\r\n\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            //update sku\r\n            viewModel.setProjectAndSkuData(\r\n                viewModel.project?.uuid!!,\r\n                viewModel.sku?.uuid!!\r\n            )\r\n\r\n            GlobalScope.launch(Dispatchers.Main) {\r\n                viewModel.totalSkuCaptured.value = viewModel.project?.skuCount.toString()\r\n                viewModel.totalImageCaptured.value = viewModel.project?.imagesCount\r\n\r\n                binding.tvTotalSkuCaptured.text = viewModel.project?.skuCount.toString()\r\n            }\r\n        }\r\n\r\n//        viewModel.updateTotalFramesRes.observe(viewLifecycleOwner, {\r\n//            when (it) {\r\n//                is Resource.Success -> {\r\n//                    Utilities.hideProgressDialog()\r\n//                    log(\"update total images for sku(\" + viewModel.sku?.skuId.toString() + \"): \" + totalSkuImages.toString())\r\n//\r\n//                }\r\n//                is Resource.Loading -> {\r\n//                    Utilities.showProgressDialog(requireContext())\r\n//\r\n//                }\r\n//                is Resource.Failure -> {\r\n//                    log(\"update total images for sku(\" + viewModel.sku?.skuId.toString() + \") failed\")\r\n//                    Utilities.hideProgressDialog()\r\n//                    handleApiError(it)\r\n//                }\r\n//            }\r\n//        })\r\n\r\n        viewModel.shootList.observe(viewLifecycleOwner) {\r\n            try {\r\n                totalSkuImages = it.size\r\n\r\n                binding.tvTotalImageCaptured.text = it.size.toString()\r\n\r\n                skuImageAdapter = SkuImageAdapter(\r\n                    requireContext(),\r\n                    it\r\n                )\r\n\r\n                binding.rvSkuImages.apply {\r\n                    this?.layoutManager =\r\n                        GridLayoutManager(requireContext(), 3)\r\n                    this?.adapter = skuImageAdapter\r\n                }\r\n\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n            }\r\n        }\r\n\r\n        binding.btNextSku.setOnClickListener {\r\n            endProject = false\r\n            if (Utilities.getPreference(\r\n                    requireContext(),\r\n                    AppConstants.CATEGORY_ID\r\n                ) == AppConstants.FOOD_AND_BEV_CATEGORY_ID\r\n            )\r\n                shootFoodNextProject()\r\n            else\r\n                updateTotalFrames()\r\n        }\r\n\r\n        if (Utilities.getPreference(requireContext(),AppConstants.ENTERPRISE_ID)\r\n            != AppConstants.FLIPKART_ENTERPRISE_ID){\r\n            if (binding.tvAddAngle.visibility == View.VISIBLE){\r\n                binding.ivAddAngle.setOnClickListener {\r\n                    if (viewModel.categoryDetails.value?.categoryName.equals(\"E-Commerce\") ||\r\n                        viewModel.categoryDetails.value?.categoryName.equals(\"Food & Beverages\")||\r\n                        viewModel.categoryDetails.value?.categoryName.equals(\"Photo Box\"))\r\n\r\n                        viewModel.addMoreAngle.value = true\r\n                }\r\n\r\n                binding.tvAddAngle.setOnClickListener {\r\n                    if (viewModel.categoryDetails.value?.categoryName.equals(\"E-Commerce\") ||\r\n                        viewModel.categoryDetails.value?.categoryName.equals(\"Food & Beverages\")||\r\n                        viewModel.categoryDetails.value?.categoryName.equals(\"Photo Box\"))\r\n\r\n                            viewModel.addMoreAngle.value = true\r\n                }\r\n            }\r\n\r\n        }else {\r\n            if (binding.tvAddAngle.visibility == View.VISIBLE){\r\n                binding.ivAddAngle.setOnClickListener {\r\n                    SelectAnotherImagetypeDialog().show(\r\n                        requireActivity().supportFragmentManager,\r\n                        \"Select_another_image_dialog\"\r\n                    )\r\n                }\r\n                binding.tvAddAngle.setOnClickListener {\r\n                    SelectAnotherImagetypeDialog().show(\r\n                        requireActivity().supportFragmentManager,\r\n                        \"Select_another_image_dialog\"\r\n                    )\r\n\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        binding.tvEndProject.setOnClickListener {\r\n            endProject = true\r\n            when {\r\n                getString(R.string.app_name) == AppConstants.SWIGGY->{\r\n                    requireContext().gotoHome()\r\n                }\r\n                getString(R.string.app_name) == AppConstants.ZOMATO-> {\r\n                    requireContext().gotoHome()\r\n                }\r\n                getString(R.string.app_name) == AppConstants.FOODPANDA-> {\r\n                    requireContext().gotoHome()\r\n                }\r\n                getString(R.string.app_name) == AppConstants.SPYNE_AI -> {\r\n                    when(Utilities.getPreference(requireContext(), AppConstants.CATEGORY_ID)){\r\n                        AppConstants.FOOD_AND_BEV_CATEGORY_ID ->\r\n                            requireContext().gotoHome()\r\n                        AppConstants.ECOM_CATEGORY_ID -> {\r\n                            updateTotalFrames()\r\n                        }\r\n                    }\r\n                }\r\n                else -> updateTotalFrames()\r\n            }\r\n        }\r\n\r\n        observeTotalFrameUpdate()\r\n\r\n        binding.ivBackGif.setOnClickListener {\r\n            requireActivity().onBackPressed()\r\n        }\r\n\r\n    }\r\n\r\n    private fun shootFoodNextProject() {\r\n        viewModel.shootList.value?.clear()\r\n        viewModel.projectId.value = null\r\n        val intent = Intent(activity, ShootPortraitActivity::class.java)\r\n        intent.putExtra(\"project_id\", viewModel.projectId.value)\r\n        // intent.putExtra(\"skuNumber\", viewModel.skuNumber.value?.plus(1)!!)\r\n\r\n        intent.putExtra(\r\n            AppConstants.CATEGORY_NAME,\r\n            viewModel.categoryDetails.value?.categoryName\r\n        )\r\n        intent.putExtra(\r\n            AppConstants.CATEGORY_ID,\r\n            viewModel.categoryDetails.value?.categoryId\r\n        )\r\n\r\n        if (viewModel.fromDrafts) {\r\n            intent.putExtra(\r\n                AppConstants.SKU_COUNT,\r\n                requireActivity().intent.getIntExtra(AppConstants.SKU_COUNT, 0).plus(1)\r\n            )\r\n            intent.putExtra(\r\n                \"skuNumber\",\r\n                requireActivity().intent.getIntExtra(AppConstants.SKU_COUNT, 0).plus(1)\r\n            )\r\n        } else\r\n            intent.putExtra(\"skuNumber\", viewModel.skuNumber.value?.plus(1)!!)\r\n\r\n        startActivity(intent)\r\n    }\r\n\r\n    private fun updateTotalFrames() {\r\n        processRequest()\r\n//        viewModel.updateTotalFrames(\r\n//            viewModel.sku?.skuId.toString(),\r\n//            totalSkuImages.toString(),\r\n//            Utilities.getPreference(requireContext(), AppConstants.AUTH_KEY).toString()\r\n//        )\r\n    }\r\n\r\n    private fun observeTotalFrameUpdate() {\r\n        viewModel.updateTotalFramesRes.observe(viewLifecycleOwner) {\r\n            when (it) {\r\n                is Resource.Success -> {\r\n                    val properties = HashMap<String, Any?>()\r\n                    properties.apply {\r\n                        this[\"sku_id\"] = viewModel.sku?.skuId!!\r\n                        this[\"total_frames\"] = totalSkuImages.toString()\r\n                    }\r\n\r\n                    requireContext().captureEvent(Events.TOTAL_FRAMES_UPDATED, properties)\r\n\r\n                    Utilities.hideProgressDialog()\r\n                    processRequest()\r\n                }\r\n\r\n                is Resource.Failure -> {\r\n                    Utilities.hideProgressDialog()\r\n\r\n                    val properties = HashMap<String, Any?>()\r\n                    properties.apply {\r\n                        this[\"sku_id\"] = viewModel.sku?.skuId!!\r\n                        this[\"total_frames\"] = totalSkuImages.toString()\r\n                    }\r\n\r\n                    requireContext().captureFailureEvent(\r\n                        Events.TOTAL_FRAMES_UPDATE_FAILED, properties,\r\n                        it.errorMessage!!\r\n                    )\r\n\r\n                    handleApiError(it) { updateTotalFrames() }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    private fun processRequest() {\r\n        if (endProject) {\r\n            log(\"end project dialog called\")\r\n            EndProjectDialog().show(requireFragmentManager(), \"EndProjectDialog\")\r\n        } else {\r\n            nextSku()\r\n        }\r\n    }\r\n\r\n    private fun observeUpdateTotalFrames() {\r\n        viewModel.updateTotalFramesRes.observe(viewLifecycleOwner) {\r\n            when (it) {\r\n                is Resource.Success -> {\r\n                    nextSku()\r\n                }\r\n\r\n                is Resource.Failure -> {\r\n                    requireContext().captureFailureEvent(\r\n                        Events.GET_BACKGROUND_FAILED, HashMap<String, Any?>(),\r\n                        it.errorMessage!!\r\n                    )\r\n                    handleApiError(it) {}\r\n                }\r\n\r\n                is Resource.Loading -> {\r\n\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun nextSku() {\r\n\r\n        GlobalScope.launch {\r\n            viewModel.updateTotalFrames()\r\n\r\n            GlobalScope.launch(Dispatchers.Main) {\r\n                viewModel.shootList.value?.clear()\r\n                val intent = Intent(activity, ShootPortraitActivity::class.java)\r\n                intent.putExtra(AppConstants.PROJECT_UUIID, viewModel.project?.uuid)\r\n               // intent.putExtra(\"project_id\", viewModel.projectId.value)\r\n                // intent.putExtra(\"skuNumber\", viewModel.skuNumber.value?.plus(1)!!)\r\n\r\n                intent.putExtra(\r\n                    AppConstants.CATEGORY_NAME,\r\n                    viewModel.categoryDetails.value?.categoryName\r\n                )\r\n                intent.putExtra(\r\n                    AppConstants.CATEGORY_ID,\r\n                    viewModel.categoryDetails.value?.categoryId\r\n                )\r\n\r\n                if (viewModel.fromDrafts) {\r\n                    intent.putExtra(\r\n                        AppConstants.SKU_COUNT,\r\n                        requireActivity().intent.getIntExtra(AppConstants.SKU_COUNT, 0).plus(1)\r\n                    )\r\n                    intent.putExtra(\r\n                        \"skuNumber\",\r\n                        requireActivity().intent.getIntExtra(AppConstants.SKU_COUNT, 0).plus(1)\r\n                    )\r\n                } else\r\n                    intent.putExtra(\"skuNumber\", viewModel.skuNumber.value?.plus(1)!!)\r\n\r\n                startActivity(intent)\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    override fun onResume() {\r\n        super.onResume()\r\n        if (viewModel.categoryDetails.value?.categoryName.equals(\"E-Commerce\")) {\r\n            binding.ivAddAngle.visibility = View.VISIBLE\r\n            binding.tvAddAngle.visibility = View.VISIBLE\r\n        }\r\n    }\r\n\r\n\r\n    override fun getViewModel() = ShootViewModel::class.java\r\n\r\n    override fun getFragmentBinding(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?\r\n    ) = FragmentSkuDetailBinding.inflate(inflater, container, false)\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/spyneai/shoot/ui/ecomwithgrid/SkuDetailFragment.kt b/app/src/main/java/com/spyneai/shoot/ui/ecomwithgrid/SkuDetailFragment.kt
--- a/app/src/main/java/com/spyneai/shoot/ui/ecomwithgrid/SkuDetailFragment.kt	
+++ b/app/src/main/java/com/spyneai/shoot/ui/ecomwithgrid/SkuDetailFragment.kt	
@@ -6,14 +6,18 @@
 import android.view.View
 import android.view.ViewGroup
 import androidx.recyclerview.widget.GridLayoutManager
-import com.spyneai.*
+import com.spyneai.R
+import com.spyneai.SelectAnotherImagetypeDialog
 import com.spyneai.base.BaseFragment
 import com.spyneai.base.network.Resource
 import com.spyneai.dashboard.ui.handleApiError
 import com.spyneai.databinding.FragmentSkuDetailBinding
+import com.spyneai.gotoHome
 import com.spyneai.needs.AppConstants
 import com.spyneai.needs.Utilities
 import com.spyneai.posthog.Events
+import com.spyneai.posthog.captureEvent
+import com.spyneai.posthog.captureFailureEvent
 import com.spyneai.shoot.adapters.SkuImageAdapter
 import com.spyneai.shoot.data.ShootViewModel
 import com.spyneai.shoot.ui.base.ShootPortraitActivity
Index: app/src/swiggy/java/com/spyneai/dashboard/ui/HomeDashboardFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.spyneai.dashboard.ui\r\n\r\n\r\nimport android.app.Dialog\r\nimport android.content.Intent\r\nimport android.graphics.Color\r\nimport android.graphics.drawable.ColorDrawable\r\nimport android.os.Bundle\r\nimport android.os.Handler\r\nimport android.text.TextUtils.replace\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.view.Window\r\nimport android.widget.LinearLayout\r\nimport android.widget.TextView\r\nimport android.widget.Toast\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.core.content.ContextCompat\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.lifecycle.Observer\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.google.android.material.tabs.TabLayout\r\nimport com.google.android.play.core.appupdate.AppUpdateManager\r\nimport com.google.android.play.core.appupdate.AppUpdateManagerFactory\r\nimport com.google.android.play.core.install.model.AppUpdateType\r\nimport com.google.android.play.core.install.model.UpdateAvailability\r\nimport com.google.android.play.core.ktx.startUpdateFlowForResult\r\nimport com.google.gson.Gson\r\nimport com.spyneai.R\r\nimport com.spyneai.activity.CategoriesActivity\r\nimport com.spyneai.activity.CompletedProjectsActivity\r\n\r\nimport com.spyneai.adapter.CategoriesDashboardAdapter\r\nimport com.spyneai.base.BaseFragment\r\nimport com.spyneai.base.network.Resource\r\nimport com.spyneai.captureEvent\r\nimport com.spyneai.captureFailureEvent\r\n\r\nimport com.spyneai.dashboard.data.DashboardViewModel\r\nimport com.spyneai.dashboard.data.model.LayoutHolder\r\nimport com.spyneai.dashboard.response.NewCategoriesResponse\r\nimport com.spyneai.databinding.HomeDashboardFragmentBinding\r\nimport com.spyneai.needs.AppConstants\r\nimport com.spyneai.needs.Utilities\r\nimport com.spyneai.orders.data.response.GetProjectsResponse\r\nimport com.spyneai.posthog.Events\r\nimport com.spyneai.shoot.data.model.ProjectDetailResponse\r\nimport com.spyneai.shoot.ui.base.ShootPortraitActivity\r\nimport com.spyneai.shoot.utils.log\r\n\r\n\r\nclass HomeDashboardFragment :\r\n    BaseFragment<DashboardViewModel, HomeDashboardFragmentBinding>() {\r\n\r\n    lateinit var btnlistener: CategoriesDashboardAdapter.BtnClickListener\r\n\r\n    lateinit var categoriesAdapter: CategoriesDashboardAdapter\r\n\r\n//    lateinit var ongoingDashboardAdapter: OngoingDashboardAdapter\r\n//\r\n//    lateinit var completedDashboardAdapter: CompletedDashboardAdapter\r\n    lateinit var completedProjectList: ArrayList<GetProjectsResponse.Project_data>\r\n    lateinit var ongoingProjectList: ArrayList<GetProjectsResponse.Project_data>\r\n\r\n    lateinit var handler: Handler\r\n    private var runnable: Runnable? = null\r\n\r\n   // lateinit var tutorialVideosAdapter: TutorialVideosAdapter\r\n\r\n    var categoryPosition: Int = 0\r\n    lateinit var tokenId: String\r\n    lateinit var email: String\r\n\r\n    lateinit var catId: String\r\n    lateinit var displayName: String\r\n    lateinit var displayThumbnail: String\r\n    lateinit var description: String\r\n    lateinit var colorCode: String\r\n    private var refreshData = true\r\n    private lateinit var tabLayout: TabLayout\r\n\r\n    lateinit var appUpdateManager: AppUpdateManager\r\n    private val MY_REQUEST_CODE: Int = 1\r\n    lateinit var PACKAGE_NAME: String\r\n\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        handler = Handler()\r\n\r\n        tokenId = Utilities.getPreference(requireContext(), AppConstants.TOKEN_ID).toString()\r\n        email = Utilities.getPreference(requireContext(), AppConstants.EMAIL_ID).toString()\r\n\r\n        PACKAGE_NAME = requireContext().getPackageName().toString()\r\n        appUpdateManager = AppUpdateManagerFactory.create(requireContext())\r\n\r\n//        if (PACKAGE_NAME.equals(\"com.spyneai.swiggy.debug\")) {\r\n//            newUserCreditDialog()\r\n            repeatRefreshData()\r\n            setSliderRecycler()\r\n            lisners()\r\n            welcomeHomeText()\r\n            getCategories()\r\n//        } else\r\n//            autoUpdates()\r\n    }\r\n\r\n    private fun autoUpdates() {\r\n\r\n        val appUpdateInfoTask = appUpdateManager.appUpdateInfo\r\n        appUpdateInfoTask.addOnSuccessListener { appUpdateInfo ->\r\n            if (appUpdateInfo.updateAvailability() == UpdateAvailability.UPDATE_AVAILABLE\r\n                && appUpdateInfo.isUpdateTypeAllowed(AppUpdateType.IMMEDIATE)\r\n            ) {\r\n\r\n                // Request the update.\r\n                appUpdateManager.startUpdateFlowForResult(\r\n                    // Pass the intent that is returned by 'getAppUpdateInfo()'.\r\n                    appUpdateInfo,\r\n                    // Or 'AppUpdateType.FLEXIBLE' for flexible updates.\r\n                    AppUpdateType.IMMEDIATE,\r\n                    // The current activity making the update request.\r\n                    this,\r\n                    // Include a request code to later monitor this update request.\r\n                    MY_REQUEST_CODE\r\n                )\r\n            } else {\r\n//                newUserCreditDialog()\r\n                repeatRefreshData()\r\n                setSliderRecycler()\r\n                lisners()\r\n                welcomeHomeText()\r\n                getCategories()\r\n            }\r\n        }\r\n    }\r\n\r\n//    private fun getOngoingOrders() {\r\n//        log(\"Completed SKUs(auth key): \"+ Utilities.getPreference(requireContext(), AppConstants.AUTH_KEY))\r\n//\r\n//        viewModel.getProjects(Utilities.getPreference(requireContext(), AppConstants.AUTH_KEY).toString(), \"ongoing\")\r\n//\r\n//        viewModel.getProjectsResponse.observe(\r\n//            viewLifecycleOwner, Observer {\r\n//                when (it) {\r\n//                    is Resource.Success -> {\r\n//                        binding.rvOngoingShoots.visibility = View.VISIBLE\r\n//                        binding.shimmerOngoing.stopShimmer()\r\n//                        binding.shimmerOngoing.visibility = View.GONE\r\n//                        if (it.value.data.project_data.isNullOrEmpty()) {\r\n//                            binding.rlOngoingShoots.visibility = View.GONE\r\n//                            refreshData = false\r\n//                        }\r\n//\r\n//                        if (it.value.data != null) {\r\n//                            ongoingProjectList = ArrayList()\r\n//                            ongoingProjectList.clear()\r\n//                            ongoingProjectList.addAll(it.value.data.project_data)\r\n//                            ongoingDashboardAdapter = OngoingDashboardAdapter(\r\n//                                requireContext(),\r\n//                                ongoingProjectList\r\n//                            )\r\n//\r\n//                            val layoutManager: RecyclerView.LayoutManager = LinearLayoutManager(\r\n//                                requireContext(),\r\n//                                LinearLayoutManager.HORIZONTAL,\r\n//                                false\r\n//                            )\r\n//                            binding.rvOngoingShoots.setLayoutManager(layoutManager)\r\n//                            binding.rvOngoingShoots.setAdapter(ongoingDashboardAdapter)\r\n//\r\n//                        }\r\n//                    }\r\n//                    is Resource.Loading -> {\r\n//                        binding.shimmerOngoing.startShimmer()\r\n//                    }\r\n//                    is Resource.Failure -> {\r\n//                        binding.shimmerOngoing.stopShimmer()\r\n//                        binding.shimmerOngoing.visibility = View.GONE\r\n//\r\n//                        if (it.errorCode == 404) {\r\n//                            binding.rlOngoingShoots.visibility = View.GONE\r\n//                            refreshData = false\r\n//                        } else {\r\n//                            requireContext().captureFailureEvent(\r\n//                                Events.GET_ONGOING_ORDERS_FAILED, HashMap<String,Any?>(),\r\n//                                it.errorMessage!!\r\n//                            )\r\n//                            handleApiError(it)\r\n//                        }\r\n//                    }\r\n//\r\n//                }\r\n//            }\r\n//        )\r\n//    }\r\n\r\n    private fun newUserCreditDialog() {\r\n        if (viewModel.isNewUser.value == true) {\r\n            showFreeCreditDialog(viewModel.creditsMessage.value.toString())\r\n            viewModel.isNewUser.value = false\r\n        }\r\n    }\r\n\r\n//    private fun getCompletedOrders() {\r\n//\r\n//        viewModel.getCompletedProjects(Utilities.getPreference(requireContext(), AppConstants.AUTH_KEY).toString(), \"completed\")\r\n//\r\n//        log(\"Completed SKUs(auth key): \"+ Utilities.getPreference(requireContext(), AppConstants.AUTH_KEY))\r\n//        viewModel.getCompletedProjectsResponse.observe(\r\n//            viewLifecycleOwner, Observer {\r\n//                when (it) {\r\n//                    is Resource.Success -> {\r\n//\r\n//                        requireContext().captureEvent(Events.GET_COMPLETED_ORDERS, HashMap<String,Any?>())\r\n//                        completedProjectList = ArrayList()\r\n//                        if (it.value.data.project_data.isNullOrEmpty()) {\r\n//                            binding.rlCompletedShoots.visibility = View.GONE\r\n//                            refreshData = false\r\n//                        }\r\n//\r\n//                        binding.rvCompletedShoots.visibility = View.VISIBLE\r\n//                        binding.shimmerCompleted.stopShimmer()\r\n//                        binding.shimmerCompleted.visibility = View.GONE\r\n//                        if (it.value.data != null) {\r\n//                            completedProjectList.clear()\r\n//                            completedProjectList.addAll(it.value.data.project_data)\r\n//\r\n//                            completedDashboardAdapter = CompletedDashboardAdapter(\r\n//                                requireContext(),\r\n//                                completedProjectList\r\n//                            )\r\n//\r\n//                            val layoutManager: RecyclerView.LayoutManager = LinearLayoutManager(\r\n//                                requireContext(),\r\n//                                LinearLayoutManager.HORIZONTAL,\r\n//                                false\r\n//                            )\r\n//                            binding.rvCompletedShoots.setLayoutManager(layoutManager)\r\n//                            binding.rvCompletedShoots.setAdapter(completedDashboardAdapter)\r\n//                        }\r\n//\r\n//                    }\r\n//                    is Resource.Loading -> {\r\n//                        binding.shimmerCompleted.startShimmer()\r\n//                    }\r\n//                    is Resource.Failure -> {\r\n//                        binding.shimmerCompleted.stopShimmer()\r\n//                        binding.shimmerCompleted.visibility = View.GONE\r\n//\r\n//                        if (it.errorCode == 404) {\r\n//                            binding.rlCompletedShoots.visibility = View.GONE\r\n//                            refreshData = false\r\n//                        } else {\r\n//                            requireContext().captureFailureEvent(\r\n//                                Events.GET_COMPLETED_ORDERS_FAILED, HashMap<String,Any?>(),\r\n//                                it.errorMessage!!\r\n//                            )\r\n//                            handleApiError(it)\r\n//                        }\r\n//                    }\r\n//\r\n//                }\r\n//            }\r\n//        )\r\n//\r\n//    }\r\n\r\n    private fun getCategories() {\r\n        viewModel.getCategories(\r\n            Utilities.getPreference(requireContext(), AppConstants.AUTH_KEY).toString()\r\n        )\r\n\r\n//        viewModel.categoriesResponse.observe(viewLifecycleOwner, Observer {\r\n//            when (it) {\r\n//                is Resource.Success -> {\r\n//\r\n//                    if (it.value.data.size == 1)\r\n//                    Utilities.savePrefrence(requireContext(), AppConstants.CATEGORY_NAME, it.value.data[0].prod_cat_name)\r\n//\r\n//                    LayoutHolder.data = it.value.data\r\n//                    requireContext().captureEvent(Events.GOT_CATEGORIES, HashMap<String,Any?>())\r\n//\r\n//                    binding.shimmerCategories.stopShimmer()\r\n//                    binding.shimmerCategories.visibility = View.GONE\r\n//                    binding.rvDashboardCategories.visibility = View.VISIBLE\r\n//\r\n//                    categoriesAdapter = CategoriesDashboardAdapter(requireContext(),\r\n//                        it.value.data as ArrayList<NewCategoriesResponse.Data>,\r\n//                        object : CategoriesDashboardAdapter.BtnClickListener {\r\n//                            override fun onBtnClick(position: Int) {\r\n//\r\n//                                LayoutHolder.categoryPosition = position\r\n//\r\n//                                Utilities.savePrefrence(requireContext(), AppConstants.CATEGORY_ID, it.value.data[position].prod_cat_id)\r\n//                                Utilities.savePrefrence(requireContext(), AppConstants.CATEGORY_NAME, it.value.data[position].prod_cat_name)\r\n//\r\n//                                catId = it.value.data[position].prod_cat_id\r\n//                                displayName = it.value.data[position].prod_cat_name\r\n//                                displayThumbnail = it.value.data[position].display_thumbnail\r\n//                                description = it.value.data[position].description\r\n//                                colorCode = it.value.data[position].color_code\r\n//\r\n//                                when(position){\r\n////                                    0 -> {\r\n////                                        val intent = Intent(requireContext(), StartShootActivity::class.java)\r\n////                                        intent.putExtra(\r\n////                                            AppConstants.CATEGORY_NAME,\r\n////                                            displayName\r\n////                                        )\r\n////                                        intent.putExtra(\r\n////                                            AppConstants.CATEGORY_ID,\r\n////                                            catId\r\n////                                        )\r\n////                                        intent.putExtra(\r\n////                                            AppConstants.IMAGE_URL,\r\n////                                            displayThumbnail\r\n////                                        )\r\n////                                        intent.putExtra(\r\n////                                            AppConstants.DESCRIPTION,\r\n////                                            description\r\n////                                        )\r\n////                                        intent.putExtra(AppConstants.COLOR, colorCode)\r\n////                                        startActivity(intent)\r\n////                                    }\r\n////                                    1 -> {\r\n////                                        val intent = Intent(requireContext(), ShootActivity::class.java)\r\n////                                        intent.putExtra(\r\n////                                            AppConstants.CATEGORY_NAME,\r\n////                                            displayName\r\n////                                        )\r\n////                                        intent.putExtra(\r\n////                                            AppConstants.CATEGORY_ID,\r\n////                                            catId\r\n////                                        )\r\n////                                        intent.putExtra(\r\n////                                            AppConstants.IMAGE_URL,\r\n////                                            displayThumbnail\r\n////                                        )\r\n////                                        intent.putExtra(\r\n////                                            AppConstants.DESCRIPTION,\r\n////                                            description\r\n////                                        )\r\n////                                        intent.putExtra(AppConstants.COLOR, colorCode)\r\n////                                        startActivity(intent)\r\n////                                    }\r\n//\r\n//                                    0, 1 -> {\r\n//                                        val intent = Intent(requireContext(), ShootPortraitActivity::class.java)\r\n//                                        val gson = Gson()\r\n//                                        intent.putExtra(\r\n//                                            AppConstants.CATEGORY_NAME,\r\n//                                            displayName\r\n//                                        )\r\n//                                        intent.putExtra(\r\n//                                            AppConstants.CATEGORY_ID,\r\n//                                            catId\r\n//                                        )\r\n//                                        intent.putExtra(\r\n//                                            AppConstants.IMAGE_URL,\r\n//                                            displayThumbnail\r\n//                                        )\r\n//                                        intent.putExtra(\r\n//                                            AppConstants.DESCRIPTION,\r\n//                                            description\r\n//                                        )\r\n//                                        intent.putExtra(AppConstants.COLOR, colorCode)\r\n//                                        startActivity(intent)\r\n//                                    }\r\n//                                    else -> {\r\n//                                        Toast.makeText(\r\n//                                            requireContext(),\r\n//                                            \"Coming Soon !\",\r\n//                                            Toast.LENGTH_SHORT\r\n//                                        ).show()\r\n//                                    }\r\n//                                }\r\n//\r\n//                            }\r\n//\r\n//                        })\r\n//                    val layoutManager: RecyclerView.LayoutManager = LinearLayoutManager(\r\n//                        requireContext(),\r\n//                        LinearLayoutManager.HORIZONTAL,\r\n//                        false\r\n//                    )\r\n//                    binding.rvDashboardCategories.setLayoutManager(layoutManager)\r\n//                    binding.rvDashboardCategories.setAdapter(categoriesAdapter)\r\n////                    categoriesAdapter.notifyDataSetChanged()\r\n//                }\r\n//                is Resource.Loading -> {\r\n//                    binding.shimmerCategories.startShimmer()\r\n//                }\r\n//                is Resource.Failure -> {\r\n//                    requireContext().captureFailureEvent(\r\n//                        Events.GET_CATEGORIES_FAILED, HashMap<String,Any?>(),\r\n//                        it.errorMessage!!\r\n//                    )\r\n//                    handleApiError(it)\r\n//                }\r\n//            }\r\n//        })\r\n    }\r\n\r\n    private fun welcomeHomeText() {\r\n        if (Utilities.getPreference(requireContext(), AppConstants.USER_NAME).toString() != \"\") {\r\n            binding.tvWelcomeHome.visibility = View.VISIBLE\r\n            binding.viewWelcome.visibility = View.VISIBLE\r\n            binding.tvWelcomeHome.setText(\r\n                \"Welcome \" +\r\n                        Utilities.getPreference(requireContext(), AppConstants.USER_NAME).toString()\r\n            )\r\n            if (Utilities.getPreference(requireContext(), AppConstants.USER_NAME).toString().trim()\r\n                    .equals(\"default\")\r\n            ) {\r\n                binding.tvWelcomeHome.visibility = View.VISIBLE\r\n                binding.viewWelcome.visibility = View.VISIBLE\r\n                binding.tvWelcomeHome.setText(\"Welcome Home\")\r\n            }\r\n        }\r\n    }\r\n\r\n    fun repeatRefreshData(){\r\n        try {\r\n           // getOngoingOrders()\r\n            //getCompletedOrders()\r\n            runnable = Runnable {\r\n                if (refreshData)\r\n                    repeatRefreshData()  }\r\n            if (runnable != null)\r\n                handler.postDelayed(runnable!!,10000)\r\n        }catch (e : IllegalArgumentException){\r\n            e.printStackTrace()\r\n        }catch (e : Exception){\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n\r\n    override fun onPause() {\r\n        if (runnable != null)\r\n            handler.removeCallbacks(runnable!!)\r\n        super.onPause()\r\n    }\r\n\r\n\r\n\r\n\r\n    private fun setSliderRecycler() {\r\n\r\n        binding.ivBanner.setSliderThumb(\r\n            ContextCompat.getDrawable(\r\n                requireContext(),\r\n                R.drawable.ic_sliderline\r\n            )\r\n        )\r\n\r\n        tabLayout = binding.tbDashboard\r\n        tabLayout.addTab(tabLayout.newTab());\r\n//        tabLayout.addTab(tabLayout.newTab());\r\n\r\n\r\n        binding.ivBanner.setBeforeImage(\r\n            ContextCompat.getDrawable(\r\n                requireContext(),\r\n                R.drawable.food_before\r\n            )\r\n        ).setAfterImage(ContextCompat.getDrawable(requireContext(), R.drawable.food_after))\r\n    }\r\n\r\n    private fun showFreeCreditDialog(message: String) {\r\n        val dialog = Dialog(requireContext())\r\n        dialog.requestWindowFeature(Window.FEATURE_NO_TITLE)\r\n        dialog.setCancelable(true)\r\n\r\n        var dialogView =\r\n            LayoutInflater.from(requireContext()).inflate(R.layout.free_credit_dialog, null)\r\n        var tvMessage: TextView = dialogView.findViewById(R.id.tvSkuNameDialog)\r\n        tvMessage.text = message\r\n\r\n        dialog.setContentView(dialogView)\r\n\r\n        dialog.getWindow()?.setBackgroundDrawable(ColorDrawable(Color.TRANSPARENT));\r\n        val llOk: LinearLayout = dialog.findViewById(R.id.llOk)\r\n\r\n\r\n        llOk.setOnClickListener(View.OnClickListener {\r\n\r\n            dialog.dismiss()\r\n\r\n        })\r\n        dialog.show()\r\n\r\n    }\r\n\r\n    private fun lisners() {\r\n        binding.tvCompletedViewall.setOnClickListener {\r\n            val intent = Intent(requireContext(), CompletedProjectsActivity::class.java)\r\n            startActivity(intent)\r\n        }\r\n\r\n//        binding.tvOngoingViewall.setOnClickListener {\r\n//            val intent = Intent(requireContext(), OngoingOrdersActivity::class.java)\r\n//            startActivity(intent)\r\n//        }\r\n        binding.btGetStarted.setOnClickListener {\r\n            val intent = Intent(requireContext(), CategoriesActivity::class.java)\r\n            startActivity(intent)\r\n        }\r\n    }\r\n\r\n\r\n\r\n    override fun onResume() {\r\n        super.onResume()\r\n\r\n        appUpdateManager\r\n            .appUpdateInfo\r\n            .addOnSuccessListener { appUpdateInfo ->\r\n                if (appUpdateInfo.updateAvailability()\r\n                    == UpdateAvailability.DEVELOPER_TRIGGERED_UPDATE_IN_PROGRESS\r\n                ) {\r\n                    // If an in-app update is already running, resume the update.\r\n                    appUpdateManager.startUpdateFlowForResult(\r\n                        appUpdateInfo,\r\n                        AppUpdateType.IMMEDIATE,\r\n                        this,\r\n                        MY_REQUEST_CODE\r\n                    )\r\n                }\r\n            }\r\n    }\r\n\r\n    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\r\n        super.onActivityResult(requestCode, resultCode, data)\r\n        if (requestCode == MY_REQUEST_CODE) {\r\n            if (resultCode != AppCompatActivity.RESULT_OK) {\r\n                activity?.moveTaskToBack(true)\r\n                activity?.finish()\r\n                Toast.makeText(\r\n                    requireContext(),\r\n                    \"Update flow failed!\" + requestCode,\r\n                    Toast.LENGTH_SHORT\r\n                ).show()\r\n\r\n                log(\"MY_APP\\\", \\\"Update flow failed! Result code: \"+resultCode)\r\n                // If the update is cancelled or fails,\r\n                // you can request to start the update again.\r\n            }\r\n        }\r\n    }\r\n\r\n    override fun getViewModel() = DashboardViewModel::class.java\r\n\r\n    override fun getFragmentBinding(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?\r\n    ) = HomeDashboardFragmentBinding.inflate(inflater, container, false)\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/swiggy/java/com/spyneai/dashboard/ui/HomeDashboardFragment.kt b/app/src/swiggy/java/com/spyneai/dashboard/ui/HomeDashboardFragment.kt
--- a/app/src/swiggy/java/com/spyneai/dashboard/ui/HomeDashboardFragment.kt	
+++ b/app/src/swiggy/java/com/spyneai/dashboard/ui/HomeDashboardFragment.kt	
@@ -35,8 +35,7 @@
 import com.spyneai.adapter.CategoriesDashboardAdapter
 import com.spyneai.base.BaseFragment
 import com.spyneai.base.network.Resource
-import com.spyneai.captureEvent
-import com.spyneai.captureFailureEvent
+
 
 import com.spyneai.dashboard.data.DashboardViewModel
 import com.spyneai.dashboard.data.model.LayoutHolder
Index: app/src/main/java/com/spyneai/shoot/ui/ecomwithgrid/dialogs/CreateSkuEcomDialog.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.spyneai.shoot.ui.ecomwithgrid.dialogs\r\n\r\nimport android.os.Bundle\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.view.WindowManager\r\nimport android.widget.Toast\r\nimport com.journeyapps.barcodescanner.ScanContract\r\nimport com.journeyapps.barcodescanner.ScanIntentResult\r\nimport com.journeyapps.barcodescanner.ScanOptions\r\nimport com.spyneai.base.BaseDialogFragment\r\nimport com.spyneai.base.network.Resource\r\nimport com.spyneai.captureEvent\r\nimport com.spyneai.captureFailureEvent\r\nimport com.spyneai.dashboard.ui.handleApiError\r\nimport com.spyneai.databinding.CreateSkuEcomDialogBinding\r\nimport com.spyneai.getUuid\r\nimport com.spyneai.needs.AppConstants\r\nimport com.spyneai.needs.Utilities\r\nimport com.spyneai.posthog.Events\r\nimport com.spyneai.service.ServerSyncTypes\r\nimport com.spyneai.shoot.data.ShootViewModel\r\nimport com.spyneai.shoot.data.model.CreateProjectRes\r\nimport com.spyneai.shoot.repository.model.project.Project\r\nimport com.spyneai.shoot.repository.model.sku.Sku\r\nimport com.spyneai.shoot.utils.log\r\nimport com.spyneai.startUploadingService\r\nimport kotlinx.coroutines.Dispatchers\r\nimport kotlinx.coroutines.GlobalScope\r\nimport kotlinx.coroutines.launch\r\n\r\nclass CreateSkuEcomDialog : BaseDialogFragment<ShootViewModel, CreateSkuEcomDialogBinding>() {\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r\n        dialog?.setCancelable(false)\r\n\r\n        binding.ivBarCode.setOnClickListener {\r\n            val options = ScanOptions()\r\n            options.setDesiredBarcodeFormats(ScanOptions.ONE_D_CODE_TYPES)\r\n            options.setPrompt(\"Scan a barcode\")\r\n            options.setCameraId(0) // Use a specific camera of the device\r\n            options.setBeepEnabled(true)\r\n            options.setOrientationLocked(false)\r\n            barcodeLauncher.launch(options)\r\n        }\r\n\r\n        binding.ivClose.setOnClickListener {\r\n            requireActivity().onBackPressed()\r\n        }\r\n\r\n\r\n        binding.btnProceed.setOnClickListener {\r\n            when {\r\n                binding.etSkuName.text.toString().isEmpty() -> {\r\n                    binding.etSkuName.error = \"Please enter product name\"\r\n                }\r\n                binding.etSkuName.text.toString()\r\n                    .contains(\"[!\\\"#$%&'()*+,-./:;\\\\\\\\<=>?@\\\\[\\\\]^_`{|}~]\".toRegex()) -> {\r\n                    binding.etSkuName.error = \"Special characters not allowed\"\r\n                }\r\n                else -> {\r\n                    createSku(\r\n                        removeWhiteSpace(binding.etSkuName.text.toString())\r\n                    )\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private fun removeWhiteSpace(toString: String) = toString.replace(\"\\\\s\".toRegex(), \"\")\r\n\r\n\r\n    private fun createSku(skuName: String) {\r\n        val sku = Sku(\r\n            uuid = getUuid(),\r\n            skuName = skuName,\r\n            projectUuid = viewModel.project?.uuid,\r\n            projectId = viewModel.project?.projectId,\r\n            categoryId = viewModel.categoryDetails.value?.categoryId,\r\n            categoryName = viewModel.categoryDetails.value?.categoryName,\r\n            subcategoryName = viewModel.subCategory.value?.sub_cat_name,\r\n            subcategoryId = if (viewModel.subCategory.value?.prod_sub_cat_id == null) \"subcategoryId\" else viewModel.subCategory.value?.prod_sub_cat_id,\r\n            initialFrames = if (viewModel.exterirorAngles.value == null) 0 else viewModel.exterirorAngles.value\r\n        )\r\n\r\n        viewModel.sku = sku\r\n\r\n        //notify project created\r\n        viewModel.isProjectCreated.value = true\r\n        viewModel.isSkuCreated.value = true\r\n\r\n\r\n        when (viewModel.categoryDetails.value?.categoryId) {\r\n            AppConstants.FOOTWEAR_CATEGORY_ID,\r\n            AppConstants.MENS_FASHION_CATEGORY_ID,\r\n            AppConstants.WOMENS_FASHION_CATEGORY_ID,\r\n            AppConstants.CAPS_CATEGORY_ID,\r\n            AppConstants.FASHION_CATEGORY_ID,\r\n            AppConstants.ACCESSORIES_CATEGORY_ID,\r\n            AppConstants.HEALTH_AND_BEAUTY_CATEGORY_ID -> {\r\n                viewModel.getSubCategories.value = true\r\n            }\r\n            else -> {\r\n//                            viewModel.showLeveler.value = true\r\n                sku.isSelectAble = true\r\n                viewModel.showGrid.value = viewModel.getCameraSetting().isGridActive\r\n                viewModel.showLeveler.value = viewModel.getCameraSetting().isGryroActive\r\n            }\r\n        }\r\n\r\n        //add sku to local database\r\n        GlobalScope.launch {\r\n            viewModel.insertSku()\r\n\r\n            //start sync service\r\n            GlobalScope.launch(Dispatchers.Main) {\r\n                if (sku.isSelectAble){\r\n                    requireContext().startUploadingService(\r\n                        ProjectTagDialog::class.java.simpleName,\r\n                        ServerSyncTypes.CREATE\r\n                    )\r\n                }\r\n\r\n                dismiss()\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private val barcodeLauncher = registerForActivityResult(\r\n        ScanContract()\r\n    ) { result: ScanIntentResult ->\r\n        if (result.contents == null) {\r\n            Toast.makeText(requireContext(), \"Cancelled\", Toast.LENGTH_LONG).show()\r\n        } else {\r\n\r\n            binding.etSkuName.setText(result.contents)\r\n        }\r\n    }\r\n\r\n\r\n    override fun onResume() {\r\n        super.onResume()\r\n        dialog?.getWindow()?.setLayout(\r\n            WindowManager.LayoutParams.MATCH_PARENT,\r\n            WindowManager.LayoutParams.WRAP_CONTENT\r\n        );\r\n    }\r\n\r\n    override fun getViewModel() = ShootViewModel::class.java\r\n\r\n    override fun getFragmentBinding(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?\r\n    ) = CreateSkuEcomDialogBinding.inflate(inflater, container, false)\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/spyneai/shoot/ui/ecomwithgrid/dialogs/CreateSkuEcomDialog.kt b/app/src/main/java/com/spyneai/shoot/ui/ecomwithgrid/dialogs/CreateSkuEcomDialog.kt
--- a/app/src/main/java/com/spyneai/shoot/ui/ecomwithgrid/dialogs/CreateSkuEcomDialog.kt	
+++ b/app/src/main/java/com/spyneai/shoot/ui/ecomwithgrid/dialogs/CreateSkuEcomDialog.kt	
@@ -10,10 +10,7 @@
 import com.journeyapps.barcodescanner.ScanIntentResult
 import com.journeyapps.barcodescanner.ScanOptions
 import com.spyneai.base.BaseDialogFragment
-import com.spyneai.base.network.Resource
-import com.spyneai.captureEvent
-import com.spyneai.captureFailureEvent
-import com.spyneai.dashboard.ui.handleApiError
+
 import com.spyneai.databinding.CreateSkuEcomDialogBinding
 import com.spyneai.getUuid
 import com.spyneai.needs.AppConstants
Index: app/src/main/java/com/spyneai/shoot/ui/ecomwithgrid/dialogs/ConfirmReshootEcomDialog.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.spyneai.shoot.ui.ecomwithgrid.dialogs\r\n\r\nimport android.content.Intent\r\nimport android.graphics.Bitmap\r\nimport android.graphics.BitmapFactory\r\nimport android.graphics.Matrix\r\nimport android.media.ExifInterface\r\nimport android.os.Build\r\nimport android.os.Bundle\r\nimport android.os.Environment\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.view.WindowManager\r\nimport androidx.core.content.ContextCompat\r\nimport androidx.lifecycle.lifecycleScope\r\nimport com.bumptech.glide.Glide\r\nimport com.bumptech.glide.load.engine.DiskCacheStrategy\r\n\r\nimport com.spyneai.base.BaseDialogFragment\r\nimport com.spyneai.captureEvent\r\nimport com.spyneai.dashboard.ui.MainDashboardActivity\r\nimport com.spyneai.databinding.ConfirmReshootEcomDialogBinding\r\nimport com.spyneai.loadSmartly\r\nimport com.spyneai.needs.AppConstants\r\nimport com.spyneai.posthog.Events\r\nimport com.spyneai.service.Actions\r\nimport com.spyneai.service.ImageUploadingService\r\nimport com.spyneai.service.ServerSyncTypes\r\nimport com.spyneai.service.getServiceState\r\nimport com.spyneai.shoot.data.ShootViewModel\r\nimport com.spyneai.shoot.ui.dialogs.ConfirmReshootDialog\r\nimport com.spyneai.shoot.utils.log\r\nimport com.spyneai.startUploadingService\r\nimport kotlinx.coroutines.Dispatchers\r\nimport kotlinx.coroutines.GlobalScope\r\nimport kotlinx.coroutines.launch\r\nimport org.json.JSONObject\r\nimport java.io.*\r\n\r\n\r\nclass ConfirmReshootEcomDialog :\r\n    BaseDialogFragment<ShootViewModel, ConfirmReshootEcomDialogBinding>() {\r\n\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r\n        dialog?.setCancelable(false)\r\n\r\n        val uri = viewModel.shootData.value?.capturedImage\r\n//        binding.ivCapturedImage.setRotation(90F)\r\n\r\n        viewModel.end.value = System.currentTimeMillis()\r\n        val difference = (viewModel.end.value!! - viewModel.begin.value!!)/1000.toFloat()\r\n        log(\"dialog- \"+difference)\r\n\r\n        requireContext().loadSmartly(uri,binding.ivCapturedImage)\r\n\r\n//        Glide.with(requireContext())\r\n//            .load(uri)\r\n//            .diskCacheStrategy(DiskCacheStrategy.NONE)\r\n//            .skipMemoryCache(true)\r\n//            .into(binding.ivCapturedImage)\r\n\r\n        binding.btReshootImage.setOnClickListener {\r\n            viewModel.reshootCapturedImage.value = true\r\n            viewModel.isCameraButtonClickable = true\r\n            val properties = HashMap<String,Any?>()\r\n            properties.apply {\r\n                this[\"sku_id\"] = viewModel.shootData.value?.sku_id\r\n                this[\"project_id\"] = viewModel.shootData.value?.project_id\r\n                this[\"image_type\"] = viewModel.shootData.value?.image_category\r\n            }\r\n            requireContext().captureEvent(\r\n                Events.RESHOOT,\r\n                properties\r\n            )\r\n\r\n            //remove last item from shoot list\r\n            if (!viewModel.isReclick){\r\n                viewModel.shootList.value?.let { list ->\r\n                    val currentElement = list.firstOrNull {\r\n                        it.overlayId == viewModel.overlayId\r\n                    }\r\n\r\n                    currentElement?.let {\r\n                        list.remove(it)\r\n                    }\r\n                }\r\n            }\r\n\r\n            dismiss()\r\n        }\r\n\r\n        binding.btConfirmImage.setOnClickListener {\r\n            viewModel.onImageConfirmed.value = true\r\n            //viewModel.shootNumber.value = viewModel.shootNumber.value?.plus(1)\r\n\r\n            viewModel.isStopCaptureClickable = true\r\n            val properties = HashMap<String,Any?>()\r\n            val cameraSetting = viewModel.getCameraSetting()\r\n\r\n            properties.apply {\r\n                put(\"image_data\", JSONObject().apply {\r\n                    put(\"sku_id\",viewModel.shootData.value?.sku_id)\r\n                    put(\"project_id\",viewModel.shootData.value?.project_id)\r\n                    put(\"image_type\",viewModel.shootData.value?.image_category)\r\n                    put(\"sequence\",viewModel.shootData.value?.sequence)\r\n                    put(\"name\",viewModel.shootData.value?.name)\r\n                    put(\"angle\",viewModel.shootData.value?.angle)\r\n                    put(\"overlay_id\",viewModel.shootData.value?.overlayId)\r\n                    put(\"debug_data\",viewModel.shootData.value?.debugData)\r\n                }.toString())\r\n                put(\"camera_setting\", JSONObject().apply {\r\n                    put(\"is_overlay_active\",cameraSetting.isOverlayActive)\r\n                    put(\"is_grid_active\",cameraSetting.isGridActive)\r\n                    put(\"is_gyro_active\",cameraSetting.isGryroActive)\r\n                })\r\n            }\r\n\r\n            requireContext().captureEvent(\r\n                Events.CONFIRMED,\r\n                properties\r\n            )\r\n\r\n            viewModel.isCameraButtonClickable = true\r\n\r\n            if (viewModel.isReshoot){\r\n                GlobalScope.launch(Dispatchers.IO) {\r\n                    viewModel.\r\n                    insertImage(viewModel.shootData.value!!)\r\n                }\r\n\r\n                //requireContext().startUploadServiceWithCheck()\r\n                requireContext().startUploadingService(\r\n                    ConfirmReshootEcomDialog::class.java.simpleName,\r\n                    ServerSyncTypes.UPLOAD\r\n                )\r\n\r\n                if (viewModel.allReshootClicked)\r\n                    viewModel.reshootCompleted.value = true\r\n\r\n            }else {\r\n                GlobalScope.launch(Dispatchers.IO) {\r\n                    viewModel.\r\n                    insertImage(viewModel.shootData.value!!)\r\n                }\r\n\r\n                //requireContext().startUploadServiceWithCheck()\r\n                requireContext().startUploadingService(\r\n                    ConfirmReshootEcomDialog::class.java.simpleName,\r\n                    ServerSyncTypes.UPLOAD\r\n                )\r\n            }\r\n\r\n            dismiss()\r\n        }\r\n    }\r\n\r\n\r\n\r\n    override fun onResume() {\r\n        super.onResume()\r\n        dialog?.getWindow()?.setLayout(\r\n            WindowManager.LayoutParams.MATCH_PARENT,\r\n            WindowManager.LayoutParams.WRAP_CONTENT\r\n        );\r\n    }\r\n\r\n\r\n    override fun getViewModel() = ShootViewModel::class.java\r\n\r\n    override fun getFragmentBinding(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?\r\n    ) = ConfirmReshootEcomDialogBinding.inflate(inflater, container, false)\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/spyneai/shoot/ui/ecomwithgrid/dialogs/ConfirmReshootEcomDialog.kt b/app/src/main/java/com/spyneai/shoot/ui/ecomwithgrid/dialogs/ConfirmReshootEcomDialog.kt
--- a/app/src/main/java/com/spyneai/shoot/ui/ecomwithgrid/dialogs/ConfirmReshootEcomDialog.kt	
+++ b/app/src/main/java/com/spyneai/shoot/ui/ecomwithgrid/dialogs/ConfirmReshootEcomDialog.kt	
@@ -18,12 +18,13 @@
 import com.bumptech.glide.load.engine.DiskCacheStrategy
 
 import com.spyneai.base.BaseDialogFragment
-import com.spyneai.captureEvent
+
 import com.spyneai.dashboard.ui.MainDashboardActivity
 import com.spyneai.databinding.ConfirmReshootEcomDialogBinding
 import com.spyneai.loadSmartly
 import com.spyneai.needs.AppConstants
 import com.spyneai.posthog.Events
+import com.spyneai.posthog.captureEvent
 import com.spyneai.service.Actions
 import com.spyneai.service.ImageUploadingService
 import com.spyneai.service.ServerSyncTypes
Index: app/src/main/java/com/spyneai/shoot/ui/ecomwithoverlays/OverlayEcomFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.spyneai.shoot.ui.ecomwithoverlays\r\n\r\nimport android.graphics.drawable.Drawable\r\nimport android.os.Bundle\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.view.ViewTreeObserver\r\nimport androidx.core.content.ContextCompat\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport com.bumptech.glide.Glide\r\nimport com.bumptech.glide.load.DataSource\r\nimport com.bumptech.glide.load.engine.DiskCacheStrategy\r\nimport com.bumptech.glide.load.engine.GlideException\r\nimport com.bumptech.glide.request.RequestListener\r\nimport com.bumptech.glide.request.RequestOptions\r\nimport com.bumptech.glide.request.target.Target\r\nimport com.bumptech.glide.signature.ObjectKey\r\nimport com.google.android.material.snackbar.Snackbar\r\nimport com.spyneai.R\r\nimport com.spyneai.base.BaseFragment\r\nimport com.spyneai.base.OnItemClickListener\r\nimport com.spyneai.base.network.Resource\r\nimport com.spyneai.camera2.OverlaysResponse\r\nimport com.spyneai.captureEvent\r\nimport com.spyneai.captureFailureEvent\r\nimport com.spyneai.dashboard.ui.handleApiError\r\nimport com.spyneai.databinding.FragmentOverlayEcomBinding\r\nimport com.spyneai.needs.AppConstants\r\nimport com.spyneai.needs.Utilities\r\nimport com.spyneai.posthog.Events\r\nimport com.spyneai.service.ServerSyncTypes\r\nimport com.spyneai.shoot.adapters.OverlaysAdapter\r\nimport com.spyneai.shoot.data.OnOverlaySelectionListener\r\nimport com.spyneai.shoot.data.ShootViewModel\r\nimport com.spyneai.shoot.data.model.ShootData\r\nimport com.spyneai.shoot.ui.SubCategoryAndAngleFragment\r\nimport com.spyneai.shoot.ui.dialogs.ReclickDialog\r\nimport com.spyneai.startUploadingService\r\nimport kotlinx.android.synthetic.main.fragment_overlays.*\r\nimport kotlinx.coroutines.Dispatchers\r\nimport kotlinx.coroutines.GlobalScope\r\nimport kotlinx.coroutines.launch\r\n\r\nclass OverlayEcomFragment : BaseFragment<ShootViewModel, FragmentOverlayEcomBinding>(),\r\n    OnOverlaySelectionListener, OnItemClickListener {\r\n\r\n\r\n    var overlaysAdapter: OverlaysAdapter? = null\r\n    var snackbar: Snackbar? = null\r\n    //var position = 1\r\n    var pos = 0\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r\n\r\n        viewModel.showOverlay.observe(viewLifecycleOwner) {\r\n            if (it) {\r\n                binding.imgOverlay.visibility = View.VISIBLE\r\n            } else binding.imgOverlay.visibility = View.INVISIBLE\r\n        }\r\n\r\n        viewModel.showGrid.observe(viewLifecycleOwner) {\r\n            if (it) {\r\n                binding.groupGridLines?.visibility = View.VISIBLE\r\n            } else binding.groupGridLines?.visibility = View.INVISIBLE\r\n        }\r\n\r\n        //observe new image clicked\r\n        viewModel.shootList.observe(viewLifecycleOwner) {\r\n            try {\r\n                if (viewModel.showConfirmReshootDialog.value == true && !it.isNullOrEmpty()) {\r\n                    binding.llChangeSubCat.visibility = View.INVISIBLE\r\n                    val element = viewModel.getCurrentShoot()\r\n                    showImageConfirmDialog(element!!)\r\n                }\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n            }\r\n        }\r\n\r\n        viewModel.isSkuCreated.observe(viewLifecycleOwner) {\r\n            getOverlays()\r\n        }\r\n\r\n        observeOverlays()\r\n\r\n        viewModel.onImageConfirmed.observe(viewLifecycleOwner) {\r\n            if (viewModel.shootList.value != null && overlaysAdapter != null) {\r\n                viewModel.setSelectedItem(overlaysAdapter?.listItems!!)\r\n            }\r\n\r\n            try {\r\n                val list = overlaysAdapter?.listItems as List<OverlaysResponse.Overlays>\r\n                viewModel.allEcomOverlyasClicked = list.all {\r\n                    it.imageClicked\r\n                }\r\n\r\n            } catch (e: Exception) {\r\n\r\n            }\r\n        }\r\n\r\n        viewModel.updateSelectItem.observe(viewLifecycleOwner) {\r\n            if (it) {\r\n                val list = overlaysAdapter?.listItems as List<OverlaysResponse.Overlays>\r\n\r\n                val element = list.firstOrNull {\r\n                    it.isSelected\r\n                }\r\n\r\n                val data = list[viewModel.currentShoot]\r\n\r\n                if (element != null && data != element) {\r\n                    data.isSelected = true\r\n                    element.isSelected = false\r\n                    overlaysAdapter?.notifyItemChanged(viewModel.currentShoot)\r\n                    overlaysAdapter?.notifyItemChanged(list.indexOf(element))\r\n                    binding.rvSubcategories.scrollToPosition(viewModel.currentShoot)\r\n\r\n                    val s = \"\"\r\n                }\r\n            }\r\n        }\r\n\r\n        viewModel.notifyItemChanged.observe(viewLifecycleOwner, {\r\n            overlaysAdapter?.notifyItemChanged(it)\r\n        })\r\n\r\n        viewModel.scrollView.observe(viewLifecycleOwner, {\r\n            binding.rvSubcategories.scrollToPosition(it)\r\n        })\r\n\r\n        viewModel.enableCameraButton.observe(viewLifecycleOwner) {\r\n            if (it) {\r\n                showViews()\r\n                binding.rvSubcategories.visibility = View.VISIBLE\r\n                binding.llAngles.visibility = View.VISIBLE\r\n\r\n                when (getString(R.string.app_name)) {\r\n                    AppConstants.SWIGGY,AppConstants.ZOMATO,AppConstants.FOODPANDA, AppConstants.SPYNE_AI -> {\r\n                        if (Utilities.getPreference(requireContext(), AppConstants.CATEGORY_NAME)\r\n                                .equals(\"Food & Beverages\")\r\n                        ) {\r\n                            if (viewModel.shootList.value.isNullOrEmpty()) {\r\n                                binding.llChangeSubCat.visibility = View.VISIBLE\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n\r\n            }\r\n        }\r\n\r\n        listeners()\r\n    }\r\n\r\n    private fun listeners() {\r\n        binding.llChangeSubCat.setOnClickListener {\r\n            binding.rvSubcategories.visibility = View.INVISIBLE\r\n            binding.llAngles.visibility = View.INVISIBLE\r\n            if (viewModel.fromDrafts) {\r\n                viewModel.getSubCategories.value = true\r\n                //add subcat selection fragment\r\n                viewModel.getSubCategories.observe(\r\n                    requireActivity()\r\n                ) {\r\n                    if (!viewModel.isSubcategoriesSelectionShown) {\r\n                        requireActivity().supportFragmentManager?.beginTransaction()\r\n                            ?.add(R.id.flCamerFragment, SubCategoryAndAngleFragment())?.commit()\r\n                    }\r\n                }\r\n            } else {\r\n                viewModel.showSubCat.value = true\r\n            }\r\n\r\n            binding.llChangeSubCat.visibility = View.INVISIBLE\r\n            viewModel.enableCameraButton.value = false\r\n        }\r\n    }\r\n\r\n    private fun observeOverlays() {\r\n        viewModel.overlaysResponse.observe(viewLifecycleOwner) { it ->\r\n            when (it) {\r\n                is Resource.Success -> {\r\n                    Utilities.hideProgressDialog()\r\n\r\n                    //set exterior angle value\r\n                    viewModel.exterirorAngles.value = it.value.data.size\r\n                    viewModel.sku?.apply {\r\n                        initialFrames = it.value.data.size\r\n                        totalFrames = it.value.data.size\r\n                    }\r\n\r\n                    //update exterior angles in local DB\r\n                    GlobalScope.launch(Dispatchers.IO) {\r\n                        viewModel.updateSkuExteriorAngles()\r\n\r\n                        //start sync service\r\n                        GlobalScope.launch(Dispatchers.Main) {\r\n                            requireContext().startUploadingService(\r\n                                OverlayEcomFragment::class.java.simpleName,\r\n                                ServerSyncTypes.CREATE\r\n                            )\r\n                        }\r\n                    }\r\n\r\n                    viewModel.displayName = it.value.data[0].display_name\r\n                    viewModel.displayThumbanil = it.value.data[0].display_thumbnail\r\n\r\n                    requireContext().captureEvent(\r\n                        Events.GET_OVERLAYS,\r\n                        HashMap<String, Any?>()\r\n                            .apply {\r\n                                this[\"angles\"] = it.value.data.size\r\n                            }\r\n                    )\r\n\r\n                    if (viewModel.fromDrafts) {\r\n                        binding.tvShoot?.text = \"${\r\n                            requireActivity().intent.getIntExtra(AppConstants.EXTERIOR_SIZE, 0)\r\n                                .plus(1)\r\n                        }/${it.value.data.size}\"\r\n                    } else {\r\n                        binding.tvShoot?.text = \"1/${it.value.data.size}\"\r\n\r\n                    }\r\n\r\n                    val overlaysList = it.value.data\r\n                    var index = 0\r\n\r\n                    if (viewModel.shootList.value != null) {\r\n                        overlaysList.forEach { overlay ->\r\n                            val element = viewModel.shootList.value!!.firstOrNull {\r\n                                it.overlayId == overlay.id\r\n                            }\r\n\r\n                            if (element != null) {\r\n                                overlay.imageClicked = true\r\n                                overlay.imagePath = element.capturedImage\r\n                            }\r\n                        }\r\n\r\n                        val element = overlaysList.firstOrNull {\r\n                            !it.isSelected && !it.imageClicked\r\n                        }\r\n\r\n                        if (element != null) {\r\n                            element.isSelected = true\r\n                            viewModel.displayName = element.display_name\r\n                            viewModel.displayThumbanil = element.display_thumbnail\r\n\r\n                            index = overlaysList.indexOf(element)\r\n                        }\r\n                    } else {\r\n                        //set overlays\r\n                        overlaysList[0].isSelected = true\r\n                        viewModel.displayName = it.value.data[0].display_name\r\n                        viewModel.displayThumbanil = it.value.data[0].display_thumbnail\r\n                    }\r\n\r\n\r\n                    overlaysAdapter = OverlaysAdapter(\r\n                        overlaysList,\r\n                        this@OverlayEcomFragment,\r\n                        this@OverlayEcomFragment\r\n                    )\r\n\r\n                    binding.rvSubcategories.apply {\r\n                        visibility = View.VISIBLE\r\n                        layoutManager = LinearLayoutManager(\r\n                            requireContext(),\r\n                            LinearLayoutManager.HORIZONTAL,\r\n                            false\r\n                        )\r\n                        adapter = overlaysAdapter\r\n                    }\r\n\r\n                    binding.rvSubcategories.scrollToPosition(index)\r\n\r\n                    requireContext().captureEvent(\r\n                        Events.GET_OVERLAYS,\r\n                        HashMap<String, Any?>()\r\n                            .apply {\r\n                                this.put(\"angles\", it.value.data.size)\r\n                            }\r\n\r\n                    )\r\n\r\n                    showViews()\r\n                }\r\n\r\n                is Resource.Loading -> Utilities.showProgressDialog(requireContext())\r\n\r\n                is Resource.Failure -> {\r\n                    requireContext().captureFailureEvent(\r\n                        Events.GET_OVERLAYS_FAILED, HashMap<String, Any?>(),\r\n                        it.errorMessage!!\r\n                    )\r\n                    Utilities.hideProgressDialog()\r\n                    handleApiError(it) { getOverlays() }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private fun getPreviewDimensions(view: View) {\r\n        view.viewTreeObserver.addOnGlobalLayoutListener(object :\r\n            ViewTreeObserver.OnGlobalLayoutListener {\r\n            override fun onGlobalLayout() {\r\n                view.viewTreeObserver.removeOnGlobalLayoutListener(this)\r\n\r\n                val shootDimensions = viewModel.shootDimensions.value\r\n                shootDimensions?.overlayWidth = view.width\r\n                shootDimensions?.overlayHeight = view.height\r\n\r\n                viewModel.shootDimensions.value = shootDimensions\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    private fun showImageConfirmDialog(shootData: ShootData) {\r\n        viewModel.shootData.value = shootData\r\n        ConfirmReshootPortraitDialog().show(requireFragmentManager(), \"ConfirmReshootDialog\")\r\n    }\r\n\r\n\r\n    private fun getOverlays() {\r\n        viewModel.subCategory.value?.let {\r\n            viewModel.getOverlays(\r\n                Utilities.getPreference(requireContext(), AppConstants.AUTH_KEY).toString(),\r\n                viewModel.categoryDetails.value?.categoryId!!,\r\n                it.prod_sub_cat_id!!,\r\n                viewModel.exterirorAngles.value.toString()\r\n            )\r\n\r\n            requireContext().captureEvent(\r\n                Events.GET_OVERLAYS_INTIATED,\r\n                HashMap<String, Any?>()\r\n                    .apply {\r\n                        this.put(\"angles\", viewModel.exterirorAngles.value.toString())\r\n                        this.put(\"prod_sub_cat_id\", it.prod_sub_cat_id!!)\r\n                    }\r\n            )\r\n        }\r\n    }\r\n\r\n\r\n    private fun showViews() {\r\n        binding.apply {\r\n            tvSkuName?.visibility = View.VISIBLE\r\n            tvAngleName?.visibility = View.VISIBLE\r\n            llProgress?.visibility = View.VISIBLE\r\n//            imgOverlay?.visibility = View.VISIBLE\r\n            tvSkuName?.text = viewModel.sku?.skuName\r\n        }\r\n        viewModel.showGrid.value = viewModel.getCameraSetting().isGridActive\r\n        viewModel.showLeveler.value = viewModel.getCameraSetting().isGryroActive\r\n        viewModel.showOverlay.value = viewModel.getCameraSetting().isOverlayActive\r\n\r\n        if (viewModel.fromDrafts && viewModel.categoryDetails.value?.categoryId == AppConstants.FOOTWEAR_CATEGORY_ID){\r\n//            viewModel.showLeveler.value = true\r\n            viewModel.showGrid.value = viewModel.getCameraSetting().isGridActive\r\n            viewModel.showLeveler.value = viewModel.getCameraSetting().isGryroActive\r\n            viewModel.showOverlay.value = viewModel.getCameraSetting().isOverlayActive\r\n        }\r\n\r\n    }\r\n\r\n    override fun getViewModel() = ShootViewModel::class.java\r\n\r\n    override fun getFragmentBinding(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?\r\n    ) = FragmentOverlayEcomBinding.inflate(inflater, container, false)\r\n\r\n    override fun onOverlaySelected(view: View, position: Int, data: Any?) {\r\n        viewModel.isCameraButtonClickable = true\r\n        viewModel.enableCameraButton.value = true\r\n        viewModel.currentShoot = position\r\n\r\n        when (data) {\r\n            is OverlaysResponse.Overlays -> {\r\n                viewModel.displayName = data.display_name\r\n                viewModel.displayThumbanil = data.display_thumbnail\r\n                viewModel.overlayId = data.id\r\n                viewModel.desiredAngle = data.frame_angle.toInt()\r\n\r\n                if (getString(R.string.app_name) != AppConstants.KARVI)\r\n                    loadOverlay(data.angle_name, data.display_thumbnail)\r\n\r\n\r\n                binding.tvShoot?.text =\r\n                    position.plus(1).toString() + \"/\" + viewModel.exterirorAngles.value.toString()\r\n\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    override fun onItemClick(view: View, position: Int, data: Any?) {\r\n        viewModel.currentShoot = position\r\n\r\n        when (data) {\r\n            is OverlaysResponse.Overlays -> {\r\n                if (data.imageClicked){\r\n                    val bundle = Bundle()\r\n                    bundle.putInt(\"overlay_id\",data.id)\r\n                    bundle.putInt(\"position\",position)\r\n                    bundle.putString(\"image_type\",\r\n                        viewModel.categoryDetails.value?.imageType)\r\n                    val reclickDialog = ReclickDialog()\r\n                    reclickDialog.arguments = bundle\r\n                    reclickDialog.show(requireActivity().supportFragmentManager,\"ReclickDialog\")\r\n                }else{\r\n                    viewModel.overlayId = data.id\r\n\r\n                    val list = overlaysAdapter?.listItems as List<OverlaysResponse.Overlays>\r\n\r\n                    val element = list.firstOrNull {\r\n                        it.isSelected\r\n                    }\r\n\r\n                    if (element != null && data != element){\r\n                        data.isSelected = true\r\n                        element.isSelected = false\r\n                        overlaysAdapter?.notifyItemChanged(position)\r\n                        overlaysAdapter?.notifyItemChanged(list.indexOf(element))\r\n                        binding.rvSubcategories.scrollToPosition(position)\r\n                    }\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun loadOverlay(name: String, overlay: String) {\r\n\r\n        val requestOptions = RequestOptions()\r\n            .diskCacheStrategy(DiskCacheStrategy.ALL)\r\n            .signature(ObjectKey(overlay))\r\n\r\n        Glide.with(requireContext())\r\n            .load(overlay)\r\n            .addListener(object : RequestListener<Drawable> {\r\n                override fun onLoadFailed(\r\n                    e: GlideException?,\r\n                    model: Any?,\r\n                    target: Target<Drawable>?,\r\n                    isFirstResource: Boolean\r\n                ): Boolean {\r\n                    val properties = HashMap<String, Any?>()\r\n                    properties[\"name\"] = name\r\n                    properties[\"error\"] = e?.localizedMessage\r\n                    properties[\"category\"] = viewModel.categoryDetails.value?.categoryName\r\n\r\n                    requireContext().captureEvent(\r\n                        Events.OVERLAY_LOAD_FIALED,\r\n                        properties\r\n                    )\r\n\r\n                    snackbar = Snackbar.make(\r\n                        binding.root,\r\n                        \"Overlay Failed to load\",\r\n                        Snackbar.LENGTH_INDEFINITE\r\n                    )\r\n                        .setAction(\"Retry\") {\r\n                            loadOverlay(name, overlay)\r\n                        }\r\n                        .setActionTextColor(\r\n                            ContextCompat.getColor(\r\n                                requireContext(),\r\n                                R.color.primary\r\n                            )\r\n                        )\r\n\r\n                    snackbar?.show()\r\n                    return false\r\n                }\r\n\r\n                override fun onResourceReady(\r\n                    resource: Drawable?,\r\n                    model: Any?,\r\n                    target: Target<Drawable>?,\r\n                    dataSource: DataSource?,\r\n                    isFirstResource: Boolean\r\n                ): Boolean {\r\n\r\n                    if (snackbar != null)\r\n                        snackbar?.dismiss()\r\n\r\n                    val properties = HashMap<String, Any?>()\r\n                    properties[\"name\"] = name\r\n                    properties[\"category\"] = viewModel.categoryDetails.value?.categoryName\r\n\r\n                    requireContext().captureEvent(\r\n                        Events.OVERLAY_LOADED,\r\n                        properties\r\n                    )\r\n\r\n                    getPreviewDimensions(binding.imgOverlay!!)\r\n                    return false\r\n                }\r\n\r\n            })\r\n            .apply(requestOptions)\r\n            .into(binding.imgOverlay!!)\r\n\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/spyneai/shoot/ui/ecomwithoverlays/OverlayEcomFragment.kt b/app/src/main/java/com/spyneai/shoot/ui/ecomwithoverlays/OverlayEcomFragment.kt
--- a/app/src/main/java/com/spyneai/shoot/ui/ecomwithoverlays/OverlayEcomFragment.kt	
+++ b/app/src/main/java/com/spyneai/shoot/ui/ecomwithoverlays/OverlayEcomFragment.kt	
@@ -22,13 +22,14 @@
 import com.spyneai.base.OnItemClickListener
 import com.spyneai.base.network.Resource
 import com.spyneai.camera2.OverlaysResponse
-import com.spyneai.captureEvent
-import com.spyneai.captureFailureEvent
+
 import com.spyneai.dashboard.ui.handleApiError
 import com.spyneai.databinding.FragmentOverlayEcomBinding
 import com.spyneai.needs.AppConstants
 import com.spyneai.needs.Utilities
 import com.spyneai.posthog.Events
+import com.spyneai.posthog.captureEvent
+import com.spyneai.posthog.captureFailureEvent
 import com.spyneai.service.ServerSyncTypes
 import com.spyneai.shoot.adapters.OverlaysAdapter
 import com.spyneai.shoot.data.OnOverlaySelectionListener
Index: app/src/main/java/com/spyneai/shoot/ui/ecomwithoverlays/ConfirmReshootPortraitDialog.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.spyneai.shoot.ui.ecomwithoverlays\r\n\r\nimport android.graphics.Bitmap\r\nimport android.graphics.BitmapFactory\r\nimport android.graphics.Color\r\nimport android.graphics.Matrix\r\nimport android.media.ExifInterface\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.*\r\nimport androidx.core.content.ContextCompat\r\nimport com.bumptech.glide.Glide\r\nimport com.google.gson.Gson\r\nimport com.spyneai.*\r\nimport com.spyneai.base.BaseDialogFragment\r\nimport com.spyneai.base.network.Resource\r\nimport com.spyneai.dashboard.ui.enable\r\nimport com.spyneai.dashboard.ui.handleApiError\r\nimport com.spyneai.databinding.ConfirmReshootPortraitDialogBinding\r\nimport com.spyneai.needs.AppConstants\r\nimport com.spyneai.needs.Utilities\r\nimport com.spyneai.posthog.Events\r\nimport com.spyneai.service.ServerSyncTypes\r\nimport com.spyneai.shoot.data.ShootViewModel\r\nimport id.zelory.compressor.Compressor\r\nimport id.zelory.compressor.constraint.destination\r\nimport id.zelory.compressor.constraint.quality\r\nimport id.zelory.compressor.constraint.resolution\r\nimport kotlinx.coroutines.Dispatchers\r\nimport kotlinx.coroutines.GlobalScope\r\nimport kotlinx.coroutines.launch\r\nimport kotlinx.coroutines.withContext\r\nimport okhttp3.MediaType.Companion.toMediaTypeOrNull\r\nimport okhttp3.MultipartBody\r\nimport okhttp3.RequestBody\r\nimport okhttp3.RequestBody.Companion.asRequestBody\r\nimport java.io.*\r\n\r\nclass ConfirmReshootPortraitDialog :\r\n    BaseDialogFragment<ShootViewModel, ConfirmReshootPortraitDialogBinding>() {\r\n\r\n    val TAG = \"ConfirmReshootDialog\"\r\n    val outputDirectory = \"/storage/emulated/0/DCIM/Spynetemp/\"\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        requireContext().setLocale()\r\n        initView()\r\n        clickListener()\r\n    }\r\n\r\n    private fun initView() {\r\n        val uri = viewModel.shootData.value?.capturedImage\r\n        angleClassifier()\r\n        observeClassifierResp()\r\n        requireContext().loadSmartly(uri,binding.ivCapturedImage)\r\n        requireContext().loadSmartly(uri,binding.ivCaptured2)\r\n        setOverlay(binding.ivCaptured2,viewModel.getOverlay())\r\n        isCancelable = false\r\n        when (getString(R.string.app_name)) {\r\n            AppConstants.SWIGGY,\r\n            AppConstants.ZOMATO,\r\n            AppConstants.FOODPANDA-> {\r\n            binding.cvAfter.visibility = View.GONE\r\n        }\r\n            AppConstants.SPYNE_AI -> {\r\n                if (Utilities.getPreference(requireContext(), AppConstants.CATEGORY_NAME).equals(\"Food & Beverages\"))\r\n                    binding.cvAfter.visibility = View.GONE\r\n            }\r\n            else->{\r\n                binding.cvAfter.visibility = View.GONE\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun observeClassifierResp() {\r\n        viewModel.angleClassifierRes.observe(viewLifecycleOwner) {\r\n            when (it) {\r\n                        is Resource.Success -> {\r\n                            requireContext().setLocale()\r\n                            binding.tvOverlayDesc.visibility=View.VISIBLE\r\n                            binding.rlContainer.visibility = View.VISIBLE\r\n                  val dir = File(\"/storage/emulated/0/DCIM/Spyneclassifier\")\r\n                    dir.listFiles().forEach { file ->\r\n                        file.delete()\r\n                    }\r\n                    dir.delete()\r\n\r\n                    if (it.value.data.validCategory){\r\n                        binding.llCategoryCheck.visibility=View.VISIBLE\r\n                            binding.llCrop.visibility=View.VISIBLE\r\n                            binding.llCategoryCheck.setBackgroundColor(Color.parseColor(\"#40CE4E\"))\r\n                            binding.tvCategoryCheck.text =  resources.getString(R.string.valid_obj)\r\n                            binding.tvCategoryCheck.setTextColor(Color.parseColor(\"#ffffff\"))\r\n\r\n\r\n                            if (!it.value.data.crop_array.left &&\r\n                                !it.value.data.crop_array.right &&\r\n                                !it.value.data.crop_array.top &&\r\n                                !it.value.data.crop_array.bottom\r\n                            ) {\r\n                                binding.llCrop.setBackgroundColor(Color.parseColor(\"#40CE4E\"))\r\n                                binding.tvCrop.text =  resources.getString(R.string.image_not_cropped)\r\n                                binding.tvCrop.setTextColor(Color.parseColor(\"#ffffff\"))\r\n                                binding.btConfirmImage.enable(true)\r\n                                binding.tvOverlayDesc.text =\r\n                                    resources.getString(R.string.perfect_image)\r\n                                binding.btReshootImage.background =\r\n                                    ContextCompat.getDrawable(requireContext(), R.drawable.bg_skip)\r\n                                binding.btReshootImage.setTextColor(\r\n                                    ContextCompat.getColor(\r\n                                        requireContext(),\r\n                                        R.color.primary\r\n                                    )\r\n                                )\r\n\r\n                                binding.llLeftCrop.visibility = View.GONE\r\n                                binding.llRightCrop.visibility = View.GONE\r\n                                binding.llTopCrop.visibility = View.GONE\r\n                                binding.llBottomCrop.visibility = View.GONE\r\n\r\n\r\n//                                if (it.value.data.exposure != \"Med\" && it.value.data.exposure !=null)\r\n//                                    onIncorrectExposure(it.value.data.exposure)\r\n                            } else {\r\n//                                binding.ivToastCrop.visibility = View.VISIBLE\r\n                                binding.btConfirmImage.enable(false)\r\n                                binding.btReshootImage.background = ContextCompat.getDrawable(\r\n                                    requireContext(),\r\n                                    R.drawable.bg_rectangle_button_ripple\r\n                                )\r\n                                binding.btReshootImage.setTextColor(\r\n                                    ContextCompat.getColor(\r\n                                        requireContext(),\r\n                                        R.color.white\r\n                                    )\r\n                                )\r\n                                binding.tvOverlayDesc.text =\r\n                                    resources.getString(R.string.please_reshoot)\r\n                                binding.llCrop.setBackgroundColor(Color.parseColor(\"#ff4d4e\"))\r\n                                binding.tvCrop.text = resources.getString(R.string.image_cropped)\r\n                                binding.tvCrop.setTextColor(Color.parseColor(\"#ffffff\"))\r\n\r\n                                if (it.value.data.crop_array.left)\r\n                                    binding.llLeftCrop.visibility = View.VISIBLE\r\n\r\n                                if (it.value.data.crop_array.right)\r\n                                    binding.llRightCrop.visibility = View.VISIBLE\r\n\r\n                                if (it.value.data.crop_array.top)\r\n                                    binding.llTopCrop.visibility = View.VISIBLE\r\n\r\n                                if (it.value.data.crop_array.bottom)\r\n                                    binding.llBottomCrop.visibility = View.VISIBLE\r\n                            }\r\n                        }else{\r\n                            binding.llCrop.visibility=View.GONE\r\n                            onInvalidObject()\r\n\r\n                        }\r\n                }\r\n\r\n\r\n                is Resource.Failure -> {\r\n                    requireContext().setLocale()\r\n                    binding.tvOverlayDesc.visibility=View.GONE\r\n                    Utilities.hideProgressDialog()\r\n                    requireContext().captureFailureEvent(\r\n                        \"Angle Classifier Api Failed\",\r\n                        HashMap<String, Any?>().apply {\r\n                            put(\"sku_id\",viewModel.sku?.skuId)\r\n                            put(\"data\", Gson().toJson(it))\r\n                            put(\"message\",it.errorMessage)\r\n                            put(\"throwable\",it.throwable)\r\n                            put(\"code\",it.errorCode)\r\n                        },\r\n                    it.errorMessage.toString()\r\n                    )\r\n                    if (it.errorCode == 400){\r\n                        binding.tvOverlayDesc.visibility=View.VISIBLE\r\n                        binding.tvOverlayDesc.text = resources.getString(R.string.please_reshoot)\r\n                        onInvalidObject()\r\n                    }else{\r\n                        handleApiError(it) { angleClassifier() }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun angleClassifier() {\r\n       binding.rlContainer.visibility = View.GONE\r\n        if (requireContext().isInternetActive() && viewModel.categoryDetails.value?.categoryId==AppConstants.FOOD_AND_BEV_CATEGORY_ID) {\r\n            binding.tvOverlayDesc.visibility=View.VISIBLE\r\n            binding.btConfirmImage.enable(false)\r\n            val requestFile = File(viewModel.shootData.value!!.capturedImage)\r\n            var compressedImageFile: File? = null\r\n            try {\r\n                val length = requestFile.length()\r\n                val before: Long = length / 1024\r\n                GlobalScope.launch {\r\n                    withContext(Dispatchers.Default) {\r\n                        File(\"/storage/emulated/0/DCIM/Spyneclassifier/\").mkdirs()\r\n                        val outputFile = File(\r\n                            \"/storage/emulated/0/DCIM/Spyneclassifier/\" + System.currentTimeMillis()\r\n                                .toString() + \".jpg\"\r\n                        )\r\n                        outputFile.createNewFile()\r\n\r\n                        compressedImageFile = Compressor.compress(requireContext(), requestFile)\r\n                        {\r\n                            resolution(426, 240)\r\n                            quality(40)\r\n                            destination(outputFile)\r\n                        }\r\n\r\n                        val bitmap =\r\n                            modifyOrientation(\r\n                                BitmapFactory.decodeFile(compressedImageFile!!.path),\r\n                                compressedImageFile!!.path\r\n                            )\r\n\r\n                        try {\r\n                            File(outputDirectory).mkdirs()\r\n                            val outputFile = File(\r\n                                outputDirectory + System.currentTimeMillis()\r\n                                    .toString() + \".jpg\"\r\n                            )\r\n                            outputFile.createNewFile()\r\n\r\n                            val os: OutputStream = BufferedOutputStream(\r\n                                FileOutputStream(outputFile)\r\n                            )\r\n                            bitmap!!.compress(Bitmap.CompressFormat.JPEG, 100, os)\r\n                            os.close()\r\n\r\n                            val requestBody =\r\n                                outputFile!!.asRequestBody(\"image/*\".toMediaTypeOrNull())\r\n\r\n                            var filePart =\r\n                                MultipartBody.Part.createFormData(\"image_file\", outputFile!!.name, requestBody)\r\n                            val hashMap = HashMap<String,RequestBody>()\r\n                            // Need to parse in Multi-part and then call uploda an image...\r\n\r\n                            viewModel.angleClassifier(\r\n                                cropCheck = true,\r\n                                imageFile = filePart,\r\n                                requiredAngle = viewModel.desiredAngle,\r\n                                category = RequestBody.create(\"text/plain\".toMediaTypeOrNull(),\"Food\"),\r\n                                exposure = false\r\n                            )\r\n\r\n                            requireContext().captureEvent(\r\n                                Events.EXTERIOR_IMAGE_COMPRESSED,\r\n                                HashMap<String, Any?>()\r\n                                    .apply {\r\n                                        put(\"sku_id\", viewModel.shootData.value!!.sku_id)\r\n                                        put(\"requestFile\", requestFile)\r\n                                        put(\"compressedFile\", compressedImageFile)\r\n                                        put(\"angle\", viewModel.shootData.value!!.angle)\r\n                                    }\r\n                            )\r\n\r\n                        } catch (\r\n                            e: Exception\r\n                        ) {\r\n\r\n                        }\r\n\r\n                    }\r\n                }\r\n\r\n            } catch (e: Exception) {\r\n                Events.EXTERIOR_IMAGE_COMPRESSED_EXCEPTION\r\n                HashMap<String, Any?>()\r\n                    .apply {\r\n                        put(\"sku_id\", viewModel.shootData.value!!.sku_id)\r\n                        put(\"requestFile\", requestFile)\r\n                        put(\"compressedFile\", compressedImageFile)\r\n                        put(\"Exception\", e)\r\n                        put(\"angle\", viewModel.shootData.value!!.angle)\r\n                    }\r\n                e.printStackTrace()\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    @Throws(IOException::class)\r\n    fun modifyOrientation(bitmap: Bitmap, image_absolute_path: String?): Bitmap? {\r\n        val ei = ExifInterface(image_absolute_path!!)\r\n        val orientation =\r\n            ei.getAttributeInt(ExifInterface.TAG_ORIENTATION, ExifInterface.ORIENTATION_NORMAL)\r\n        return when (orientation) {\r\n            ExifInterface.ORIENTATION_UNDEFINED,\r\n            ExifInterface.ORIENTATION_NORMAL,\r\n            ExifInterface.ORIENTATION_ROTATE_90 -> rotate(bitmap, 90f)\r\n            ExifInterface.ORIENTATION_ROTATE_180 -> rotate(bitmap, 180f)\r\n            ExifInterface.ORIENTATION_ROTATE_270 -> rotate(bitmap, 270f)\r\n            ExifInterface.ORIENTATION_FLIP_HORIZONTAL -> flip(bitmap, true, false)\r\n            ExifInterface.ORIENTATION_FLIP_VERTICAL -> flip(bitmap, false, true)\r\n            else -> bitmap\r\n        }\r\n    }\r\n\r\n    fun rotate(bitmap: Bitmap, degrees: Float): Bitmap? {\r\n        val matrix = Matrix()\r\n        matrix.postRotate(degrees)\r\n        return Bitmap.createBitmap(bitmap, 0, 0, bitmap.width, bitmap.height, matrix, true)\r\n    }\r\n\r\n    fun flip(bitmap: Bitmap, horizontal: Boolean, vertical: Boolean): Bitmap? {\r\n        val matrix = Matrix()\r\n        matrix.preScale(\r\n            (if (horizontal) -1 else 1.toFloat()) as Float,\r\n            (if (vertical) -1 else 1.toFloat()) as Float\r\n        )\r\n        return Bitmap.createBitmap(bitmap, 0, 0, bitmap.width, bitmap.height, matrix, true)\r\n    }\r\n\r\n    private fun clickListener() {\r\n        binding.apply {\r\n            btReshootImage.setOnClickListener {\r\n                viewModel.isCameraButtonClickable = true\r\n                val properties = HashMap<String, Any?>()\r\n                properties.apply {\r\n                    this[\"sku_id\"] = viewModel.shootData.value?.sku_id\r\n                    this[\"project_id\"] = viewModel.shootData.value?.project_id\r\n                    this[\"image_type\"] = viewModel.shootData.value?.image_category\r\n                }\r\n                requireContext().captureEvent(\r\n                    Events.RESHOOT,\r\n                    properties\r\n                )\r\n                //remove last item from shoot list\r\n                if (!viewModel.isReclick) {\r\n                    viewModel.shootList.value?.let { list ->\r\n                        val currentElement = list.firstOrNull {\r\n                            it.overlayId == viewModel.overlayId\r\n                        }\r\n\r\n                        currentElement?.let {\r\n                            list.remove(it)\r\n                        }\r\n                    }\r\n                }\r\n                if (requireContext().isInternetActive()) {\r\n                    Log.d(\"ReshootConflictTracking\", \"Clearing Data: \")\r\n                    reSetDialogUi()\r\n                }\r\n                dismiss()\r\n            }\r\n            btConfirmImage.setOnClickListener {\r\n                viewModel.isSubCategoryConfirmed.value = true\r\n                val properties = HashMap<String, Any?>()\r\n                properties.apply {\r\n                    this[\"sku_id\"] = viewModel.shootData.value?.sku_id\r\n                    this[\"project_id\"] = viewModel.shootData.value?.project_id\r\n                    this[\"image_type\"] = viewModel.shootData.value?.image_category\r\n                    this[\"sequence\"] = viewModel.shootData.value?.sequence\r\n                }\r\n                viewModel.isCameraButtonClickable = true\r\n                if (viewModel.isReshoot) {\r\n                    uploadImages()\r\n                    if (viewModel.allReshootClicked)\r\n                        viewModel.reshootCompleted.value = true\r\n                    dismiss()\r\n                } else {\r\n                    uploadImages()\r\n                    if (viewModel.allEcomOverlyasClicked) {\r\n                        viewModel.isCameraButtonClickable = false\r\n                        if (Utilities.getPreference(\r\n                                requireContext(),\r\n                                AppConstants.CATEGORY_ID\r\n                            ) == AppConstants.FOOD_AND_BEV_CATEGORY_ID\r\n                        )\r\n                            viewModel.showFoodBackground.value = true\r\n                        else\r\n                            viewModel.stopShoot.value = true\r\n                    }\r\n\r\n                    if (requireContext().isInternetActive()) {\r\n                        Log.d(\"ReshootConflictTracking\", \"Clearing Data: \")\r\n                        reSetDialogUi()\r\n                    }\r\n\r\n                    dismiss()\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    private fun callUpdateSubcat() {\r\n        Utilities.showProgressDialog(requireContext())\r\n        viewModel.updateFootwearSubcategory()\r\n    }\r\n\r\n    private fun onImageConfirmed() {\r\n//        viewModel.isCameraButtonClickable = true\r\n//        uploadImages()\r\n//        if (viewModel.shootNumber.value == viewModel.exterirorAngles.value?.minus(1)) {\r\n//            dismiss()\r\n//            Log.d(TAG, \"onViewCreated: \"+\"checkInteriorShootStatus\")\r\n//            viewModel.stopShoot.value = true\r\n//        } else {\r\n//            viewModel.shootNumber.value = viewModel.shootNumber.value!! + 1\r\n//            dismiss()\r\n//        }\r\n    }\r\n\r\n    private fun observeupdateFootwarSubcat() {\r\n        viewModel.updateFootwearSubcatRes.observe(viewLifecycleOwner) {\r\n            when (it) {\r\n                is Resource.Success -> {\r\n                    Utilities.hideProgressDialog()\r\n                    onImageConfirmed()\r\n                }\r\n\r\n                is Resource.Failure -> {\r\n                    Utilities.hideProgressDialog()\r\n                    handleApiError(it) { callUpdateSubcat() }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun uploadImages() {\r\n        viewModel.onImageConfirmed.value = viewModel.getOnImageConfirmed()\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            viewModel.insertImage(viewModel.shootData.value!!)\r\n        }\r\n        requireContext().startUploadingService(\r\n            ConfirmReshootPortraitDialog::class.java.simpleName,\r\n            ServerSyncTypes.UPLOAD\r\n        )\r\n        //requireContext().startUploadServiceWithCheck()\r\n    }\r\n\r\n\r\n    private fun setOverlay(view: View, overlay: String) {\r\n        view.viewTreeObserver.addOnGlobalLayoutListener(object :\r\n            ViewTreeObserver.OnGlobalLayoutListener {\r\n            override fun onGlobalLayout() {\r\n                view.viewTreeObserver.removeOnGlobalLayoutListener(this)\r\n\r\n                Glide.with(requireContext())\r\n                    .load(overlay)\r\n                    .into(binding.ivCapturedOverlay)\r\n\r\n                viewModel.shootDimensions.value.let {\r\n//                    var prw = it?.previewWidth\r\n//                    var prh = it?.previewHeight\r\n//\r\n//                    var ow = it?.overlayWidth\r\n//                    var oh = it?.overlayHeight\r\n//\r\n//\r\n//                    Log.d(TAG, \"onGlobalLayout: \"+prw)\r\n//                    Log.d(TAG, \"onGlobalLayout: \"+prh)\r\n//\r\n//                    Log.d(TAG, \"onGlobalLayout: \"+ow)\r\n//                    Log.d(TAG, \"onGlobalLayout: \"+oh)\r\n//\r\n//                    Log.d(TAG, \"onGlobalLayout: \"+view.width)\r\n//                    Log.d(TAG, \"onGlobalLayout: \"+view.height)\r\n//\r\n//                    var newW =\r\n//                        ow!!.toFloat().div(prw!!.toFloat()).times(view.width)\r\n//                    var newH =\r\n//                        oh!!.toFloat().div(prh!!.toFloat()).times(view.height)\r\n//\r\n//                    var equlizerOverlayMargin = (9.5 * resources.displayMetrics.density).toInt()\r\n//\r\n//                    var params = FrameLayout.LayoutParams(newW.toInt(), newH.toInt())\r\n//                    params.gravity = Gravity.CENTER\r\n//                    params.leftMargin = equlizerOverlayMargin\r\n//                    params.rightMargin = equlizerOverlayMargin\r\n//\r\n//                    binding.ivCapturedOverlay.layoutParams = params\r\n\r\n\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    override fun onResume() {\r\n        super.onResume()\r\n        dialog?.window?.setLayout(\r\n            WindowManager.LayoutParams.MATCH_PARENT,\r\n            WindowManager.LayoutParams.WRAP_CONTENT\r\n        )\r\n    }\r\n    private fun onInvalidObject() {\r\n        requireContext().setLocale()\r\n        binding.llCategoryCheck.visibility = View.VISIBLE\r\n        binding.btConfirmImage.enable(false)\r\n        binding.tvOverlayDesc.text = resources.getString(R.string.please_reshoot)\r\n        binding.llCategoryCheck.setBackgroundColor(Color.parseColor(\"#ff4d4e\"))\r\n        binding.tvCategoryCheck.setTextColor(Color.parseColor(\"#ffffff\"))\r\n        binding.tvCategoryCheck.text =resources.getString(R.string.invalid_obj)\r\n        binding.btReshootImage.background = ContextCompat.getDrawable(\r\n            requireContext(),\r\n            R.drawable.bg_rectangle_button_ripple\r\n        )\r\n        binding.btReshootImage.setTextColor(\r\n            ContextCompat.getColor(\r\n                requireContext(),\r\n                R.color.white\r\n            )\r\n        )\r\n    }\r\n\r\n    private fun onIncorrectExposure(exposure:String) {\r\n        requireContext().setLocale()\r\n//        binding.btConfirmImage.enable(false)\r\n//        binding.tvOverlayDesc.text = resources.getString(R.string.please_reshoot)\r\n        binding.tvOverlayDesc.visibility =View.GONE\r\n        binding.llCategoryCheck.visibility = View.VISIBLE\r\n        binding.llCategoryCheck.setBackgroundColor(Color.parseColor(\"#ff4d4e\"))\r\n        binding.tvCategoryCheck.setTextColor(Color.parseColor(\"#ffffff\"))\r\n        if(exposure==\"High\"){\r\n            binding.tvCategoryCheck.text = resources.getString(R.string.dark_image)\r\n        }else{\r\n            binding.tvCategoryCheck.text = resources.getString(R.string.bright_image)\r\n        }\r\n    }\r\n\r\n\r\n\r\n    override fun getViewModel() = ShootViewModel::class.java\r\n\r\n    override fun getFragmentBinding(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?\r\n    ) = ConfirmReshootPortraitDialogBinding.inflate(inflater, container, false)\r\n\r\n\r\n    private fun reSetDialogUi() {\r\n        requireContext().setLocale()\r\n        viewModel._angleClassifierRes.value = Resource.Loading\r\n        binding.rlContainer.visibility = View.VISIBLE\r\n        binding.ivCapturedImage.visibility = View.GONE\r\n        binding.ivCaptured2.visibility = View.VISIBLE\r\n        binding.ivCapturedOverlay.visibility = View.VISIBLE\r\n        binding.btConfirmImage.enable(false)\r\n        binding.btReshootImage.background =\r\n            ContextCompat.getDrawable(requireContext(), R.drawable.bg_skip)\r\n        binding.btReshootImage.setTextColor(\r\n            ContextCompat.getColor(\r\n                requireContext(),\r\n                R.color.primary\r\n            )\r\n        )\r\n    }\r\n\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/spyneai/shoot/ui/ecomwithoverlays/ConfirmReshootPortraitDialog.kt b/app/src/main/java/com/spyneai/shoot/ui/ecomwithoverlays/ConfirmReshootPortraitDialog.kt
--- a/app/src/main/java/com/spyneai/shoot/ui/ecomwithoverlays/ConfirmReshootPortraitDialog.kt	
+++ b/app/src/main/java/com/spyneai/shoot/ui/ecomwithoverlays/ConfirmReshootPortraitDialog.kt	
@@ -20,6 +20,8 @@
 import com.spyneai.needs.AppConstants
 import com.spyneai.needs.Utilities
 import com.spyneai.posthog.Events
+import com.spyneai.posthog.captureEvent
+import com.spyneai.posthog.captureFailureEvent
 import com.spyneai.service.ServerSyncTypes
 import com.spyneai.shoot.data.ShootViewModel
 import id.zelory.compressor.Compressor
Index: app/src/main/java/com/spyneai/shoot/data/ShootViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.spyneai.shoot.data\r\n\r\nimport android.util.Log\r\nimport androidx.lifecycle.LiveData\r\nimport androidx.lifecycle.MutableLiveData\r\nimport androidx.lifecycle.ViewModel\r\nimport androidx.lifecycle.viewModelScope\r\nimport androidx.work.*\r\nimport com.google.gson.Gson\r\nimport com.spyneai.BaseApplication\r\nimport com.spyneai.R\r\nimport com.spyneai.base.network.Resource\r\nimport com.spyneai.base.room.AppDatabase\r\nimport com.spyneai.camera2.OverlaysResponse\r\nimport com.spyneai.camera2.ShootDimensions\r\nimport com.spyneai.captureEvent\r\nimport com.spyneai.dashboard.repository.model.AngleClassifierRes\r\nimport com.spyneai.dashboard.response.NewSubCatResponse\r\nimport com.spyneai.getUuid\r\nimport com.spyneai.needs.AppConstants\r\nimport com.spyneai.needs.Utilities\r\nimport com.spyneai.reshoot.data.ReshootOverlaysRes\r\nimport com.spyneai.shoot.data.model.*\r\nimport com.spyneai.shoot.response.UpdateVideoSkuRes\r\nimport com.spyneai.shoot.workmanager.OverlaysPreloadWorker\r\nimport kotlinx.coroutines.Dispatchers\r\nimport kotlinx.coroutines.GlobalScope\r\nimport kotlinx.coroutines.launch\r\nimport okhttp3.MultipartBody\r\nimport okhttp3.RequestBody\r\nimport org.json.JSONArray\r\nimport org.json.JSONObject\r\n\r\nclass ShootViewModel : ViewModel() {\r\n    var desiredAngle: Int = 0\r\n    private val TAG = \"ShootViewModel\"\r\n    private val repository = ShootRepository()\r\n    private val appDatabase = AppDatabase.getInstance(BaseApplication.getContext())\r\n    private val localRepository =\r\n        ShootLocalRepository(appDatabase.shootDao(), appDatabase.projectDao(), appDatabase.skuDao())\r\n\r\n    // private val imageRepository = ImageLocalRepository()\r\n    private val imageRepositoryV2 = ImagesRepoV2(appDatabase.imageDao())\r\n\r\n    val showHint: MutableLiveData<Boolean> = MutableLiveData()\r\n\r\n    var isCameraButtonClickable = true\r\n    var processSku: Boolean = true\r\n    var isStopCaptureClickable = false\r\n\r\n    var threeSixtyInteriorSelected = false\r\n    var onVolumeKeyPressed: MutableLiveData<Boolean> = MutableLiveData()\r\n    var fromDrafts = false\r\n    var fromVideo = false\r\n    val isSensorAvailable: MutableLiveData<Boolean> = MutableLiveData()\r\n    var showDialog = true\r\n    var miscDialogShowed = false\r\n\r\n    val enableCameraButton: MutableLiveData<Boolean> = MutableLiveData()\r\n    val showSubCat: MutableLiveData<Boolean> = MutableLiveData()\r\n\r\n    val skuNumber: MutableLiveData<Int> = MutableLiveData()\r\n    var frameAngle = \"\"\r\n\r\n    val location_data: MutableLiveData<JSONObject> = MutableLiveData()\r\n\r\n    val isSubCategorySelected: MutableLiveData<Boolean> = MutableLiveData()\r\n    val exposureTimerStart: MutableLiveData<Boolean> = MutableLiveData()\r\n\r\n    val categoryPosition: MutableLiveData<Int> = MutableLiveData()\r\n\r\n    var dafault_project: MutableLiveData<String> = MutableLiveData()\r\n    var dafault_sku: MutableLiveData<String> = MutableLiveData()\r\n\r\n    val isSubCatAngleConfirmed: MutableLiveData<Boolean> = MutableLiveData()\r\n\r\n    val startInteriorShoot: MutableLiveData<Boolean> = MutableLiveData()\r\n    val begin: MutableLiveData<Long> = MutableLiveData()\r\n    val end: MutableLiveData<Long> = MutableLiveData()\r\n\r\n    val totalSkuCaptured: MutableLiveData<String> = MutableLiveData()\r\n    val exposure: MutableLiveData<String> = MutableLiveData()\r\n    val totalImageCaptured: MutableLiveData<Int> = MutableLiveData()\r\n    val show360InteriorDialog: MutableLiveData<Boolean> = MutableLiveData()\r\n    val interior360Dialog: MutableLiveData<Boolean> = MutableLiveData()\r\n\r\n    val iniProgressFrame: MutableLiveData<Boolean> = MutableLiveData()\r\n    val subCatName: MutableLiveData<String> = MutableLiveData()\r\n\r\n    val shootList: MutableLiveData<ArrayList<ShootData>> = MutableLiveData()\r\n\r\n    private val _subCategoriesResponse: MutableLiveData<Resource<NewSubCatResponse>> =\r\n        MutableLiveData()\r\n    val subCategoriesResponse: LiveData<Resource<NewSubCatResponse>>\r\n        get() = _subCategoriesResponse\r\n\r\n\r\n    private val _updateTotalFramesRes: MutableLiveData<Resource<UpdateTotalFramesRes>> =\r\n        MutableLiveData()\r\n    val updateTotalFramesRes: LiveData<Resource<UpdateTotalFramesRes>>\r\n        get() = _updateTotalFramesRes\r\n\r\n    private var _overlaysResponse: MutableLiveData<Resource<OverlaysResponse>> = MutableLiveData()\r\n    val overlaysResponse: LiveData<Resource<OverlaysResponse>>\r\n        get() = _overlaysResponse\r\n\r\n    private val _updateVideoSkuRes: MutableLiveData<Resource<UpdateVideoSkuRes>> = MutableLiveData()\r\n    val updateVideoSkuRes: LiveData<Resource<UpdateVideoSkuRes>>\r\n        get() = _updateVideoSkuRes\r\n\r\n    private val _updateFootwearSubcatRes: MutableLiveData<Resource<UpdateFootwearSubcatRes>> =\r\n        MutableLiveData()\r\n    val updateFootwearSubcatRes: LiveData<Resource<UpdateFootwearSubcatRes>>\r\n        get() = _updateFootwearSubcatRes\r\n\r\n\r\n    val _angleClassifierRes: MutableLiveData<Resource<AngleClassifierRes>> = MutableLiveData()\r\n    val angleClassifierRes: LiveData<Resource<AngleClassifierRes>>\r\n        get() = _angleClassifierRes\r\n\r\n\r\n    val shootDimensions: MutableLiveData<ShootDimensions> = MutableLiveData()\r\n\r\n    // val sku: MutableLiveData<Sku> = MutableLiveData()\r\n    var sku: com.spyneai.shoot.repository.model.sku.Sku? = null\r\n    var project: com.spyneai.shoot.repository.model.project.Project? = null\r\n\r\n    var subCategory: MutableLiveData<NewSubCatResponse.Subcategory> = MutableLiveData()\r\n    var categoryDetails: MutableLiveData<CategoryDetails> = MutableLiveData()\r\n    val isSubCategoryConfirmed: MutableLiveData<Boolean> = MutableLiveData()\r\n    val showVin: MutableLiveData<Boolean> = MutableLiveData()\r\n    val isProjectCreated: MutableLiveData<Boolean> = MutableLiveData()\r\n    val isProjectCreatedEcom: MutableLiveData<Boolean> = MutableLiveData()\r\n    val isSkuCreated: MutableLiveData<Boolean> = MutableLiveData()\r\n    val showLeveler: MutableLiveData<Boolean> = MutableLiveData()\r\n    val showOverlay: MutableLiveData<Boolean> = MutableLiveData()\r\n    val showGrid: MutableLiveData<Boolean> = MutableLiveData()\r\n    var isHintShowen: MutableLiveData<Boolean> = MutableLiveData()\r\n\r\n    val subCategoryId: MutableLiveData<String> = MutableLiveData()\r\n    val exterirorAngles: MutableLiveData<Int> = MutableLiveData()\r\n\r\n    var currentShoot = 0\r\n    var allExteriorClicked = false\r\n    var allEcomOverlyasClicked = false\r\n    var allInteriorClicked = false\r\n    var allMisc = false\r\n    var allReshootClicked = false\r\n\r\n    val shootData: MutableLiveData<ShootData> = MutableLiveData()\r\n    val reshootCompleted: MutableLiveData<Boolean> = MutableLiveData()\r\n\r\n    val showConfirmReshootDialog: MutableLiveData<Boolean> = MutableLiveData()\r\n    val showCropDialog: MutableLiveData<Boolean> = MutableLiveData()\r\n\r\n    //interior and misc shots\r\n    val showInteriorDialog: MutableLiveData<Boolean> = MutableLiveData()\r\n    val startInteriorShots: MutableLiveData<Boolean> = MutableLiveData()\r\n    val hideLeveler: MutableLiveData<Boolean> = MutableLiveData()\r\n    val showMiscDialog: MutableLiveData<Boolean> = MutableLiveData()\r\n    val startMiscShots: MutableLiveData<Boolean> = MutableLiveData()\r\n    val selectBackground: MutableLiveData<Boolean> = MutableLiveData()\r\n    val stopShoot: MutableLiveData<Boolean> = MutableLiveData()\r\n    val showProjectDetail: MutableLiveData<Boolean> = MutableLiveData()\r\n\r\n    val imageTypeInfo: MutableLiveData<Boolean> = MutableLiveData()\r\n\r\n    val interiorAngles: MutableLiveData<Int> = MutableLiveData()\r\n    val miscAngles: MutableLiveData<Int> = MutableLiveData()\r\n\r\n    val reshootCapturedImage: MutableLiveData<Boolean> = MutableLiveData()\r\n\r\n    // val confirmCapturedImage: MutableLiveData<Boolean> = MutableLiveData()\r\n    val projectId: MutableLiveData<String> = MutableLiveData()\r\n    val showFoodBackground: MutableLiveData<Boolean> = MutableLiveData()\r\n\r\n    val addMoreAngle: MutableLiveData<Boolean> = MutableLiveData()\r\n    var isReshoot = false\r\n    var isReclick = false\r\n    var reclickSequence = 0\r\n    var reshotImageName = \"\"\r\n    var reshootSequence = 0\r\n    var updateSelectItem: MutableLiveData<Boolean> = MutableLiveData()\r\n\r\n\r\n    private val _reshootOverlaysRes: MutableLiveData<Resource<ReshootOverlaysRes>> =\r\n        MutableLiveData()\r\n    val reshootOverlaysRes: LiveData<Resource<ReshootOverlaysRes>>\r\n        get() = _reshootOverlaysRes\r\n\r\n    fun getSubCategories(\r\n        authKey: String, prodId: String\r\n    ) = viewModelScope.launch {\r\n        _subCategoriesResponse.value = Resource.Loading\r\n\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            val subcatList = localRepository.getSubcategories()\r\n\r\n            if (!subcatList.isNullOrEmpty()) {\r\n                val interiorList = localRepository.getInteriorList(prodId)\r\n                val miscList = localRepository.getMiscList(prodId)\r\n\r\n                val exteriorTags = localRepository.getExteriorTags()\r\n                val interiorTags = localRepository.getInteriorTags()\r\n                val focusTags = localRepository.getFocusTags()\r\n\r\n\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    _subCategoriesResponse.value = Resource.Success(\r\n                        NewSubCatResponse(\r\n                            data = subcatList,\r\n                            interior = interiorList,\r\n                            \"\",\r\n                            miscellaneous = miscList,\r\n                            200,\r\n                            tags = NewSubCatResponse.Tags(exteriorTags, focusTags, interiorTags)\r\n                        )\r\n                    )\r\n                }\r\n            } else {\r\n                val response = repository.getSubCategories(authKey, prodId)\r\n\r\n                if (response is Resource.Success) {\r\n                    //save response to local DB\r\n                    GlobalScope.launch(Dispatchers.IO) {\r\n                        val subcatList = response.value.data\r\n                        val interiorList =\r\n                            if (response.value.interior.isNullOrEmpty()) ArrayList() else response.value.interior\r\n                        val miscList =\r\n                            if (response.value.miscellaneous.isNullOrEmpty()) ArrayList() else response.value.miscellaneous\r\n\r\n                        val exteriorTags =\r\n                            if (response.value.tags.exteriorTags.isNullOrEmpty()) ArrayList() else response.value.tags.exteriorTags\r\n                        val interiorTags =\r\n                            if (response.value.tags.interiorTags.isNullOrEmpty()) ArrayList() else response.value.tags.interiorTags\r\n                        val focusTags =\r\n                            if (response.value.tags.focusShoot.isNullOrEmpty()) ArrayList() else response.value.tags.focusShoot\r\n\r\n                        localRepository.insertSubCategories(\r\n                            subcatList,\r\n                            interiorList,\r\n                            miscList,\r\n                            exteriorTags,\r\n                            interiorTags,\r\n                            focusTags\r\n                        )\r\n\r\n                        GlobalScope.launch(Dispatchers.Main) {\r\n                            _subCategoriesResponse.value = Resource.Success(\r\n                                NewSubCatResponse(\r\n                                    subcatList,\r\n                                    interiorList,\r\n                                    \"\",\r\n                                    miscList,\r\n                                    200,\r\n                                    response.value.tags\r\n                                )\r\n                            )\r\n                        }\r\n                    }\r\n                } else {\r\n                    GlobalScope.launch(Dispatchers.Main) {\r\n                        _subCategoriesResponse.value = response\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fun getOverlays(\r\n        authKey: String, prodId: String,\r\n        prodSubcategoryId: String, frames: String\r\n    ) = viewModelScope.launch {\r\n        _overlaysResponse.value = Resource.Loading\r\n\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            val overlaysList = localRepository.getOverlays(prodSubcategoryId, frames)\r\n\r\n            if (!overlaysList.isNullOrEmpty()) {\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    _overlaysResponse.value = Resource.Success(\r\n                        OverlaysResponse(\r\n                            overlaysList,\r\n                            \"Overlyas fetched successfully\",\r\n                            200\r\n                        )\r\n                    )\r\n                }\r\n            } else {\r\n                val response = repository.getOverlays(authKey, prodId, prodSubcategoryId, frames)\r\n\r\n                if (response is Resource.Success) {\r\n                    //insert overlays\r\n                    val overlaysList = response.value.data\r\n\r\n                    overlaysList.forEach {\r\n                        it.fetchAngle = frames.toInt()\r\n                    }\r\n\r\n                    localRepository.insertOverlays(overlaysList)\r\n\r\n                    GlobalScope.launch(Dispatchers.Main) {\r\n                        _overlaysResponse.value = response\r\n                    }\r\n                } else {\r\n                    GlobalScope.launch(Dispatchers.Main) {\r\n                        _overlaysResponse.value = response\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fun getInteriorList() = localRepository.getInteriorList(subCategory.value?.prod_cat_id!!)\r\n\r\n    fun getMiscList() = localRepository.getMiscList(subCategory.value?.prod_cat_id!!)\r\n\r\n    public val tags = HashMap<String, Any>()\r\n\r\n    suspend fun getTags(type: String): Any? {\r\n        when (type) {\r\n            \"Exterior\" -> {\r\n                val extags = tags[type]\r\n                if (extags == null) {\r\n                    val exTags = localRepository.getExteriorTags()\r\n                    tags[type] = exTags\r\n                    return tags[type]\r\n                } else {\r\n                    return extags\r\n                }\r\n            }\r\n\r\n            \"Interior\" -> {\r\n                val extags = tags[type]\r\n                if (extags == null) {\r\n                    val exTags = localRepository.getInteriorTags()\r\n                    tags[type] = exTags\r\n                    return tags[type]\r\n                } else {\r\n                    return extags\r\n                }\r\n            }\r\n            else -> {\r\n                val extags = tags[type]\r\n                if (extags == null) {\r\n                    val exTags = localRepository.getFocusTags()\r\n                    tags[type] = exTags\r\n                    return tags[type]\r\n                } else {\r\n                    return extags\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n    suspend fun preloadOverlays(overlays: List<String>) {\r\n        //check if preload worker is alive\r\n        val workManager = WorkManager.getInstance(BaseApplication.getContext())\r\n\r\n        val workQuery = WorkQuery.Builder\r\n            .fromTags(listOf(\"Preload Overlays\"))\r\n            .addStates(\r\n                listOf(\r\n                    WorkInfo.State.BLOCKED,\r\n                    WorkInfo.State.ENQUEUED,\r\n                    WorkInfo.State.RUNNING,\r\n                    WorkInfo.State.CANCELLED\r\n                )\r\n            )\r\n            .build()\r\n\r\n        val workInfos = workManager.getWorkInfos(workQuery).await()\r\n\r\n        if (workInfos.size > 0) {\r\n            // stop worker\r\n            startPreloadWorker(overlays)\r\n        } else {\r\n            startPreloadWorker(overlays)\r\n        }\r\n    }\r\n\r\n    private fun startPreloadWorker(overlays: List<String>) {\r\n        val data = Data.Builder()\r\n            .putStringArray(\"overlays\", overlays.toTypedArray())\r\n            .putInt(\"position\", 0)\r\n            .build()\r\n\r\n        val constraints: Constraints = Constraints.Builder()\r\n            .setRequiredNetworkType(NetworkType.CONNECTED)\r\n            .build()\r\n\r\n        val overlayPreloadWorkRequest =\r\n            OneTimeWorkRequest.Builder(OverlaysPreloadWorker::class.java)\r\n                .addTag(\"Preload Overlays\")\r\n                .setConstraints(constraints)\r\n                .setInputData(data)\r\n                .build()\r\n\r\n        WorkManager.getInstance(BaseApplication.getContext())\r\n            .enqueue(overlayPreloadWorkRequest)\r\n    }\r\n\r\n\r\n    fun getSelectedAngles(appName: String): Int {\r\n        return if (exterirorAngles.value == null) {\r\n            when (appName) {\r\n                AppConstants.CARS24, AppConstants.CARS24_INDIA -> 5\r\n                AppConstants.SELL_ANY_CAR -> 4\r\n                else -> 8\r\n            }\r\n        } else {\r\n            exterirorAngles.value!!\r\n        }\r\n    }\r\n\r\n    suspend fun isImageExist(skuUuid: String, overlayId: String,sequence: Int) = imageRepositoryV2.isImageExist(skuUuid, overlayId,sequence)\r\n\r\n\r\n    var isAddImage = false\r\n\r\n    suspend fun insertImage(shootData: ShootData) {\r\n\r\n        BaseApplication.getContext().captureEvent(\r\n            \"Insert Image call\",\r\n            HashMap<String,Any?>().apply {\r\n                put(\"sku_uuid\",shootData.sku_id)\r\n                put(\"sku_id\",sku?.skuId)\r\n                put(\"data\", Gson().toJson(shootData))\r\n                put(\"current_shoot\",currentShoot)\r\n                put(\"overlay_id\",overlayId)\r\n            }\r\n        )\r\n\r\n        val name = if (shootData.image_category == \"360int\")\r\n            sku?.skuName?.uppercase() + \"_\" + sku?.uuid + \"_360int_1.JPG\"\r\n        else {\r\n            if (shootData.name.contains(\".\")) shootData.name else shootData.name + \".\" + shootData.capturedImage.substringAfter(\r\n                \".\"\r\n            )\r\n        }\r\n\r\n        var image : com.spyneai.shoot.repository.model.image.Image? = null\r\n\r\n        sku?.uuid?.let {\r\n            image = isImageExist(it, shootData.overlayId.toString(),shootData.sequence)\r\n        }\r\n\r\n        if (image == null) {\r\n            val newImage = com.spyneai.shoot.repository.model.image.Image(\r\n                uuid = getUuid(),\r\n                projectUuid = project?.uuid,\r\n                projectId = project?.projectId,\r\n                skuUuid = sku?.uuid,\r\n                skuId = sku?.skuId,\r\n                image_category = shootData.image_category,\r\n                skuName = sku?.skuName,\r\n                name = name,\r\n                sequence = shootData.sequence,\r\n                overlayId = shootData.overlayId.toString(),\r\n                isReclick = isReclick,\r\n                isReshoot = isReshoot,\r\n                path = shootData.capturedImage,\r\n                angle = shootData.angle,\r\n                tags = shootData.meta,\r\n                debugData = shootData.debugData,\r\n                isExtraImage = isAddImage\r\n            )\r\n\r\n            localRepository.insertImage(\r\n                newImage\r\n            )\r\n\r\n            BaseApplication.getContext().captureEvent(\r\n                \"Image Inserted\",\r\n                HashMap<String,Any?>().apply {\r\n                    put(\"sku_id\",shootData.sku_id)\r\n                    put(\"data\",Gson().toJson(shootData))\r\n                    put(\"current_shoot\",currentShoot)\r\n                    put(\"overlay_id\",overlayId)\r\n                }\r\n            )\r\n        } else {\r\n            image?.let { nonNulImage ->\r\n                nonNulImage.path = shootData.capturedImage\r\n                nonNulImage.toProcessAT = System.currentTimeMillis()\r\n                nonNulImage.isUploaded = false\r\n                nonNulImage.isMarkedDone = false\r\n                nonNulImage.isReclick = isReclick\r\n                nonNulImage.isReshoot = isReshoot\r\n                nonNulImage.preSignedUrl = AppConstants.DEFAULT_PRESIGNED_URL\r\n\r\n                imageRepositoryV2.updateImage(nonNulImage)\r\n\r\n                BaseApplication.getContext().captureEvent(\r\n                    \"Image Updated\",\r\n                    HashMap<String,Any?>().apply {\r\n                        put(\"sku_id\",shootData.sku_id)\r\n                        put(\"data\",Gson().toJson(shootData))\r\n                        put(\"current_shoot\",currentShoot)\r\n                        put(\"overlay_id\",overlayId)\r\n                    }\r\n                )\r\n            }\r\n        }\r\n\r\n        isReclick = false\r\n    }\r\n\r\n\r\n    fun updateVideoSku(\r\n        skuId: String,\r\n        prodSubCatId: String,\r\n        initialImageCount: Int\r\n    ) = viewModelScope.launch {\r\n        _updateVideoSkuRes.value = Resource.Loading\r\n        _updateVideoSkuRes.value = repository.updateVideoSku(skuId, prodSubCatId, initialImageCount)\r\n    }\r\n\r\n    suspend fun insertSku() {\r\n        localRepository.insertSku(sku!!, project!!)\r\n    }\r\n\r\n\r\n    suspend fun insertProject(): Long {\r\n        project?.entityId = Utilities.getPreference(BaseApplication.getContext(),AppConstants.ENTITY_ID)\r\n        return localRepository.insertProject(project!!)\r\n    }\r\n\r\n    suspend fun updateSubcategory() {\r\n        sku?.isSelectAble = true\r\n        localRepository.updateSubcategory(project!!, sku!!)\r\n    }\r\n\r\n\r\n    fun getImagesbySkuId(skuId: String) = imageRepositoryV2.getImagesBySkuId(skuId)\r\n\r\n    fun getImagesById(skuId: String,overlayId: String) = imageRepositoryV2.getImageForComment(skuId,overlayId)\r\n\r\n    fun updateProjectStatus() = localRepository.updateProjectToOngoing(project?.uuid!!)\r\n\r\n\r\n    fun updateFootwearSubcategory(\r\n    ) = viewModelScope.launch {\r\n        _updateFootwearSubcatRes.value = Resource.Loading\r\n        _updateFootwearSubcatRes.value = repository.updateFootwearSubcategory(\r\n            Utilities.getPreference(BaseApplication.getContext(), AppConstants.AUTH_KEY).toString(),\r\n            sku?.skuId!!,\r\n            exterirorAngles.value!!,\r\n            subCategory.value?.prod_sub_cat_id!!\r\n        )\r\n    }\r\n\r\n    fun updateVideoSkuLocally() {\r\n        localRepository.updateVideoSkuLocally(sku!!)\r\n    }\r\n\r\n\r\n    fun getFileName(\r\n        interiorSize: Int?,\r\n        miscSize: Int?,\r\n    ): String {\r\n        return if (isReshoot) {\r\n            reshotImageName\r\n        } else {\r\n            val filePrefix = FileNameManager().getFileName(\r\n                if (categoryDetails.value?.imageType == \"Misc\") \"Focus Shoot\" else categoryDetails.value?.imageType!!,\r\n                currentShoot,\r\n                shootList.value,\r\n                interiorSize,\r\n                miscSize\r\n            )\r\n\r\n            sku?.skuName?.uppercase() + \"_\" + sku?.uuid + \"_\" + filePrefix\r\n        }\r\n    }\r\n\r\n    fun getSequenceNumber(exteriorSize: Int, interiorSize: Int, miscSize: Int): Int {\r\n        return if (isReshoot)\r\n            reshootSequence\r\n        else SequeneNumberManager().getSequenceNumber(\r\n            fromDrafts,\r\n            if (categoryDetails.value?.imageType == \"Misc\") \"Focus Shoot\" else categoryDetails.value?.imageType!!,\r\n            currentShoot,\r\n            shootList.value?.size!!,\r\n            exteriorSize,\r\n            interiorSize,\r\n            miscSize\r\n        )\r\n    }\r\n\r\n    fun getOnImageConfirmed(): Boolean {\r\n        return if (onImageConfirmed.value == null) true\r\n        else !onImageConfirmed.value!!\r\n    }\r\n\r\n    fun getOverlay(): String {\r\n        return displayThumbanil\r\n//        val overlayRes = (overlaysResponse.value as Resource.Success).value\r\n//        return overlayRes.data[overlayRes.data.indexOf(selectedOverlay)].display_thumbnail\r\n    }\r\n\r\n    fun getName(): String {\r\n//        val overlayRes = (overlaysResponse.value as Resource.Success).value\r\n//        return overlayRes.data[overlayRes.data.indexOf(selectedOverlay)].display_name\r\n        return displayName\r\n    }\r\n\r\n\r\n    var displayName = \"\"\r\n    var displayThumbanil = \"\"\r\n\r\n    //var sequence = 0\r\n    var overlayId = 0\r\n\r\n    // var selectedOverlay : OverlaysResponse.Data? = null\r\n    val getSubCategories = MutableLiveData<Boolean>()\r\n    var isSubcategoriesSelectionShown = false\r\n    val selectAngles = MutableLiveData<Boolean>()\r\n\r\n    val onImageConfirmed = MutableLiveData<Boolean>()\r\n\r\n    fun getCurrentShoot() = shootList.value?.firstOrNull() {\r\n        it.overlayId == overlayId\r\n    }\r\n\r\n    fun checkMiscShootStatus(appName: String) {\r\n        val response = (subCategoriesResponse.value as Resource.Success).value\r\n\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            val MiscList = getMiscList()\r\n\r\n            if (!MiscList.isNullOrEmpty()) {\r\n                response.miscellaneous = MiscList\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    showMiscDialog.value = true\r\n                }\r\n                return@launch\r\n            }\r\n\r\n            GlobalScope.launch(Dispatchers.Main) {\r\n                selectBackground(appName)\r\n            }\r\n        }\r\n    }\r\n\r\n    fun selectBackground(appName: String) {\r\n        if (appName == AppConstants.OLA_CABS || appName == \"Moladin Agent\" || appName == \"Caricarz\")\r\n            if (isAddImage)\r\n                selectBackground.value = true\r\n            else\r\n                show360InteriorDialog.value = true\r\n        else\r\n            selectBackground.value = true\r\n    }\r\n\r\n    fun skipImage(appName: String) {\r\n        when (categoryDetails.value?.imageType) {\r\n            \"Interior\" -> {\r\n                if (isAddImage)\r\n                    selectBackground(appName)\r\n                else\r\n                    checkMiscShootStatus(appName)\r\n\r\n            }\r\n\r\n            \"Focus Shoot\" -> {\r\n                selectBackground(appName)\r\n            }\r\n        }\r\n    }\r\n\r\n    val notifyItemChanged = MutableLiveData<Int>()\r\n    val scrollView = MutableLiveData<Int>()\r\n\r\n    fun setSelectedItem(thumbnails: List<Any>) {\r\n        if (getCurrentShoot() == null) {\r\n            Log.d(TAG, \"setSelectedItem: \" + overlayId)\r\n        } else {\r\n            when (categoryDetails.value?.imageType) {\r\n                \"Exterior\", \"Footwear\", \"Ecom\",\"Food\" -> {\r\n                    val list = thumbnails as List<OverlaysResponse.Overlays>\r\n\r\n                    val position = currentShoot\r\n\r\n                    list[position].isSelected = false\r\n                    list[position].imageClicked = true\r\n                    list[position].imagePath = getCurrentShoot()!!.capturedImage\r\n\r\n                    notifyItemChanged.value = position\r\n\r\n                    if (position != list.size.minus(1)) {\r\n                        var foundNext = false\r\n\r\n                        for (i in position..list.size.minus(1)) {\r\n                            val s = \"\"\r\n                            if (!list[i].isSelected && !list[i].imageClicked) {\r\n                                foundNext = true\r\n                                list[i].isSelected = true\r\n                                currentShoot = i\r\n\r\n                                notifyItemChanged.value = i\r\n                                scrollView.value = i\r\n                                break\r\n                            }\r\n                        }\r\n\r\n                        if (!foundNext) {\r\n                            val element = list.firstOrNull {\r\n                                !it.isSelected && !it.imageClicked\r\n                            }\r\n\r\n                            if (element != null) {\r\n                                element?.isSelected = true\r\n                                notifyItemChanged.value = list.indexOf(element)\r\n                                scrollView.value = element?.sequenceNumber!!\r\n                            }\r\n                        }\r\n                    } else {\r\n                        val element = list.firstOrNull {\r\n                            !it.isSelected && !it.imageClicked\r\n                        }\r\n\r\n                        if (element != null) {\r\n                            element?.isSelected = true\r\n                            notifyItemChanged.value = list.indexOf(element)\r\n                            scrollView.value = element?.sequenceNumber!!\r\n                        }\r\n                    }\r\n                }\r\n\r\n                \"Interior\" -> {\r\n                    val list = thumbnails as List<NewSubCatResponse.Interior>\r\n\r\n                    val position = currentShoot\r\n\r\n                    list[position].isSelected = false\r\n                    list[position].imageClicked = true\r\n                    list[position].imagePath = getCurrentShoot()!!.capturedImage\r\n\r\n                    notifyItemChanged.value = position\r\n\r\n                    if (position != list.size.minus(1)) {\r\n                        var foundNext = false\r\n\r\n                        for (i in position..list.size.minus(1)) {\r\n                            if (!list[i].isSelected && !list[i].imageClicked) {\r\n                                foundNext = true\r\n                                list[i].isSelected = true\r\n                                notifyItemChanged.value = i\r\n                                scrollView.value = i\r\n                                break\r\n                            }\r\n                        }\r\n\r\n                        if (!foundNext) {\r\n                            val element = list.firstOrNull {\r\n                                !it.isSelected && !it.imageClicked\r\n                            }\r\n\r\n                            if (element != null) {\r\n                                element?.isSelected = true\r\n                                notifyItemChanged.value = list.indexOf(element)\r\n                                scrollView.value = element?.sequenceNumber!!\r\n                            }\r\n                        }\r\n                    } else {\r\n                        val element = list.firstOrNull {\r\n                            !it.isSelected && !it.imageClicked\r\n                        }\r\n\r\n                        if (element != null) {\r\n                            element?.isSelected = true\r\n                            notifyItemChanged.value = list.indexOf(element)\r\n                            scrollView.value = element?.sequenceNumber!!\r\n                        }\r\n                    }\r\n                }\r\n\r\n                \"Focus Shoot\" -> {\r\n                    val list = thumbnails as List<NewSubCatResponse.Miscellaneous>\r\n\r\n                    val position = currentShoot\r\n\r\n                    list[position].isSelected = false\r\n                    list[position].imageClicked = true\r\n                    list[position].imagePath = getCurrentShoot()!!.capturedImage\r\n\r\n                    notifyItemChanged.value = position\r\n\r\n                    if (position != list.size.minus(1)) {\r\n                        var foundNext = false\r\n\r\n                        for (i in position..list.size.minus(1)) {\r\n                            if (!list[i].isSelected && !list[i].imageClicked) {\r\n                                foundNext = true\r\n                                list[i].isSelected = true\r\n                                notifyItemChanged.value = i\r\n                                scrollView.value = i\r\n                                break\r\n                            }\r\n                        }\r\n\r\n                        if (!foundNext) {\r\n                            val element = list.firstOrNull {\r\n                                !it.isSelected && !it.imageClicked\r\n                            }\r\n\r\n                            if (element != null) {\r\n                                element?.isSelected = true\r\n                                notifyItemChanged.value = list.indexOf(element)\r\n                                scrollView.value = element?.sequenceNumber!!\r\n                            }\r\n                        }\r\n                    } else {\r\n                        val element = list.firstOrNull {\r\n                            !it.isSelected && !it.imageClicked\r\n                        }\r\n\r\n                        if (element != null) {\r\n                            element?.isSelected = true\r\n                            notifyItemChanged.value = list.indexOf(element)\r\n                            scrollView.value = element?.sequenceNumber!!\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    fun getOverlayIds(\r\n        ids: JSONArray\r\n    ) = viewModelScope.launch {\r\n        _reshootOverlaysRes.value = Resource.Loading\r\n        _reshootOverlaysRes.value = repository.getOverlayIds(ids)\r\n    }\r\n\r\n    suspend fun updateSkuExteriorAngles() {\r\n        localRepository.updateSkuExteriorAngles(sku!!)\r\n    }\r\n\r\n    fun updateSkuExteriorAngles(skuId: String, angles: Int, subcatId: String) {\r\n        UpdateExteriorAngles(skuId, angles, subcatId).update()\r\n        // localRepository.updateSkuExteriorAngles(skuId, angles)\r\n    }\r\n\r\n    fun getCameraSetting(): CameraSettings {\r\n        return if (Utilities.getPreference(\r\n                BaseApplication.getContext(),\r\n                AppConstants.ENTERPRISE_ID\r\n            ) == AppConstants.KARVI_ENTERPRISE_ID\r\n        ) {\r\n            if ((startInteriorShots.value == true || startMiscShots.value == true) || isAddImage)\r\n                CameraSettings().apply {\r\n                    isGryroActive = false\r\n                    isOverlayActive = false\r\n                    isGridActive = Utilities.getBool(\r\n                        BaseApplication.getContext(),\r\n                        categoryDetails.value?.categoryId + AppConstants.SETTING_STATUS_GRID,\r\n                        true\r\n                    )\r\n                }\r\n            else\r\n                CameraSettings().apply {\r\n                    isGryroActive = Utilities.getBool(\r\n                        BaseApplication.getContext(),\r\n                        categoryDetails.value?.categoryId + AppConstants.SETTING_STATUS_GYRO, true\r\n                    )\r\n                    isOverlayActive = Utilities.getBool(\r\n                        BaseApplication.getContext(),\r\n                        categoryDetails.value?.categoryId + AppConstants.SETTING_STATUS_OVERLAY,\r\n                        false\r\n                    )\r\n                    isGridActive = Utilities.getBool(\r\n                        BaseApplication.getContext(),\r\n                        categoryDetails.value?.categoryId + AppConstants.SETTING_STATUS_GRID, true\r\n                    )\r\n                }\r\n        } else {\r\n            if (startInteriorShots.value == true) {\r\n                CameraSettings().apply {\r\n                    isGridActive = Utilities.getBool(\r\n                        BaseApplication.getContext(),\r\n                        categoryDetails.value?.categoryId + AppConstants.SETTING_STATUS_GRID, true\r\n                    )\r\n                    isGryroActive = false\r\n                    isOverlayActive =\r\n                        if (Utilities.getPreference(\r\n                                BaseApplication.getContext(),\r\n                                AppConstants.ENTERPRISE_ID\r\n                            ) == AppConstants.ZOOMCAR_ENTERPRISE_ID\r\n                        )\r\n                            Utilities.getBool(\r\n                                BaseApplication.getContext(),\r\n                                categoryDetails.value?.categoryId + AppConstants.SETTING_STATUS_OVERLAY,\r\n                                true\r\n                            )\r\n                        else false\r\n                }\r\n\r\n            } else {\r\n                if (startMiscShots.value == true) {\r\n                    CameraSettings().apply {\r\n                        isGryroActive = false\r\n                        isOverlayActive = false\r\n                        isGridActive = Utilities.getBool(\r\n                            BaseApplication.getContext(),\r\n                            categoryDetails.value?.categoryId + AppConstants.SETTING_STATUS_GRID,\r\n                            true\r\n                        )\r\n                    }\r\n\r\n                } else {\r\n                    CameraSettings().apply {\r\n                        isGryroActive = Utilities.getBool(\r\n                            BaseApplication.getContext(),\r\n                            categoryDetails.value?.categoryId + AppConstants.SETTING_STATUS_GYRO,\r\n                            true\r\n                        )\r\n                        isOverlayActive = Utilities.getBool(\r\n                            BaseApplication.getContext(),\r\n                            categoryDetails.value?.categoryId + AppConstants.SETTING_STATUS_OVERLAY,\r\n                            true\r\n                        )\r\n                        isGridActive = Utilities.getBool(\r\n                            BaseApplication.getContext(),\r\n                            categoryDetails.value?.categoryId + AppConstants.SETTING_STATUS_GRID,\r\n                            true\r\n                        )\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    suspend fun setProjectAndSkuData(projectUuid: String, skuUuid: String) {\r\n        project = getProject(projectUuid)\r\n        sku = localRepository.getSkuById(skuUuid)\r\n    }\r\n\r\n    suspend fun getProject(projectUuid: String) = localRepository.getProject(projectUuid)\r\n\r\n    fun checkInteriorShootStatus() {\r\n        val response = (subCategoriesResponse.value as Resource.Success).value\r\n\r\n        GlobalScope.launch(Dispatchers.IO) {\r\n            val interiorList = getInteriorList()\r\n\r\n            if (!interiorList.isNullOrEmpty()) {\r\n                response.interior = interiorList\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    showInteriorDialog.value = true\r\n                }\r\n                return@launch\r\n            }\r\n\r\n            val MiscList = getMiscList()\r\n\r\n            if (!MiscList.isNullOrEmpty()) {\r\n                response.miscellaneous = MiscList\r\n                GlobalScope.launch(Dispatchers.Main) {\r\n                    showMiscDialog.value = true\r\n                }\r\n                return@launch\r\n            }\r\n\r\n            GlobalScope.launch(Dispatchers.Main) {\r\n                selectBackground(BaseApplication.getContext().getString(R.string.app_name))\r\n            }\r\n        }\r\n    }\r\n\r\n    suspend fun updateTotalFrames() =\r\n        localRepository.updateSkuTotalFrames(sku?.uuid!!, sku?.imagesCount!!)\r\n\r\n    suspend fun updateBackground(backgroundId: Int, bgName: String = \"\") =\r\n        localRepository.updateBackground(HashMap<String, Any>()\r\n            .apply {\r\n                put(\"project_uuid\", sku!!.projectUuid!!)\r\n                put(\"sku_uuid\", sku!!.uuid!!)\r\n                put(\"bg_id\", backgroundId)\r\n                put(\"bg_name\", bgName!!)\r\n                put(\"total_frames\", getTotalFrames())\r\n            })\r\n\r\n    private fun getTotalFrames(): Int {\r\n        return if (fromVideo) sku?.threeSixtyFrames?.plus(sku?.imagesCount!!)!! else sku?.imagesCount!!\r\n    }\r\n\r\n    fun getProjectSkus() = localRepository.getSkusByProjectId(project?.uuid!!)\r\n\r\n    var gifDialogShown = false\r\n    var createProjectDialogShown = false\r\n\r\n    init {\r\n        if (showVin.value == null) {\r\n            Log.d(TAG, \": showvin null\")\r\n            showHint.value = true\r\n        }\r\n\r\n        if (showVin.value != null && isProjectCreated.value == null)\r\n            showVin.value = true\r\n\r\n        if (isProjectCreated.value == true)\r\n            getSubCategories.value = true\r\n\r\n    }\r\n\r\n\r\n    fun angleClassifier(\r\n        imageFile: MultipartBody.Part,\r\n        requiredAngle: Int,\r\n        cropCheck: Boolean,\r\n        category: RequestBody,\r\n        exposure: Boolean\r\n    ) = viewModelScope.launch {\r\n        _angleClassifierRes.value = Resource.Loading\r\n        _angleClassifierRes.value = repository.angleClassifier(imageFile, requiredAngle, cropCheck,category,exposure)\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/spyneai/shoot/data/ShootViewModel.kt b/app/src/main/java/com/spyneai/shoot/data/ShootViewModel.kt
--- a/app/src/main/java/com/spyneai/shoot/data/ShootViewModel.kt	
+++ b/app/src/main/java/com/spyneai/shoot/data/ShootViewModel.kt	
@@ -13,12 +13,13 @@
 import com.spyneai.base.room.AppDatabase
 import com.spyneai.camera2.OverlaysResponse
 import com.spyneai.camera2.ShootDimensions
-import com.spyneai.captureEvent
+
 import com.spyneai.dashboard.repository.model.AngleClassifierRes
 import com.spyneai.dashboard.response.NewSubCatResponse
 import com.spyneai.getUuid
 import com.spyneai.needs.AppConstants
 import com.spyneai.needs.Utilities
+import com.spyneai.posthog.captureEvent
 import com.spyneai.reshoot.data.ReshootOverlaysRes
 import com.spyneai.shoot.data.model.*
 import com.spyneai.shoot.response.UpdateVideoSkuRes
Index: app/src/swiggyinstamart/java/com/spyneai/dashboard/ui/HomeDashboardFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.spyneai.dashboard.ui\r\n\r\n\r\nimport android.app.Dialog\r\nimport android.content.Intent\r\nimport android.graphics.Color\r\nimport android.graphics.drawable.ColorDrawable\r\nimport android.os.Bundle\r\nimport android.os.Handler\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.view.Window\r\nimport android.widget.LinearLayout\r\nimport android.widget.TextView\r\nimport android.widget.Toast\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.core.content.ContextCompat\r\nimport androidx.lifecycle.Observer\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.google.android.material.tabs.TabLayout\r\nimport com.google.android.play.core.appupdate.AppUpdateManager\r\nimport com.google.android.play.core.appupdate.AppUpdateManagerFactory\r\nimport com.google.android.play.core.install.model.AppUpdateType\r\nimport com.google.android.play.core.install.model.UpdateAvailability\r\nimport com.google.android.play.core.ktx.startUpdateFlowForResult\r\nimport com.posthog.android.Properties\r\nimport com.spyneai.R\r\nimport com.spyneai.activity.CategoriesActivity\r\nimport com.spyneai.activity.CompletedProjectsActivity\r\nimport com.spyneai.activity.OngoingOrdersActivity\r\nimport com.spyneai.adapter.CategoriesDashboardAdapter\r\nimport com.spyneai.base.BaseFragment\r\nimport com.spyneai.base.network.Resource\r\nimport com.spyneai.captureEvent\r\nimport com.spyneai.captureFailureEvent\r\nimport com.spyneai.dashboard.adapters.CompletedDashboardAdapter\r\nimport com.spyneai.dashboard.adapters.OngoingDashboardAdapter\r\nimport com.spyneai.dashboard.data.DashboardViewModel\r\nimport com.spyneai.dashboard.data.model.LayoutHolder\r\nimport com.spyneai.dashboard.response.NewCategoriesResponse\r\nimport com.spyneai.databinding.HomeDashboardFragmentBinding\r\nimport com.spyneai.needs.AppConstants\r\nimport com.spyneai.needs.Utilities\r\nimport com.spyneai.orders.data.response.GetProjectsResponse\r\nimport com.spyneai.posthog.Events\r\nimport com.spyneai.shoot.ui.base.ShootPortraitActivity\r\nimport com.spyneai.shoot.utils.log\r\n\r\n\r\nclass HomeDashboardFragment :\r\n    BaseFragment<DashboardViewModel, HomeDashboardFragmentBinding>() {\r\n\r\n    lateinit var btnlistener: CategoriesDashboardAdapter.BtnClickListener\r\n\r\n    lateinit var categoriesAdapter: CategoriesDashboardAdapter\r\n\r\n    lateinit var ongoingDashboardAdapter: OngoingDashboardAdapter\r\n\r\n    lateinit var completedDashboardAdapter: CompletedDashboardAdapter\r\n    lateinit var completedProjectList: ArrayList<GetProjectsResponse.Project_data>\r\n    lateinit var ongoingProjectList: ArrayList<GetProjectsResponse.Project_data>\r\n\r\n    lateinit var handler: Handler\r\n    private var runnable: Runnable? = null\r\n\r\n\r\n    var categoryPosition: Int = 0\r\n    lateinit var tokenId: String\r\n    lateinit var email: String\r\n\r\n    lateinit var catId: String\r\n    lateinit var displayName: String\r\n    lateinit var displayThumbnail: String\r\n    lateinit var description: String\r\n    lateinit var colorCode: String\r\n    private var refreshData = true\r\n    private lateinit var tabLayout: TabLayout\r\n\r\n    lateinit var appUpdateManager: AppUpdateManager\r\n    private val MY_REQUEST_CODE: Int = 1\r\n    lateinit var PACKAGE_NAME: String\r\n\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        handler = Handler()\r\n\r\n        tokenId = Utilities.getPreference(requireContext(), AppConstants.TOKEN_ID).toString()\r\n        email = Utilities.getPreference(requireContext(), AppConstants.EMAIL_ID).toString()\r\n\r\n        PACKAGE_NAME = requireContext().getPackageName().toString()\r\n        appUpdateManager = AppUpdateManagerFactory.create(requireContext())\r\n\r\n\r\n//        if (PACKAGE_NAME.equals(\"com.spyneai.swiggyinstamart.debug\")) {\r\n//            newUserCreditDialog()\r\n            repeatRefreshData()\r\n            setSliderRecycler()\r\n            lisners()\r\n            welcomeHomeText()\r\n            getCategories()\r\n//        } else\r\n//            autoUpdates()\r\n    }\r\n\r\n    private fun autoUpdates() {\r\n\r\n        val appUpdateInfoTask = appUpdateManager.appUpdateInfo\r\n        appUpdateInfoTask.addOnSuccessListener { appUpdateInfo ->\r\n            if (appUpdateInfo.updateAvailability() == UpdateAvailability.UPDATE_AVAILABLE\r\n                && appUpdateInfo.isUpdateTypeAllowed(AppUpdateType.IMMEDIATE)\r\n            ) {\r\n\r\n                // Request the update.\r\n                appUpdateManager.startUpdateFlowForResult(\r\n                    // Pass the intent that is returned by 'getAppUpdateInfo()'.\r\n                    appUpdateInfo,\r\n                    // Or 'AppUpdateType.FLEXIBLE' for flexible updates.\r\n                    AppUpdateType.IMMEDIATE,\r\n                    // The current activity making the update request.\r\n                    this,\r\n                    // Include a request code to later monitor this update request.\r\n                    MY_REQUEST_CODE\r\n                )\r\n            } else {\r\n\r\n                newUserCreditDialog()\r\n                repeatRefreshData()\r\n                setSliderRecycler()\r\n                lisners()\r\n                welcomeHomeText()\r\n                getCategories()\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun getOngoingOrders() {\r\n        log(\"Completed SKUs(auth key): \"+ Utilities.getPreference(requireContext(), AppConstants.AUTH_KEY))\r\n\r\n        viewModel.getProjects(Utilities.getPreference(requireContext(), AppConstants.AUTH_KEY).toString(), \"ongoing\")\r\n\r\n        viewModel.getProjectsResponse.observe(\r\n            viewLifecycleOwner, Observer {\r\n                when (it) {\r\n                    is Resource.Success -> {\r\n                        binding.rvOngoingShoots.visibility = View.VISIBLE\r\n                        binding.shimmerOngoing.stopShimmer()\r\n                        binding.shimmerOngoing.visibility = View.GONE\r\n                        if (it.value.data.project_data.isNullOrEmpty()) {\r\n                            binding.rlOngoingShoots.visibility = View.GONE\r\n                            refreshData = false\r\n                        }\r\n\r\n                        if (it.value.data != null) {\r\n                            ongoingProjectList = ArrayList()\r\n                            ongoingProjectList.clear()\r\n                            ongoingProjectList.addAll(it.value.data.project_data)\r\n                            ongoingDashboardAdapter = OngoingDashboardAdapter(\r\n                                requireContext(),\r\n                                ongoingProjectList\r\n                            )\r\n\r\n                            val layoutManager: RecyclerView.LayoutManager = LinearLayoutManager(\r\n                                requireContext(),\r\n                                LinearLayoutManager.HORIZONTAL,\r\n                                false\r\n                            )\r\n                            binding.rvOngoingShoots.setLayoutManager(layoutManager)\r\n                            binding.rvOngoingShoots.setAdapter(ongoingDashboardAdapter)\r\n\r\n                        }\r\n                    }\r\n                    is Resource.Loading -> {\r\n                        binding.shimmerOngoing.startShimmer()\r\n                    }\r\n                    is Resource.Failure -> {\r\n                        binding.shimmerOngoing.stopShimmer()\r\n                        binding.shimmerOngoing.visibility = View.GONE\r\n\r\n                        if (it.errorCode == 404) {\r\n                            binding.rlOngoingShoots.visibility = View.GONE\r\n                            refreshData = false\r\n                        } else {\r\n                            requireContext().captureFailureEvent(\r\n                                Events.GET_ONGOING_ORDERS_FAILED, HashMap<String,Any?>(),\r\n                                it.errorMessage!!\r\n                            )\r\n                            handleApiError(it)\r\n                        }\r\n                    }\r\n\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    private fun newUserCreditDialog() {\r\n        if (viewModel.isNewUser.value == true) {\r\n            showFreeCreditDialog(viewModel.creditsMessage.value.toString())\r\n            viewModel.isNewUser.value = false\r\n        }\r\n    }\r\n\r\n    private fun getCompletedOrders() {\r\n\r\n        viewModel.getCompletedProjects(Utilities.getPreference(requireContext(), AppConstants.AUTH_KEY).toString(), \"completed\")\r\n\r\n        log(\"Completed SKUs(auth key): \"+ Utilities.getPreference(requireContext(), AppConstants.AUTH_KEY))\r\n        viewModel.getCompletedProjectsResponse.observe(\r\n            viewLifecycleOwner, Observer {\r\n                when (it) {\r\n                    is Resource.Success -> {\r\n\r\n                        requireContext().captureEvent(Events.GET_COMPLETED_ORDERS, HashMap<String,Any?>())\r\n                        completedProjectList = ArrayList()\r\n                        if (it.value.data.project_data.isNullOrEmpty()) {\r\n                            binding.rlCompletedShoots.visibility = View.GONE\r\n                            refreshData = false\r\n                        }\r\n\r\n                        binding.rvCompletedShoots.visibility = View.VISIBLE\r\n                        binding.shimmerCompleted.stopShimmer()\r\n                        binding.shimmerCompleted.visibility = View.GONE\r\n                        if (it.value.data != null) {\r\n                            completedProjectList.clear()\r\n                            completedProjectList.addAll(it.value.data.project_data)\r\n\r\n                            completedDashboardAdapter = CompletedDashboardAdapter(\r\n                                requireContext(),\r\n                                completedProjectList\r\n                            )\r\n\r\n                            val layoutManager: RecyclerView.LayoutManager = LinearLayoutManager(\r\n                                requireContext(),\r\n                                LinearLayoutManager.HORIZONTAL,\r\n                                false\r\n                            )\r\n                            binding.rvCompletedShoots.setLayoutManager(layoutManager)\r\n                            binding.rvCompletedShoots.setAdapter(completedDashboardAdapter)\r\n                        }\r\n\r\n                    }\r\n                    is Resource.Loading -> {\r\n                        binding.shimmerCompleted.startShimmer()\r\n                    }\r\n                    is Resource.Failure -> {\r\n                        binding.shimmerCompleted.stopShimmer()\r\n                        binding.shimmerCompleted.visibility = View.GONE\r\n\r\n                        if (it.errorCode == 404) {\r\n                            binding.rlCompletedShoots.visibility = View.GONE\r\n                            refreshData = false\r\n                        } else {\r\n                            requireContext().captureFailureEvent(\r\n                                Events.GET_COMPLETED_ORDERS_FAILED, HashMap<String,Any?>(),\r\n                                it.errorMessage!!\r\n                            )\r\n                            handleApiError(it)\r\n                        }\r\n                    }\r\n\r\n                }\r\n            }\r\n        )\r\n\r\n    }\r\n\r\n    private fun getCategories() {\r\n        viewModel.getCategories(\r\n            Utilities.getPreference(requireContext(), AppConstants.AUTH_KEY).toString()\r\n        )\r\n        viewModel.categoriesResponse.observe(viewLifecycleOwner, Observer {\r\n            when (it) {\r\n                is Resource.Success -> {\r\n                    requireContext().captureEvent(Events.GOT_CATEGORIES, HashMap<String,Any?>())\r\n\r\n                    binding.shimmerCategories.stopShimmer()\r\n                    binding.shimmerCategories.visibility = View.GONE\r\n                    binding.rvDashboardCategories.visibility = View.VISIBLE\r\n\r\n                    categoriesAdapter = CategoriesDashboardAdapter(requireContext(),\r\n                        it.value.data as ArrayList<NewCategoriesResponse.Data>,\r\n                        object : CategoriesDashboardAdapter.BtnClickListener {\r\n                            override fun onBtnClick(position: Int) {\r\n\r\n\r\n                                LayoutHolder.data = it.value.data\r\n                                LayoutHolder.categoryPosition = position\r\n\r\n                                Utilities.savePrefrence(requireContext(), AppConstants.CATEGORY_ID, it.value.data[position].prod_cat_id)\r\n                                Utilities.savePrefrence(requireContext(), AppConstants.CATEGORY_NAME, it.value.data[position].prod_cat_name)\r\n\r\n                                catId = it.value.data[position].prod_cat_id\r\n                                displayName = it.value.data[position].prod_cat_name\r\n                                displayThumbnail = it.value.data[position].display_thumbnail\r\n                                description = it.value.data[position].description\r\n                                colorCode = it.value.data[position].color_code\r\n\r\n                                when(position){\r\n//                                    0 -> {\r\n//                                        val intent = Intent(requireContext(), StartShootActivity::class.java)\r\n//                                        intent.putExtra(\r\n//                                            AppConstants.CATEGORY_NAME,\r\n//                                            displayName\r\n//                                        )\r\n//                                        intent.putExtra(\r\n//                                            AppConstants.CATEGORY_ID,\r\n//                                            catId\r\n//                                        )\r\n//                                        intent.putExtra(\r\n//                                            AppConstants.IMAGE_URL,\r\n//                                            displayThumbnail\r\n//                                        )\r\n//                                        intent.putExtra(\r\n//                                            AppConstants.DESCRIPTION,\r\n//                                            description\r\n//                                        )\r\n//                                        intent.putExtra(AppConstants.COLOR, colorCode)\r\n//                                        startActivity(intent)\r\n//                                    }\r\n//                                    1 -> {\r\n//                                        val intent = Intent(requireContext(), ShootActivity::class.java)\r\n//                                        intent.putExtra(\r\n//                                            AppConstants.CATEGORY_NAME,\r\n//                                            displayName\r\n//                                        )\r\n//                                        intent.putExtra(\r\n//                                            AppConstants.CATEGORY_ID,\r\n//                                            catId\r\n//                                        )\r\n//                                        intent.putExtra(\r\n//                                            AppConstants.IMAGE_URL,\r\n//                                            displayThumbnail\r\n//                                        )\r\n//                                        intent.putExtra(\r\n//                                            AppConstants.DESCRIPTION,\r\n//                                            description\r\n//                                        )\r\n//                                        intent.putExtra(AppConstants.COLOR, colorCode)\r\n//                                        startActivity(intent)\r\n//                                    }\r\n\r\n                                    0, 1 -> {\r\n                                        val intent = Intent(requireContext(), ShootPortraitActivity::class.java)\r\n                                        intent.putExtra(\r\n                                            AppConstants.CATEGORY_NAME,\r\n                                            displayName\r\n                                        )\r\n                                        intent.putExtra(\r\n                                            AppConstants.CATEGORY_ID,\r\n                                            catId\r\n                                        )\r\n                                        intent.putExtra(\r\n                                            AppConstants.IMAGE_URL,\r\n                                            displayThumbnail\r\n                                        )\r\n                                        intent.putExtra(\r\n                                            AppConstants.DESCRIPTION,\r\n                                            description\r\n                                        )\r\n                                        intent.putExtra(AppConstants.COLOR, colorCode)\r\n                                        startActivity(intent)\r\n                                    }\r\n                                    else -> {\r\n                                        Toast.makeText(\r\n                                            requireContext(),\r\n                                            \"Coming Soon !\",\r\n                                            Toast.LENGTH_SHORT\r\n                                        ).show()\r\n                                    }\r\n                                }\r\n\r\n                            }\r\n\r\n                        })\r\n                    val layoutManager: RecyclerView.LayoutManager = LinearLayoutManager(\r\n                        requireContext(),\r\n                        LinearLayoutManager.HORIZONTAL,\r\n                        false\r\n                    )\r\n                    binding.rvDashboardCategories.setLayoutManager(layoutManager)\r\n                    binding.rvDashboardCategories.setAdapter(categoriesAdapter)\r\n//                    categoriesAdapter.notifyDataSetChanged()\r\n                }\r\n                is Resource.Loading -> {\r\n                    binding.shimmerCategories.startShimmer()\r\n                }\r\n                is Resource.Failure -> {\r\n                    requireContext().captureFailureEvent(\r\n                        Events.GET_CATEGORIES_FAILED, HashMap<String,Any?>(),\r\n                        it.errorMessage!!\r\n                    )\r\n                    handleApiError(it)\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    private fun welcomeHomeText() {\r\n        if (Utilities.getPreference(requireContext(), AppConstants.USER_NAME).toString() != \"\") {\r\n            binding.tvWelcomeHome.visibility = View.VISIBLE\r\n            binding.viewWelcome.visibility = View.VISIBLE\r\n            binding.tvWelcomeHome.setText(\r\n                \"Welcome \" +\r\n                        Utilities.getPreference(requireContext(), AppConstants.USER_NAME).toString()\r\n            )\r\n            if (Utilities.getPreference(requireContext(), AppConstants.USER_NAME).toString().trim()\r\n                    .equals(\"default\")\r\n            ) {\r\n                binding.tvWelcomeHome.visibility = View.VISIBLE\r\n                binding.viewWelcome.visibility = View.VISIBLE\r\n                binding.tvWelcomeHome.setText(\"Welcome Home\")\r\n            }\r\n        }\r\n    }\r\n\r\n    fun repeatRefreshData(){\r\n        try {\r\n            getOngoingOrders()\r\n            getCompletedOrders()\r\n            runnable = Runnable {\r\n                if (refreshData)\r\n                    repeatRefreshData()  }\r\n            if (runnable != null)\r\n                handler.postDelayed(runnable!!,15000)\r\n        }catch (e : IllegalArgumentException){\r\n            e.printStackTrace()\r\n        }catch (e : Exception){\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n\r\n    override fun onPause() {\r\n        if (runnable != null)\r\n            handler.removeCallbacks(runnable!!)\r\n        super.onPause()\r\n    }\r\n\r\n\r\n\r\n\r\n    private fun setSliderRecycler() {\r\n\r\n        binding.ivBanner.setSliderThumb(\r\n            ContextCompat.getDrawable(\r\n                requireContext(),\r\n                R.drawable.ic_sliderline\r\n            )\r\n        )\r\n\r\n        tabLayout = binding.tbDashboard\r\n        tabLayout.addTab(tabLayout.newTab());\r\n        tabLayout.addTab(tabLayout.newTab());\r\n\r\n\r\n        binding.ivBanner.setBeforeImage(\r\n            ContextCompat.getDrawable(\r\n                requireContext(),\r\n                R.drawable.footwear_before\r\n            )\r\n        ).setAfterImage(ContextCompat.getDrawable(requireContext(), R.drawable.footwear_after))\r\n        binding.ivNext.setOnClickListener {\r\n            val tab: TabLayout.Tab = binding.tbDashboard.getTabAt(1)!!\r\n            tab.select()\r\n            binding.ivBanner.setBeforeImage(\r\n                ContextCompat.getDrawable(\r\n                    requireContext(),\r\n                    R.drawable.car_before\r\n                )\r\n            ).setAfterImage(ContextCompat.getDrawable(requireContext(), R.drawable.car_after))\r\n        }\r\n\r\n        binding.ivPrevious.setOnClickListener {\r\n            val tab: TabLayout.Tab = binding.tbDashboard.getTabAt(0)!!\r\n            tab.select()\r\n            binding.ivBanner.setBeforeImage(\r\n                ContextCompat.getDrawable(\r\n                    requireContext(),\r\n                    R.drawable.footwear_before\r\n                )\r\n            ).setAfterImage(ContextCompat.getDrawable(requireContext(), R.drawable.footwear_after))\r\n        }\r\n\r\n        tabLayout.addOnTabSelectedListener(object : TabLayout.OnTabSelectedListener {\r\n            override fun onTabSelected(tab: TabLayout.Tab?) {\r\n                if (tab?.position == 0)\r\n                    binding.ivBanner.setBeforeImage(\r\n                        ContextCompat.getDrawable(\r\n                            requireContext(),\r\n                            R.drawable.footwear_before\r\n                        )\r\n                    ).setAfterImage(\r\n                        ContextCompat.getDrawable(\r\n                            requireContext(),\r\n                            R.drawable.footwear_after\r\n                        )\r\n                    )\r\n                else\r\n                    binding.ivBanner.setBeforeImage(\r\n                        ContextCompat.getDrawable(\r\n                            requireContext(),\r\n                            R.drawable.car_before\r\n                        )\r\n                    ).setAfterImage(\r\n                        ContextCompat.getDrawable(\r\n                            requireContext(),\r\n                            R.drawable.car_after\r\n                        )\r\n                    )\r\n            }\r\n\r\n            override fun onTabUnselected(tab: TabLayout.Tab?) {\r\n            }\r\n\r\n            override fun onTabReselected(tab: TabLayout.Tab?) {\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n    private fun showFreeCreditDialog(message: String) {\r\n        val dialog = Dialog(requireContext())\r\n        dialog.requestWindowFeature(Window.FEATURE_NO_TITLE)\r\n        dialog.setCancelable(true)\r\n\r\n        var dialogView =\r\n            LayoutInflater.from(requireContext()).inflate(R.layout.free_credit_dialog, null)\r\n        var tvMessage: TextView = dialogView.findViewById(R.id.tvSkuNameDialog)\r\n        tvMessage.text = message\r\n\r\n        dialog.setContentView(dialogView)\r\n\r\n        dialog.getWindow()?.setBackgroundDrawable(ColorDrawable(Color.TRANSPARENT));\r\n        val llOk: LinearLayout = dialog.findViewById(R.id.llOk)\r\n\r\n\r\n        llOk.setOnClickListener(View.OnClickListener {\r\n\r\n            dialog.dismiss()\r\n\r\n        })\r\n        dialog.show()\r\n\r\n    }\r\n\r\n    private fun lisners() {\r\n        binding.tvCompletedViewall.setOnClickListener {\r\n            val intent = Intent(requireContext(), CompletedProjectsActivity::class.java)\r\n            startActivity(intent)\r\n        }\r\n\r\n        binding.tvOngoingViewall.setOnClickListener {\r\n            val intent = Intent(requireContext(), OngoingOrdersActivity::class.java)\r\n            startActivity(intent)\r\n        }\r\n        binding.btGetStarted.setOnClickListener {\r\n            val intent = Intent(requireContext(), CategoriesActivity::class.java)\r\n            startActivity(intent)\r\n        }\r\n    }\r\n\r\n\r\n\r\n    override fun onResume() {\r\n        super.onResume()\r\n\r\n        appUpdateManager\r\n            .appUpdateInfo\r\n            .addOnSuccessListener { appUpdateInfo ->\r\n                if (appUpdateInfo.updateAvailability()\r\n                    == UpdateAvailability.DEVELOPER_TRIGGERED_UPDATE_IN_PROGRESS\r\n                ) {\r\n                    // If an in-app update is already running, resume the update.\r\n                    appUpdateManager.startUpdateFlowForResult(\r\n                        appUpdateInfo,\r\n                        AppUpdateType.IMMEDIATE,\r\n                        this,\r\n                        MY_REQUEST_CODE\r\n                    )\r\n                }\r\n            }\r\n    }\r\n\r\n    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\r\n        super.onActivityResult(requestCode, resultCode, data)\r\n        if (requestCode == MY_REQUEST_CODE) {\r\n            if (resultCode != AppCompatActivity.RESULT_OK) {\r\n                activity?.moveTaskToBack(true)\r\n                activity?.finish()\r\n                Toast.makeText(\r\n                    requireContext(),\r\n                    \"Update flow failed!\" + requestCode,\r\n                    Toast.LENGTH_SHORT\r\n                ).show()\r\n\r\n                log(\"MY_APP\\\", \\\"Update flow failed! Result code: \"+resultCode)\r\n                // If the update is cancelled or fails,\r\n                // you can request to start the update again.\r\n            }\r\n        }\r\n    }\r\n\r\n    override fun getViewModel() = DashboardViewModel::class.java\r\n\r\n    override fun getFragmentBinding(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?\r\n    ) = HomeDashboardFragmentBinding.inflate(inflater, container, false)\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/swiggyinstamart/java/com/spyneai/dashboard/ui/HomeDashboardFragment.kt b/app/src/swiggyinstamart/java/com/spyneai/dashboard/ui/HomeDashboardFragment.kt
--- a/app/src/swiggyinstamart/java/com/spyneai/dashboard/ui/HomeDashboardFragment.kt	
+++ b/app/src/swiggyinstamart/java/com/spyneai/dashboard/ui/HomeDashboardFragment.kt	
@@ -33,8 +33,7 @@
 import com.spyneai.adapter.CategoriesDashboardAdapter
 import com.spyneai.base.BaseFragment
 import com.spyneai.base.network.Resource
-import com.spyneai.captureEvent
-import com.spyneai.captureFailureEvent
+
 import com.spyneai.dashboard.adapters.CompletedDashboardAdapter
 import com.spyneai.dashboard.adapters.OngoingDashboardAdapter
 import com.spyneai.dashboard.data.DashboardViewModel
Index: app/src/udaan/java/com/spyneai/dashboard/ui/HomeDashboardFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.spyneai.dashboard.ui\r\n\r\n\r\nimport android.app.Dialog\r\nimport android.content.Intent\r\nimport android.graphics.Color\r\nimport android.graphics.drawable.ColorDrawable\r\nimport android.os.Bundle\r\nimport android.os.Handler\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.view.Window\r\nimport android.widget.LinearLayout\r\nimport android.widget.TextView\r\nimport android.widget.Toast\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.core.content.ContextCompat\r\nimport androidx.lifecycle.Observer\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.google.android.material.tabs.TabLayout\r\nimport com.google.android.play.core.appupdate.AppUpdateManager\r\nimport com.google.android.play.core.appupdate.AppUpdateManagerFactory\r\nimport com.google.android.play.core.install.model.AppUpdateType\r\nimport com.google.android.play.core.install.model.UpdateAvailability\r\nimport com.google.android.play.core.ktx.startUpdateFlowForResult\r\nimport com.posthog.android.Properties\r\nimport com.spyneai.R\r\nimport com.spyneai.activity.CategoriesActivity\r\nimport com.spyneai.activity.CompletedProjectsActivity\r\nimport com.spyneai.activity.OngoingOrdersActivity\r\nimport com.spyneai.adapter.CategoriesDashboardAdapter\r\nimport com.spyneai.base.BaseFragment\r\nimport com.spyneai.base.network.Resource\r\nimport com.spyneai.captureEvent\r\nimport com.spyneai.captureFailureEvent\r\nimport com.spyneai.dashboard.adapters.CompletedDashboardAdapter\r\nimport com.spyneai.dashboard.adapters.OngoingDashboardAdapter\r\nimport com.spyneai.dashboard.adapters.TutorialVideosAdapter\r\nimport com.spyneai.dashboard.data.DashboardViewModel\r\nimport com.spyneai.dashboard.response.NewCategoriesResponse\r\nimport com.spyneai.databinding.HomeDashboardFragmentBinding\r\nimport com.spyneai.needs.AppConstants\r\nimport com.spyneai.needs.Utilities\r\nimport com.spyneai.orders.data.response.GetProjectsResponse\r\nimport com.spyneai.posthog.Events\r\nimport com.spyneai.shoot.ui.base.ShootActivity\r\nimport com.spyneai.shoot.ui.StartShootActivity\r\nimport com.spyneai.shoot.ui.base.ShootPortraitActivity\r\nimport com.spyneai.shoot.utils.log\r\n\r\n\r\nclass HomeDashboardFragment :\r\n    BaseFragment<DashboardViewModel, HomeDashboardFragmentBinding>() {\r\n\r\n    lateinit var btnlistener: CategoriesDashboardAdapter.BtnClickListener\r\n\r\n    lateinit var categoriesAdapter: CategoriesDashboardAdapter\r\n\r\n    lateinit var ongoingDashboardAdapter: OngoingDashboardAdapter\r\n\r\n    lateinit var completedDashboardAdapter: CompletedDashboardAdapter\r\n    lateinit var completedProjectList: ArrayList<GetProjectsResponse.Project_data>\r\n    lateinit var ongoingProjectList: ArrayList<GetProjectsResponse.Project_data>\r\n\r\n    lateinit var handler: Handler\r\n    private var runnable: Runnable? = null\r\n\r\n    lateinit var tutorialVideosAdapter: TutorialVideosAdapter\r\n\r\n    var categoryPosition: Int = 0\r\n    lateinit var tokenId: String\r\n    lateinit var email: String\r\n\r\n    lateinit var catId: String\r\n    lateinit var displayName: String\r\n    lateinit var displayThumbnail: String\r\n    lateinit var description: String\r\n    lateinit var colorCode: String\r\n    private var refreshData = true\r\n    private lateinit var tabLayout: TabLayout\r\n\r\n    lateinit var appUpdateManager: AppUpdateManager\r\n    private val MY_REQUEST_CODE: Int = 1\r\n    lateinit var PACKAGE_NAME: String\r\n\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        handler = Handler()\r\n\r\n        tokenId = Utilities.getPreference(requireContext(), AppConstants.TOKEN_ID).toString()\r\n        email = Utilities.getPreference(requireContext(), AppConstants.EMAIL_ID).toString()\r\n\r\n        PACKAGE_NAME = requireContext().getPackageName().toString()\r\n        appUpdateManager = AppUpdateManagerFactory.create(requireContext())\r\n\r\n        welcomeHomeText()\r\n        getCategories()\r\n        newUserCreditDialog()\r\n        repeatRefreshData()\r\n        setSliderRecycler()\r\n        lisners()\r\n\r\n\r\n\r\n//        if (PACKAGE_NAME.equals(\"com.spyneai.udaan\") || PACKAGE_NAME.equals(\"com.spyneai.udaan.debug\")) {\r\n//\r\n//        } else\r\n//            autoUpdates()\r\n    }\r\n\r\n    private fun autoUpdates() {\r\n\r\n        val appUpdateInfoTask = appUpdateManager.appUpdateInfo\r\n        appUpdateInfoTask.addOnSuccessListener { appUpdateInfo ->\r\n            if (appUpdateInfo.updateAvailability() == UpdateAvailability.UPDATE_AVAILABLE\r\n                && appUpdateInfo.isUpdateTypeAllowed(AppUpdateType.IMMEDIATE)\r\n            ) {\r\n\r\n                // Request the update.\r\n                appUpdateManager.startUpdateFlowForResult(\r\n                    // Pass the intent that is returned by 'getAppUpdateInfo()'.\r\n                    appUpdateInfo,\r\n                    // Or 'AppUpdateType.FLEXIBLE' for flexible updates.\r\n                    AppUpdateType.IMMEDIATE,\r\n                    // The current activity making the update request.\r\n                    this,\r\n                    // Include a request code to later monitor this update request.\r\n                    MY_REQUEST_CODE\r\n                )\r\n            } else {\r\n\r\n                newUserCreditDialog()\r\n                repeatRefreshData()\r\n                setSliderRecycler()\r\n                lisners()\r\n                welcomeHomeText()\r\n                getCategories()\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun getOngoingOrders() {\r\n        log(\"Completed SKUs(auth key): \"+ Utilities.getPreference(requireContext(), AppConstants.AUTH_KEY))\r\n\r\n        viewModel.getProjects(Utilities.getPreference(requireContext(), AppConstants.AUTH_KEY).toString(), \"ongoing\")\r\n\r\n        viewModel.getProjectsResponse.observe(\r\n            viewLifecycleOwner, Observer {\r\n                when (it) {\r\n                    is Resource.Success -> {\r\n                        binding.rvOngoingShoots.visibility = View.VISIBLE\r\n                        binding.shimmerOngoing.stopShimmer()\r\n                        binding.shimmerOngoing.visibility = View.GONE\r\n                        if (it.value.data.project_data.isNullOrEmpty()) {\r\n                            binding.rlOngoingShoots.visibility = View.GONE\r\n                            refreshData = false\r\n                        }\r\n\r\n                        if (it.value.data != null) {\r\n                            ongoingProjectList = ArrayList()\r\n                            ongoingProjectList.clear()\r\n                            ongoingProjectList.addAll(it.value.data.project_data)\r\n                            ongoingDashboardAdapter = OngoingDashboardAdapter(\r\n                                requireContext(),\r\n                                ongoingProjectList\r\n                            )\r\n\r\n                            val layoutManager: RecyclerView.LayoutManager = LinearLayoutManager(\r\n                                requireContext(),\r\n                                LinearLayoutManager.HORIZONTAL,\r\n                                false\r\n                            )\r\n                            binding.rvOngoingShoots.setLayoutManager(layoutManager)\r\n                            binding.rvOngoingShoots.setAdapter(ongoingDashboardAdapter)\r\n\r\n                        }\r\n                    }\r\n                    is Resource.Loading -> {\r\n                        binding.shimmerOngoing.startShimmer()\r\n                    }\r\n                    is Resource.Failure -> {\r\n                        binding.shimmerOngoing.stopShimmer()\r\n                        binding.shimmerOngoing.visibility = View.GONE\r\n\r\n                        if (it.errorCode == 404) {\r\n                            binding.rlOngoingShoots.visibility = View.GONE\r\n                            refreshData = false\r\n                        } else {\r\n                            requireContext().captureFailureEvent(\r\n                                Events.GET_ONGOING_ORDERS_FAILED, HashMap<String,Any?>(),\r\n                                it.errorMessage!!\r\n                            )\r\n                            handleApiError(it)\r\n                        }\r\n                    }\r\n\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    private fun newUserCreditDialog() {\r\n        if (viewModel.isNewUser.value == true) {\r\n            showFreeCreditDialog(viewModel.creditsMessage.value.toString())\r\n            viewModel.isNewUser.value = false\r\n        }\r\n    }\r\n\r\n    private fun getCompletedOrders() {\r\n\r\n        viewModel.getCompletedProjects(Utilities.getPreference(requireContext(), AppConstants.AUTH_KEY).toString(), \"completed\")\r\n\r\n        log(\"Completed SKUs(auth key): \"+ Utilities.getPreference(requireContext(), AppConstants.AUTH_KEY))\r\n        viewModel.getCompletedProjectsResponse.observe(\r\n            viewLifecycleOwner, Observer {\r\n                when (it) {\r\n                    is Resource.Success -> {\r\n\r\n                        requireContext().captureEvent(Events.GET_COMPLETED_ORDERS, HashMap<String,Any?>())\r\n                        completedProjectList = ArrayList()\r\n                        if (it.value.data.project_data.isNullOrEmpty()) {\r\n                            binding.rlCompletedShoots.visibility = View.GONE\r\n                            refreshData = false\r\n                        }\r\n\r\n                        binding.rvCompletedShoots.visibility = View.VISIBLE\r\n                        binding.shimmerCompleted.stopShimmer()\r\n                        binding.shimmerCompleted.visibility = View.GONE\r\n                        if (it.value.data != null) {\r\n                            completedProjectList.clear()\r\n                            completedProjectList.addAll(it.value.data.project_data)\r\n\r\n                            completedDashboardAdapter = CompletedDashboardAdapter(\r\n                                requireContext(),\r\n                                completedProjectList\r\n                            )\r\n\r\n                            val layoutManager: RecyclerView.LayoutManager = LinearLayoutManager(\r\n                                requireContext(),\r\n                                LinearLayoutManager.HORIZONTAL,\r\n                                false\r\n                            )\r\n                            binding.rvCompletedShoots.setLayoutManager(layoutManager)\r\n                            binding.rvCompletedShoots.setAdapter(completedDashboardAdapter)\r\n                        }\r\n\r\n                    }\r\n                    is Resource.Loading -> {\r\n                        binding.shimmerCompleted.startShimmer()\r\n                    }\r\n                    is Resource.Failure -> {\r\n                        binding.shimmerCompleted.stopShimmer()\r\n                        binding.shimmerCompleted.visibility = View.GONE\r\n\r\n                        if (it.errorCode == 404) {\r\n                            binding.rlCompletedShoots.visibility = View.GONE\r\n                            refreshData = false\r\n                        } else {\r\n                            requireContext().captureFailureEvent(\r\n                                Events.GET_COMPLETED_ORDERS_FAILED, HashMap<String,Any?>(),\r\n                                it.errorMessage!!\r\n                            )\r\n                            handleApiError(it)\r\n                        }\r\n                    }\r\n\r\n                }\r\n            }\r\n        )\r\n\r\n    }\r\n\r\n    private fun getCategories() {\r\n        viewModel.getCategories(\r\n            Utilities.getPreference(requireContext(), AppConstants.AUTH_KEY).toString()\r\n        )\r\n        viewModel.categoriesResponse.observe(viewLifecycleOwner, Observer {\r\n            when (it) {\r\n                is Resource.Success -> {\r\n                    requireContext().captureEvent(Events.GOT_CATEGORIES, HashMap<String,Any?>())\r\n\r\n                    binding.shimmerCategories.stopShimmer()\r\n                    binding.shimmerCategories.visibility = View.GONE\r\n                    binding.rvDashboardCategories.visibility = View.VISIBLE\r\n\r\n                    categoriesAdapter = CategoriesDashboardAdapter(requireContext(),\r\n                        it.value.data as ArrayList<NewCategoriesResponse.Data>,\r\n                        object : CategoriesDashboardAdapter.BtnClickListener {\r\n                            override fun onBtnClick(position: Int) {\r\n\r\n                                Utilities.savePrefrence(requireContext(), AppConstants.CATEGORY_ID, it.value.data[position].prod_cat_id)\r\n                                Utilities.savePrefrence(requireContext(), AppConstants.CATEGORY_NAME, it.value.data[position].prod_cat_name)\r\n\r\n                                catId = it.value.data[position].prod_cat_id\r\n                                displayName = it.value.data[position].prod_cat_name\r\n                                displayThumbnail = it.value.data[position].display_thumbnail\r\n                                description = it.value.data[position].description\r\n                                colorCode = it.value.data[position].color_code\r\n\r\n                                when(position){\r\n//                                    0 -> {\r\n//                                        val intent = Intent(requireContext(), StartShootActivity::class.java)\r\n//                                        intent.putExtra(\r\n//                                            AppConstants.CATEGORY_NAME,\r\n//                                            displayName\r\n//                                        )\r\n//                                        intent.putExtra(\r\n//                                            AppConstants.CATEGORY_ID,\r\n//                                            catId\r\n//                                        )\r\n//                                        intent.putExtra(\r\n//                                            AppConstants.IMAGE_URL,\r\n//                                            displayThumbnail\r\n//                                        )\r\n//                                        intent.putExtra(\r\n//                                            AppConstants.DESCRIPTION,\r\n//                                            description\r\n//                                        )\r\n//                                        intent.putExtra(AppConstants.COLOR, colorCode)\r\n//                                        startActivity(intent)\r\n//                                    }\r\n//                                    1 -> {\r\n//                                        val intent = Intent(requireContext(), ShootActivity::class.java)\r\n//                                        intent.putExtra(\r\n//                                            AppConstants.CATEGORY_NAME,\r\n//                                            displayName\r\n//                                        )\r\n//                                        intent.putExtra(\r\n//                                            AppConstants.CATEGORY_ID,\r\n//                                            catId\r\n//                                        )\r\n//                                        intent.putExtra(\r\n//                                            AppConstants.IMAGE_URL,\r\n//                                            displayThumbnail\r\n//                                        )\r\n//                                        intent.putExtra(\r\n//                                            AppConstants.DESCRIPTION,\r\n//                                            description\r\n//                                        )\r\n//                                        intent.putExtra(AppConstants.COLOR, colorCode)\r\n//                                        startActivity(intent)\r\n//                                    }\r\n\r\n                                    0, 1 -> {\r\n                                        val intent = Intent(requireContext(), ShootPortraitActivity::class.java)\r\n                                        intent.putExtra(\r\n                                            AppConstants.CATEGORY_NAME,\r\n                                            displayName\r\n                                        )\r\n                                        intent.putExtra(\r\n                                            AppConstants.CATEGORY_ID,\r\n                                            catId\r\n                                        )\r\n                                        intent.putExtra(\r\n                                            AppConstants.IMAGE_URL,\r\n                                            displayThumbnail\r\n                                        )\r\n                                        intent.putExtra(\r\n                                            AppConstants.DESCRIPTION,\r\n                                            description\r\n                                        )\r\n                                        intent.putExtra(AppConstants.COLOR, colorCode)\r\n                                        startActivity(intent)\r\n                                    }\r\n                                    else -> {\r\n                                        Toast.makeText(\r\n                                            requireContext(),\r\n                                            \"Coming Soon !\",\r\n                                            Toast.LENGTH_SHORT\r\n                                        ).show()\r\n                                    }\r\n                                }\r\n\r\n                            }\r\n\r\n                        })\r\n                    val layoutManager: RecyclerView.LayoutManager = LinearLayoutManager(\r\n                        requireContext(),\r\n                        LinearLayoutManager.HORIZONTAL,\r\n                        false\r\n                    )\r\n                    binding.rvDashboardCategories.setLayoutManager(layoutManager)\r\n                    binding.rvDashboardCategories.setAdapter(categoriesAdapter)\r\n//                    categoriesAdapter.notifyDataSetChanged()\r\n                }\r\n                is Resource.Loading -> {\r\n                    binding.shimmerCategories.startShimmer()\r\n                }\r\n                is Resource.Failure -> {\r\n                    requireContext().captureFailureEvent(\r\n                        Events.GET_CATEGORIES_FAILED, HashMap<String,Any?>(),\r\n                        it.errorMessage!!\r\n                    )\r\n                    handleApiError(it)\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    private fun welcomeHomeText() {\r\n        if (Utilities.getPreference(requireContext(), AppConstants.USER_NAME).toString() != \"\") {\r\n            binding.tvWelcomeHome.visibility = View.VISIBLE\r\n            binding.viewWelcome.visibility = View.VISIBLE\r\n            binding.tvWelcomeHome.setText(\r\n                \"Welcome \" +\r\n                        Utilities.getPreference(requireContext(), AppConstants.USER_NAME).toString()\r\n            )\r\n            if (Utilities.getPreference(requireContext(), AppConstants.USER_NAME).toString().trim()\r\n                    .equals(\"default\")\r\n            ) {\r\n                binding.tvWelcomeHome.visibility = View.VISIBLE\r\n                binding.viewWelcome.visibility = View.VISIBLE\r\n                binding.tvWelcomeHome.setText(\"Welcome Home\")\r\n            }\r\n        }\r\n    }\r\n\r\n    fun repeatRefreshData(){\r\n        try {\r\n            getOngoingOrders()\r\n            getCompletedOrders()\r\n            runnable = Runnable {\r\n                if (refreshData)\r\n                    repeatRefreshData()  }\r\n            if (runnable != null)\r\n                handler.postDelayed(runnable!!,10000)\r\n        }catch (e : IllegalArgumentException){\r\n            e.printStackTrace()\r\n        }catch (e : Exception){\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n\r\n    override fun onPause() {\r\n        if (runnable != null)\r\n            handler.removeCallbacks(runnable!!)\r\n        super.onPause()\r\n    }\r\n\r\n\r\n\r\n\r\n    private fun setSliderRecycler() {\r\n\r\n        binding.ivBanner.setSliderThumb(\r\n            ContextCompat.getDrawable(\r\n                requireContext(),\r\n                R.drawable.ic_sliderline\r\n            )\r\n        )\r\n\r\n        tabLayout = binding.tbDashboard\r\n        tabLayout.addTab(tabLayout.newTab());\r\n        tabLayout.addTab(tabLayout.newTab());\r\n\r\n\r\n        binding.ivBanner.setBeforeImage(\r\n            ContextCompat.getDrawable(\r\n                requireContext(),\r\n                R.drawable.footwear_before\r\n            )\r\n        ).setAfterImage(ContextCompat.getDrawable(requireContext(), R.drawable.footwear_after))\r\n        binding.ivNext.setOnClickListener {\r\n            val tab: TabLayout.Tab = binding.tbDashboard.getTabAt(1)!!\r\n            tab.select()\r\n            binding.ivBanner.setBeforeImage(\r\n                ContextCompat.getDrawable(\r\n                    requireContext(),\r\n                    R.drawable.car_before\r\n                )\r\n            ).setAfterImage(ContextCompat.getDrawable(requireContext(), R.drawable.car_after))\r\n        }\r\n\r\n        binding.ivPrevious.setOnClickListener {\r\n            val tab: TabLayout.Tab = binding.tbDashboard.getTabAt(0)!!\r\n            tab.select()\r\n            binding.ivBanner.setBeforeImage(\r\n                ContextCompat.getDrawable(\r\n                    requireContext(),\r\n                    R.drawable.footwear_before\r\n                )\r\n            ).setAfterImage(ContextCompat.getDrawable(requireContext(), R.drawable.footwear_after))\r\n        }\r\n\r\n        tabLayout.addOnTabSelectedListener(object : TabLayout.OnTabSelectedListener {\r\n            override fun onTabSelected(tab: TabLayout.Tab?) {\r\n                if (tab?.position == 0)\r\n                    binding.ivBanner.setBeforeImage(\r\n                        ContextCompat.getDrawable(\r\n                            requireContext(),\r\n                            R.drawable.footwear_before\r\n                        )\r\n                    ).setAfterImage(\r\n                        ContextCompat.getDrawable(\r\n                            requireContext(),\r\n                            R.drawable.footwear_after\r\n                        )\r\n                    )\r\n                else\r\n                    binding.ivBanner.setBeforeImage(\r\n                        ContextCompat.getDrawable(\r\n                            requireContext(),\r\n                            R.drawable.car_before\r\n                        )\r\n                    ).setAfterImage(\r\n                        ContextCompat.getDrawable(\r\n                            requireContext(),\r\n                            R.drawable.car_after\r\n                        )\r\n                    )\r\n            }\r\n\r\n            override fun onTabUnselected(tab: TabLayout.Tab?) {\r\n            }\r\n\r\n            override fun onTabReselected(tab: TabLayout.Tab?) {\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n    private fun showFreeCreditDialog(message: String) {\r\n        val dialog = Dialog(requireContext())\r\n        dialog.requestWindowFeature(Window.FEATURE_NO_TITLE)\r\n        dialog.setCancelable(true)\r\n\r\n        var dialogView =\r\n            LayoutInflater.from(requireContext()).inflate(R.layout.free_credit_dialog, null)\r\n        var tvMessage: TextView = dialogView.findViewById(R.id.tvSkuNameDialog)\r\n        tvMessage.text = message\r\n\r\n        dialog.setContentView(dialogView)\r\n\r\n        dialog.getWindow()?.setBackgroundDrawable(ColorDrawable(Color.TRANSPARENT));\r\n        val llOk: LinearLayout = dialog.findViewById(R.id.llOk)\r\n\r\n\r\n        llOk.setOnClickListener(View.OnClickListener {\r\n\r\n            dialog.dismiss()\r\n\r\n        })\r\n        dialog.show()\r\n\r\n    }\r\n\r\n    private fun lisners() {\r\n        binding.tvCompletedViewall.setOnClickListener {\r\n            val intent = Intent(requireContext(), CompletedProjectsActivity::class.java)\r\n            startActivity(intent)\r\n        }\r\n\r\n        binding.tvOngoingViewall.setOnClickListener {\r\n            val intent = Intent(requireContext(), OngoingOrdersActivity::class.java)\r\n            startActivity(intent)\r\n        }\r\n        binding.btGetStarted.setOnClickListener {\r\n            val intent = Intent(requireContext(), CategoriesActivity::class.java)\r\n            startActivity(intent)\r\n        }\r\n    }\r\n\r\n\r\n\r\n    override fun onResume() {\r\n        super.onResume()\r\n\r\n        appUpdateManager\r\n            .appUpdateInfo\r\n            .addOnSuccessListener { appUpdateInfo ->\r\n                if (appUpdateInfo.updateAvailability()\r\n                    == UpdateAvailability.DEVELOPER_TRIGGERED_UPDATE_IN_PROGRESS\r\n                ) {\r\n                    // If an in-app update is already running, resume the update.\r\n                    appUpdateManager.startUpdateFlowForResult(\r\n                        appUpdateInfo,\r\n                        AppUpdateType.IMMEDIATE,\r\n                        this,\r\n                        MY_REQUEST_CODE\r\n                    )\r\n                }\r\n            }\r\n    }\r\n\r\n    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\r\n        super.onActivityResult(requestCode, resultCode, data)\r\n        if (requestCode == MY_REQUEST_CODE) {\r\n            if (resultCode != AppCompatActivity.RESULT_OK) {\r\n                activity?.moveTaskToBack(true)\r\n                activity?.finish()\r\n                Toast.makeText(\r\n                    requireContext(),\r\n                    \"Update flow failed!\" + requestCode,\r\n                    Toast.LENGTH_SHORT\r\n                ).show()\r\n\r\n                log(\"MY_APP\\\", \\\"Update flow failed! Result code: \"+resultCode)\r\n                // If the update is cancelled or fails,\r\n                // you can request to start the update again.\r\n            }\r\n        }\r\n    }\r\n\r\n    override fun getViewModel() = DashboardViewModel::class.java\r\n\r\n    override fun getFragmentBinding(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?\r\n    ) = HomeDashboardFragmentBinding.inflate(inflater, container, false)\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/udaan/java/com/spyneai/dashboard/ui/HomeDashboardFragment.kt b/app/src/udaan/java/com/spyneai/dashboard/ui/HomeDashboardFragment.kt
--- a/app/src/udaan/java/com/spyneai/dashboard/ui/HomeDashboardFragment.kt	
+++ b/app/src/udaan/java/com/spyneai/dashboard/ui/HomeDashboardFragment.kt	
@@ -33,8 +33,7 @@
 import com.spyneai.adapter.CategoriesDashboardAdapter
 import com.spyneai.base.BaseFragment
 import com.spyneai.base.network.Resource
-import com.spyneai.captureEvent
-import com.spyneai.captureFailureEvent
+
 import com.spyneai.dashboard.adapters.CompletedDashboardAdapter
 import com.spyneai.dashboard.adapters.OngoingDashboardAdapter
 import com.spyneai.dashboard.adapters.TutorialVideosAdapter
Index: app/src/kobe/java/com/spyneai/dashboard/ui/HomeDashboardFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.spyneai.dashboard.ui\r\n\r\nimport android.app.Dialog\r\nimport android.content.Intent\r\nimport android.graphics.Color\r\nimport android.graphics.drawable.ColorDrawable\r\nimport android.os.Bundle\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.view.Window\r\nimport android.widget.LinearLayout\r\nimport android.widget.TextView\r\nimport androidx.lifecycle.Observer\r\nimport com.posthog.android.Properties\r\nimport com.spyneai.R\r\nimport com.spyneai.activity.CompletedProjectsActivity\r\nimport com.spyneai.activity.OngoingOrdersActivity\r\nimport com.spyneai.adapter.CategoriesDashboardAdapter\r\nimport com.spyneai.base.BaseFragment\r\nimport com.spyneai.base.network.Resource\r\nimport com.spyneai.captureEvent\r\nimport com.spyneai.captureFailureEvent\r\nimport com.spyneai.dashboard.data.DashboardViewModel\r\nimport com.spyneai.databinding.HomeDashboardFragmentBinding\r\nimport com.spyneai.fragment.TopUpFragment\r\nimport com.spyneai.needs.AppConstants\r\nimport com.spyneai.needs.Utilities\r\nimport com.spyneai.orders.ui.MyOrdersActivity\r\nimport com.spyneai.posthog.Events\r\n\r\n\r\nclass HomeDashboardFragment :\r\n    BaseFragment<DashboardViewModel, HomeDashboardFragmentBinding>() {\r\n\r\n    lateinit var btnlistener: CategoriesDashboardAdapter.BtnClickListener\r\n\r\n    var categoryPosition: Int = 0\r\n    lateinit var tokenId: String\r\n    lateinit var email: String\r\n\r\n    lateinit var catId: String\r\n    lateinit var displayName: String\r\n    lateinit var displayThumbnail: String\r\n    lateinit var description: String\r\n    lateinit var colorCode: String\r\n\r\n\r\n    override fun onActivityCreated(savedInstanceState: Bundle?) {\r\n        super.onActivityCreated(savedInstanceState)\r\n\r\n        tokenId = Utilities.getPreference(requireContext(), AppConstants.TOKEN_ID).toString()\r\n        email = Utilities.getPreference(requireContext(), AppConstants.EMAIL_ID).toString()\r\n\r\n        lisners()\r\n\r\n        viewModel.getCategories(Utilities.getPreference(requireContext(),AppConstants.AUTH_KEY).toString())\r\n        viewModel.categoriesResponse.observe(viewLifecycleOwner, Observer {\r\n            when(it){\r\n                is Resource.Success -> {\r\n                    requireContext().captureEvent(Events.GOT_CATEGORIES, HashMap<String,Any?>())\r\n\r\n                }\r\n                is Resource.Loading -> {\r\n\r\n                }\r\n                is Resource.Failure -> {\r\n                    requireContext().captureFailureEvent(Events.GET_CATEGORIES_FAILED, HashMap<String,Any?>(),\r\n                        it.errorMessage!!)\r\n\r\n                    handleApiError(it)\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    private fun lisners(){\r\n        binding.llDrafts.setOnClickListener {\r\n            val intent = Intent(requireContext(), MyOrdersActivity::class.java)\r\n            intent.putExtra(\"TAB_ID\", 0)\r\n            startActivity(intent)\r\n        }\r\n\r\n        binding.llCompleted.setOnClickListener {\r\n            val intent = Intent(requireContext(), MyOrdersActivity::class.java)\r\n            intent.putExtra(\"TAB_ID\", 2)\r\n            startActivity(intent)\r\n        }\r\n\r\n        binding.llOngoing.setOnClickListener {\r\n            val intent = Intent(requireContext(), MyOrdersActivity::class.java)\r\n            intent.putExtra(\"TAB_ID\", 1)\r\n            startActivity(intent)\r\n        }\r\n    }\r\n\r\n\r\n    override fun getViewModel() = DashboardViewModel::class.java\r\n\r\n    override fun getFragmentBinding(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?\r\n    ) = HomeDashboardFragmentBinding.inflate(inflater, container, false)\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/kobe/java/com/spyneai/dashboard/ui/HomeDashboardFragment.kt b/app/src/kobe/java/com/spyneai/dashboard/ui/HomeDashboardFragment.kt
--- a/app/src/kobe/java/com/spyneai/dashboard/ui/HomeDashboardFragment.kt	
+++ b/app/src/kobe/java/com/spyneai/dashboard/ui/HomeDashboardFragment.kt	
@@ -19,8 +19,7 @@
 import com.spyneai.adapter.CategoriesDashboardAdapter
 import com.spyneai.base.BaseFragment
 import com.spyneai.base.network.Resource
-import com.spyneai.captureEvent
-import com.spyneai.captureFailureEvent
+
 import com.spyneai.dashboard.data.DashboardViewModel
 import com.spyneai.databinding.HomeDashboardFragmentBinding
 import com.spyneai.fragment.TopUpFragment
Index: app/src/ebay/java/com/spyneai/dashboard/ui/HomeDashboardFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.spyneai.dashboard.ui\r\n\r\n\r\nimport android.app.Dialog\r\nimport android.content.Intent\r\nimport android.graphics.Color\r\nimport android.graphics.drawable.ColorDrawable\r\nimport android.os.Bundle\r\nimport android.os.Handler\r\nimport android.text.TextUtils.replace\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.view.Window\r\nimport android.widget.LinearLayout\r\nimport android.widget.TextView\r\nimport android.widget.Toast\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.core.content.ContextCompat\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.lifecycle.Observer\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.google.android.material.tabs.TabLayout\r\nimport com.google.android.play.core.appupdate.AppUpdateManager\r\nimport com.google.android.play.core.appupdate.AppUpdateManagerFactory\r\nimport com.google.android.play.core.install.model.AppUpdateType\r\nimport com.google.android.play.core.install.model.UpdateAvailability\r\nimport com.google.android.play.core.ktx.startUpdateFlowForResult\r\nimport com.google.gson.Gson\r\nimport com.posthog.android.Properties\r\nimport com.spyneai.R\r\nimport com.spyneai.activity.CategoriesActivity\r\nimport com.spyneai.activity.CompletedProjectsActivity\r\nimport com.spyneai.activity.OngoingOrdersActivity\r\nimport com.spyneai.adapter.CategoriesDashboardAdapter\r\nimport com.spyneai.base.BaseFragment\r\nimport com.spyneai.base.network.Resource\r\nimport com.spyneai.captureEvent\r\nimport com.spyneai.captureFailureEvent\r\nimport com.spyneai.dashboard.adapters.CompletedDashboardAdapter\r\nimport com.spyneai.dashboard.adapters.OngoingDashboardAdapter\r\nimport com.spyneai.dashboard.adapters.TutorialVideosAdapter\r\nimport com.spyneai.dashboard.data.DashboardViewModel\r\nimport com.spyneai.dashboard.data.model.LayoutHolder\r\nimport com.spyneai.dashboard.response.NewCategoriesResponse\r\nimport com.spyneai.databinding.HomeDashboardFragmentBinding\r\nimport com.spyneai.needs.AppConstants\r\nimport com.spyneai.needs.Utilities\r\nimport com.spyneai.orders.data.response.GetProjectsResponse\r\nimport com.spyneai.posthog.Events\r\nimport com.spyneai.shoot.data.model.ProjectDetailResponse\r\nimport com.spyneai.shoot.ui.base.ShootPortraitActivity\r\nimport com.spyneai.shoot.utils.log\r\n\r\n\r\nclass HomeDashboardFragment :\r\n    BaseFragment<DashboardViewModel, HomeDashboardFragmentBinding>() {\r\n\r\n    lateinit var btnlistener: CategoriesDashboardAdapter.BtnClickListener\r\n\r\n    lateinit var categoriesAdapter: CategoriesDashboardAdapter\r\n\r\n    lateinit var ongoingDashboardAdapter: OngoingDashboardAdapter\r\n\r\n    lateinit var completedDashboardAdapter: CompletedDashboardAdapter\r\n    lateinit var completedProjectList: ArrayList<GetProjectsResponse.Project_data>\r\n    lateinit var ongoingProjectList: ArrayList<GetProjectsResponse.Project_data>\r\n\r\n    lateinit var handler: Handler\r\n    private var runnable: Runnable? = null\r\n\r\n    lateinit var tutorialVideosAdapter: TutorialVideosAdapter\r\n\r\n    var categoryPosition: Int = 0\r\n    lateinit var tokenId: String\r\n    lateinit var email: String\r\n\r\n    lateinit var catId: String\r\n    lateinit var displayName: String\r\n    lateinit var displayThumbnail: String\r\n    lateinit var description: String\r\n    lateinit var colorCode: String\r\n    private var refreshData = true\r\n    private lateinit var tabLayout: TabLayout\r\n\r\n    lateinit var appUpdateManager: AppUpdateManager\r\n    private val MY_REQUEST_CODE: Int = 1\r\n    lateinit var PACKAGE_NAME: String\r\n\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        handler = Handler()\r\n\r\n        tokenId = Utilities.getPreference(requireContext(), AppConstants.TOKEN_ID).toString()\r\n        email = Utilities.getPreference(requireContext(), AppConstants.EMAIL_ID).toString()\r\n\r\n        PACKAGE_NAME = requireContext().getPackageName().toString()\r\n        appUpdateManager = AppUpdateManagerFactory.create(requireContext())\r\n\r\n//        if (PACKAGE_NAME.equals(\"com.spyneai.ebay.debug\")) {\r\n//            newUserCreditDialog()\r\n            repeatRefreshData()\r\n            setSliderRecycler()\r\n            lisners()\r\n            welcomeHomeText()\r\n            getCategories()\r\n//        } else\r\n//            autoUpdates()\r\n    }\r\n\r\n    private fun autoUpdates() {\r\n\r\n        val appUpdateInfoTask = appUpdateManager.appUpdateInfo\r\n        appUpdateInfoTask.addOnSuccessListener { appUpdateInfo ->\r\n            if (appUpdateInfo.updateAvailability() == UpdateAvailability.UPDATE_AVAILABLE\r\n                && appUpdateInfo.isUpdateTypeAllowed(AppUpdateType.IMMEDIATE)\r\n            ) {\r\n\r\n                // Request the update.\r\n                appUpdateManager.startUpdateFlowForResult(\r\n                    // Pass the intent that is returned by 'getAppUpdateInfo()'.\r\n                    appUpdateInfo,\r\n                    // Or 'AppUpdateType.FLEXIBLE' for flexible updates.\r\n                    AppUpdateType.IMMEDIATE,\r\n                    // The current activity making the update request.\r\n                    this,\r\n                    // Include a request code to later monitor this update request.\r\n                    MY_REQUEST_CODE\r\n                )\r\n            } else {\r\n//                newUserCreditDialog()\r\n                repeatRefreshData()\r\n                setSliderRecycler()\r\n                lisners()\r\n                welcomeHomeText()\r\n                getCategories()\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun getOngoingOrders() {\r\n        log(\"Completed SKUs(auth key): \"+ Utilities.getPreference(requireContext(), AppConstants.AUTH_KEY))\r\n\r\n        viewModel.getProjects(Utilities.getPreference(requireContext(), AppConstants.AUTH_KEY).toString(), \"ongoing\")\r\n\r\n        viewModel.getProjectsResponse.observe(\r\n            viewLifecycleOwner, Observer {\r\n                when (it) {\r\n                    is Resource.Success -> {\r\n                        binding.rvOngoingShoots.visibility = View.VISIBLE\r\n                        binding.shimmerOngoing.stopShimmer()\r\n                        binding.shimmerOngoing.visibility = View.GONE\r\n                        if (it.value.data.project_data.isNullOrEmpty()) {\r\n                            binding.rlOngoingShoots.visibility = View.GONE\r\n                            refreshData = false\r\n                        }\r\n\r\n                        if (it.value.data != null) {\r\n                            ongoingProjectList = ArrayList()\r\n                            ongoingProjectList.clear()\r\n                            ongoingProjectList.addAll(it.value.data.project_data)\r\n                            ongoingDashboardAdapter = OngoingDashboardAdapter(\r\n                                requireContext(),\r\n                                ongoingProjectList\r\n                            )\r\n\r\n                            val layoutManager: RecyclerView.LayoutManager = LinearLayoutManager(\r\n                                requireContext(),\r\n                                LinearLayoutManager.HORIZONTAL,\r\n                                false\r\n                            )\r\n                            binding.rvOngoingShoots.setLayoutManager(layoutManager)\r\n                            binding.rvOngoingShoots.setAdapter(ongoingDashboardAdapter)\r\n\r\n                        }\r\n                    }\r\n                    is Resource.Loading -> {\r\n                        binding.shimmerOngoing.startShimmer()\r\n                    }\r\n                    is Resource.Failure -> {\r\n                        binding.shimmerOngoing.stopShimmer()\r\n                        binding.shimmerOngoing.visibility = View.GONE\r\n\r\n                        if (it.errorCode == 404) {\r\n                            binding.rlOngoingShoots.visibility = View.GONE\r\n                            refreshData = false\r\n                        } else {\r\n                            requireContext().captureFailureEvent(\r\n                                Events.GET_ONGOING_ORDERS_FAILED, HashMap<String,Any?>(),\r\n                                it.errorMessage!!\r\n                            )\r\n                            handleApiError(it)\r\n                        }\r\n                    }\r\n\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    private fun newUserCreditDialog() {\r\n        if (viewModel.isNewUser.value == true) {\r\n            showFreeCreditDialog(viewModel.creditsMessage.value.toString())\r\n            viewModel.isNewUser.value = false\r\n        }\r\n    }\r\n\r\n    private fun getCompletedOrders() {\r\n\r\n        viewModel.getCompletedProjects(Utilities.getPreference(requireContext(), AppConstants.AUTH_KEY).toString(), \"completed\")\r\n\r\n        log(\"Completed SKUs(auth key): \"+ Utilities.getPreference(requireContext(), AppConstants.AUTH_KEY))\r\n        viewModel.getCompletedProjectsResponse.observe(\r\n            viewLifecycleOwner, Observer {\r\n                when (it) {\r\n                    is Resource.Success -> {\r\n\r\n                        requireContext().captureEvent(Events.GET_COMPLETED_ORDERS, HashMap<String,Any?>())\r\n                        completedProjectList = ArrayList()\r\n                        if (it.value.data.project_data.isNullOrEmpty()) {\r\n                            binding.rlCompletedShoots.visibility = View.GONE\r\n                            refreshData = false\r\n                        }\r\n\r\n                        binding.rvCompletedShoots.visibility = View.VISIBLE\r\n                        binding.shimmerCompleted.stopShimmer()\r\n                        binding.shimmerCompleted.visibility = View.GONE\r\n                        if (it.value.data != null) {\r\n                            completedProjectList.clear()\r\n                            completedProjectList.addAll(it.value.data.project_data)\r\n\r\n                            completedDashboardAdapter = CompletedDashboardAdapter(\r\n                                requireContext(),\r\n                                completedProjectList\r\n                            )\r\n\r\n                            val layoutManager: RecyclerView.LayoutManager = LinearLayoutManager(\r\n                                requireContext(),\r\n                                LinearLayoutManager.HORIZONTAL,\r\n                                false\r\n                            )\r\n                            binding.rvCompletedShoots.setLayoutManager(layoutManager)\r\n                            binding.rvCompletedShoots.setAdapter(completedDashboardAdapter)\r\n                        }\r\n\r\n                    }\r\n                    is Resource.Loading -> {\r\n                        binding.shimmerCompleted.startShimmer()\r\n                    }\r\n                    is Resource.Failure -> {\r\n                        binding.shimmerCompleted.stopShimmer()\r\n                        binding.shimmerCompleted.visibility = View.GONE\r\n\r\n                        if (it.errorCode == 404) {\r\n                            binding.rlCompletedShoots.visibility = View.GONE\r\n                            refreshData = false\r\n                        } else {\r\n                            requireContext().captureFailureEvent(\r\n                                Events.GET_COMPLETED_ORDERS_FAILED, HashMap<String,Any?>(),\r\n                                it.errorMessage!!\r\n                            )\r\n                            handleApiError(it)\r\n                        }\r\n                    }\r\n\r\n                }\r\n            }\r\n        )\r\n\r\n    }\r\n\r\n    private fun getCategories() {\r\n        viewModel.getCategories(\r\n            Utilities.getPreference(requireContext(), AppConstants.AUTH_KEY).toString()\r\n        )\r\n\r\n        viewModel.categoriesResponse.observe(viewLifecycleOwner, Observer {\r\n            when (it) {\r\n                is Resource.Success -> {\r\n\r\n                    if (it.value.data.size == 1)\r\n                    Utilities.savePrefrence(requireContext(), AppConstants.CATEGORY_NAME, it.value.data[0].prod_cat_name)\r\n\r\n                    LayoutHolder.data = it.value.data\r\n                    requireContext().captureEvent(Events.GOT_CATEGORIES, HashMap<String,Any?>())\r\n\r\n                    binding.shimmerCategories.stopShimmer()\r\n                    binding.shimmerCategories.visibility = View.GONE\r\n                    binding.rvDashboardCategories.visibility = View.VISIBLE\r\n\r\n                    categoriesAdapter = CategoriesDashboardAdapter(requireContext(),\r\n                        it.value.data as ArrayList<NewCategoriesResponse.Data>,\r\n                        object : CategoriesDashboardAdapter.BtnClickListener {\r\n                            override fun onBtnClick(position: Int) {\r\n\r\n                                LayoutHolder.categoryPosition = position\r\n\r\n                                Utilities.savePrefrence(requireContext(), AppConstants.CATEGORY_ID, it.value.data[position].prod_cat_id)\r\n                                Utilities.savePrefrence(requireContext(), AppConstants.CATEGORY_NAME, it.value.data[position].prod_cat_name)\r\n\r\n                                catId = it.value.data[position].prod_cat_id\r\n                                displayName = it.value.data[position].prod_cat_name\r\n                                displayThumbnail = it.value.data[position].display_thumbnail\r\n                                description = it.value.data[position].description\r\n                                colorCode = it.value.data[position].color_code\r\n\r\n                                when(position){\r\n//                                    0 -> {\r\n//                                        val intent = Intent(requireContext(), StartShootActivity::class.java)\r\n//                                        intent.putExtra(\r\n//                                            AppConstants.CATEGORY_NAME,\r\n//                                            displayName\r\n//                                        )\r\n//                                        intent.putExtra(\r\n//                                            AppConstants.CATEGORY_ID,\r\n//                                            catId\r\n//                                        )\r\n//                                        intent.putExtra(\r\n//                                            AppConstants.IMAGE_URL,\r\n//                                            displayThumbnail\r\n//                                        )\r\n//                                        intent.putExtra(\r\n//                                            AppConstants.DESCRIPTION,\r\n//                                            description\r\n//                                        )\r\n//                                        intent.putExtra(AppConstants.COLOR, colorCode)\r\n//                                        startActivity(intent)\r\n//                                    }\r\n//                                    1 -> {\r\n//                                        val intent = Intent(requireContext(), ShootActivity::class.java)\r\n//                                        intent.putExtra(\r\n//                                            AppConstants.CATEGORY_NAME,\r\n//                                            displayName\r\n//                                        )\r\n//                                        intent.putExtra(\r\n//                                            AppConstants.CATEGORY_ID,\r\n//                                            catId\r\n//                                        )\r\n//                                        intent.putExtra(\r\n//                                            AppConstants.IMAGE_URL,\r\n//                                            displayThumbnail\r\n//                                        )\r\n//                                        intent.putExtra(\r\n//                                            AppConstants.DESCRIPTION,\r\n//                                            description\r\n//                                        )\r\n//                                        intent.putExtra(AppConstants.COLOR, colorCode)\r\n//                                        startActivity(intent)\r\n//                                    }\r\n\r\n                                    0, 1 -> {\r\n                                        val intent = Intent(requireContext(), ShootPortraitActivity::class.java)\r\n                                        val gson = Gson()\r\n                                        intent.putExtra(\r\n                                            AppConstants.CATEGORY_NAME,\r\n                                            displayName\r\n                                        )\r\n                                        intent.putExtra(\r\n                                            AppConstants.CATEGORY_ID,\r\n                                            catId\r\n                                        )\r\n                                        intent.putExtra(\r\n                                            AppConstants.IMAGE_URL,\r\n                                            displayThumbnail\r\n                                        )\r\n                                        intent.putExtra(\r\n                                            AppConstants.DESCRIPTION,\r\n                                            description\r\n                                        )\r\n                                        intent.putExtra(AppConstants.COLOR, colorCode)\r\n                                        startActivity(intent)\r\n                                    }\r\n                                    else -> {\r\n                                        Toast.makeText(\r\n                                            requireContext(),\r\n                                            \"Coming Soon !\",\r\n                                            Toast.LENGTH_SHORT\r\n                                        ).show()\r\n                                    }\r\n                                }\r\n\r\n                            }\r\n\r\n                        })\r\n                    val layoutManager: RecyclerView.LayoutManager = LinearLayoutManager(\r\n                        requireContext(),\r\n                        LinearLayoutManager.HORIZONTAL,\r\n                        false\r\n                    )\r\n                    binding.rvDashboardCategories.setLayoutManager(layoutManager)\r\n                    binding.rvDashboardCategories.setAdapter(categoriesAdapter)\r\n//                    categoriesAdapter.notifyDataSetChanged()\r\n                }\r\n                is Resource.Loading -> {\r\n                    binding.shimmerCategories.startShimmer()\r\n                }\r\n                is Resource.Failure -> {\r\n                    requireContext().captureFailureEvent(\r\n                        Events.GET_CATEGORIES_FAILED, HashMap<String,Any?>(),\r\n                        it.errorMessage!!\r\n                    )\r\n                    handleApiError(it)\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    private fun welcomeHomeText() {\r\n        if (Utilities.getPreference(requireContext(), AppConstants.USER_NAME).toString() != \"\") {\r\n            binding.tvWelcomeHome.visibility = View.VISIBLE\r\n            binding.viewWelcome.visibility = View.VISIBLE\r\n            binding.tvWelcomeHome.setText(\r\n                \"Welcome \" +\r\n                        Utilities.getPreference(requireContext(), AppConstants.USER_NAME).toString()\r\n            )\r\n            if (Utilities.getPreference(requireContext(), AppConstants.USER_NAME).toString().trim()\r\n                    .equals(\"default\")\r\n            ) {\r\n                binding.tvWelcomeHome.visibility = View.VISIBLE\r\n                binding.viewWelcome.visibility = View.VISIBLE\r\n                binding.tvWelcomeHome.setText(\"Welcome Home\")\r\n            }\r\n        }\r\n    }\r\n\r\n    fun repeatRefreshData(){\r\n        try {\r\n            getOngoingOrders()\r\n            getCompletedOrders()\r\n            runnable = Runnable {\r\n                if (refreshData)\r\n                    repeatRefreshData()  }\r\n            if (runnable != null)\r\n                handler.postDelayed(runnable!!,10000)\r\n        }catch (e : IllegalArgumentException){\r\n            e.printStackTrace()\r\n        }catch (e : Exception){\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n\r\n    override fun onPause() {\r\n        if (runnable != null)\r\n            handler.removeCallbacks(runnable!!)\r\n        super.onPause()\r\n    }\r\n\r\n\r\n\r\n\r\n    private fun setSliderRecycler() {\r\n\r\n        binding.ivBanner.setSliderThumb(\r\n            ContextCompat.getDrawable(\r\n                requireContext(),\r\n                R.drawable.ic_sliderline\r\n            )\r\n        )\r\n\r\n        tabLayout = binding.tbDashboard\r\n        tabLayout.addTab(tabLayout.newTab());\r\n//        tabLayout.addTab(tabLayout.newTab());\r\n\r\n\r\n        binding.ivBanner.setBeforeImage(\r\n            ContextCompat.getDrawable(\r\n                requireContext(),\r\n                R.drawable.food_before\r\n            )\r\n        ).setAfterImage(ContextCompat.getDrawable(requireContext(), R.drawable.food_after))\r\n    }\r\n\r\n    private fun showFreeCreditDialog(message: String) {\r\n        val dialog = Dialog(requireContext())\r\n        dialog.requestWindowFeature(Window.FEATURE_NO_TITLE)\r\n        dialog.setCancelable(true)\r\n\r\n        var dialogView =\r\n            LayoutInflater.from(requireContext()).inflate(R.layout.free_credit_dialog, null)\r\n        var tvMessage: TextView = dialogView.findViewById(R.id.tvSkuNameDialog)\r\n        tvMessage.text = message\r\n\r\n        dialog.setContentView(dialogView)\r\n\r\n        dialog.getWindow()?.setBackgroundDrawable(ColorDrawable(Color.TRANSPARENT));\r\n        val llOk: LinearLayout = dialog.findViewById(R.id.llOk)\r\n\r\n\r\n        llOk.setOnClickListener(View.OnClickListener {\r\n\r\n            dialog.dismiss()\r\n\r\n        })\r\n        dialog.show()\r\n\r\n    }\r\n\r\n    private fun lisners() {\r\n        binding.tvCompletedViewall.setOnClickListener {\r\n            val intent = Intent(requireContext(), CompletedProjectsActivity::class.java)\r\n            startActivity(intent)\r\n        }\r\n\r\n        binding.tvOngoingViewall.setOnClickListener {\r\n            val intent = Intent(requireContext(), OngoingOrdersActivity::class.java)\r\n            startActivity(intent)\r\n        }\r\n        binding.btGetStarted.setOnClickListener {\r\n            val intent = Intent(requireContext(), CategoriesActivity::class.java)\r\n            startActivity(intent)\r\n        }\r\n    }\r\n\r\n\r\n\r\n    override fun onResume() {\r\n        super.onResume()\r\n\r\n        appUpdateManager\r\n            .appUpdateInfo\r\n            .addOnSuccessListener { appUpdateInfo ->\r\n                if (appUpdateInfo.updateAvailability()\r\n                    == UpdateAvailability.DEVELOPER_TRIGGERED_UPDATE_IN_PROGRESS\r\n                ) {\r\n                    // If an in-app update is already running, resume the update.\r\n                    appUpdateManager.startUpdateFlowForResult(\r\n                        appUpdateInfo,\r\n                        AppUpdateType.IMMEDIATE,\r\n                        this,\r\n                        MY_REQUEST_CODE\r\n                    )\r\n                }\r\n            }\r\n    }\r\n\r\n    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\r\n        super.onActivityResult(requestCode, resultCode, data)\r\n        if (requestCode == MY_REQUEST_CODE) {\r\n            if (resultCode != AppCompatActivity.RESULT_OK) {\r\n                activity?.moveTaskToBack(true)\r\n                activity?.finish()\r\n                Toast.makeText(\r\n                    requireContext(),\r\n                    \"Update flow failed!\" + requestCode,\r\n                    Toast.LENGTH_SHORT\r\n                ).show()\r\n\r\n                log(\"MY_APP\\\", \\\"Update flow failed! Result code: \"+resultCode)\r\n                // If the update is cancelled or fails,\r\n                // you can request to start the update again.\r\n            }\r\n        }\r\n    }\r\n\r\n    override fun getViewModel() = DashboardViewModel::class.java\r\n\r\n    override fun getFragmentBinding(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?\r\n    ) = HomeDashboardFragmentBinding.inflate(inflater, container, false)\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/ebay/java/com/spyneai/dashboard/ui/HomeDashboardFragment.kt b/app/src/ebay/java/com/spyneai/dashboard/ui/HomeDashboardFragment.kt
--- a/app/src/ebay/java/com/spyneai/dashboard/ui/HomeDashboardFragment.kt	
+++ b/app/src/ebay/java/com/spyneai/dashboard/ui/HomeDashboardFragment.kt	
@@ -36,8 +36,7 @@
 import com.spyneai.adapter.CategoriesDashboardAdapter
 import com.spyneai.base.BaseFragment
 import com.spyneai.base.network.Resource
-import com.spyneai.captureEvent
-import com.spyneai.captureFailureEvent
+
 import com.spyneai.dashboard.adapters.CompletedDashboardAdapter
 import com.spyneai.dashboard.adapters.OngoingDashboardAdapter
 import com.spyneai.dashboard.adapters.TutorialVideosAdapter
Index: app/src/lal10/java/com/spyneai/dashboard/ui/HomeDashboardFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.spyneai.dashboard.ui\r\n\r\n\r\nimport android.app.Dialog\r\nimport android.content.Intent\r\nimport android.graphics.Color\r\nimport android.graphics.drawable.ColorDrawable\r\nimport android.os.Bundle\r\nimport android.os.Handler\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.view.Window\r\nimport android.widget.LinearLayout\r\nimport android.widget.TextView\r\nimport android.widget.Toast\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.core.content.ContextCompat\r\nimport androidx.lifecycle.Observer\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.google.android.material.tabs.TabLayout\r\nimport com.google.android.play.core.appupdate.AppUpdateManager\r\nimport com.google.android.play.core.appupdate.AppUpdateManagerFactory\r\nimport com.google.android.play.core.install.model.AppUpdateType\r\nimport com.google.android.play.core.install.model.UpdateAvailability\r\nimport com.google.android.play.core.ktx.startUpdateFlowForResult\r\nimport com.posthog.android.Properties\r\nimport com.spyneai.R\r\nimport com.spyneai.activity.CategoriesActivity\r\nimport com.spyneai.activity.CompletedProjectsActivity\r\nimport com.spyneai.activity.OngoingOrdersActivity\r\nimport com.spyneai.adapter.CategoriesDashboardAdapter\r\nimport com.spyneai.base.BaseFragment\r\nimport com.spyneai.base.network.Resource\r\nimport com.spyneai.captureEvent\r\nimport com.spyneai.captureFailureEvent\r\nimport com.spyneai.dashboard.adapters.CompletedDashboardAdapter\r\nimport com.spyneai.dashboard.adapters.OngoingDashboardAdapter\r\nimport com.spyneai.dashboard.adapters.TutorialVideosAdapter\r\nimport com.spyneai.dashboard.data.DashboardViewModel\r\nimport com.spyneai.dashboard.response.NewCategoriesResponse\r\nimport com.spyneai.databinding.HomeDashboardFragmentBinding\r\nimport com.spyneai.needs.AppConstants\r\nimport com.spyneai.needs.Utilities\r\nimport com.spyneai.orders.data.response.GetProjectsResponse\r\nimport com.spyneai.posthog.Events\r\nimport com.spyneai.shoot.ui.base.ShootActivity\r\nimport com.spyneai.shoot.ui.StartShootActivity\r\nimport com.spyneai.shoot.ui.base.ShootPortraitActivity\r\nimport com.spyneai.shoot.utils.log\r\n\r\n\r\nclass HomeDashboardFragment :\r\n    BaseFragment<DashboardViewModel, HomeDashboardFragmentBinding>() {\r\n\r\n    lateinit var btnlistener: CategoriesDashboardAdapter.BtnClickListener\r\n\r\n    lateinit var categoriesAdapter: CategoriesDashboardAdapter\r\n\r\n    lateinit var ongoingDashboardAdapter: OngoingDashboardAdapter\r\n\r\n    lateinit var completedDashboardAdapter: CompletedDashboardAdapter\r\n    lateinit var completedProjectList: ArrayList<GetProjectsResponse.Project_data>\r\n    lateinit var ongoingProjectList: ArrayList<GetProjectsResponse.Project_data>\r\n\r\n    lateinit var handler: Handler\r\n    private var runnable: Runnable? = null\r\n\r\n    lateinit var tutorialVideosAdapter: TutorialVideosAdapter\r\n\r\n    var categoryPosition: Int = 0\r\n    lateinit var tokenId: String\r\n    lateinit var email: String\r\n\r\n    lateinit var catId: String\r\n    lateinit var displayName: String\r\n    lateinit var displayThumbnail: String\r\n    lateinit var description: String\r\n    lateinit var colorCode: String\r\n    private var refreshData = true\r\n    private lateinit var tabLayout: TabLayout\r\n\r\n    lateinit var appUpdateManager: AppUpdateManager\r\n    private val MY_REQUEST_CODE: Int = 1\r\n    lateinit var PACKAGE_NAME: String\r\n\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        handler = Handler()\r\n\r\n        tokenId = Utilities.getPreference(requireContext(), AppConstants.TOKEN_ID).toString()\r\n        email = Utilities.getPreference(requireContext(), AppConstants.EMAIL_ID).toString()\r\n\r\n        PACKAGE_NAME = requireContext().getPackageName().toString()\r\n        appUpdateManager = AppUpdateManagerFactory.create(requireContext())\r\n\r\n\r\n//        if (PACKAGE_NAME.equals(\"com.spyneai.lal10.debug\")) {\r\n            repeatRefreshData()\r\n            setSliderRecycler()\r\n            lisners()\r\n            welcomeHomeText()\r\n            getCategories()\r\n//        } else\r\n//            autoUpdates()\r\n    }\r\n\r\n    private fun autoUpdates() {\r\n\r\n        val appUpdateInfoTask = appUpdateManager.appUpdateInfo\r\n        appUpdateInfoTask.addOnSuccessListener { appUpdateInfo ->\r\n            if (appUpdateInfo.updateAvailability() == UpdateAvailability.UPDATE_AVAILABLE\r\n                && appUpdateInfo.isUpdateTypeAllowed(AppUpdateType.IMMEDIATE)\r\n            ) {\r\n\r\n                // Request the update.\r\n                appUpdateManager.startUpdateFlowForResult(\r\n                    // Pass the intent that is returned by 'getAppUpdateInfo()'.\r\n                    appUpdateInfo,\r\n                    // Or 'AppUpdateType.FLEXIBLE' for flexible updates.\r\n                    AppUpdateType.IMMEDIATE,\r\n                    // The current activity making the update request.\r\n                    this,\r\n                    // Include a request code to later monitor this update request.\r\n                    MY_REQUEST_CODE\r\n                )\r\n            } else {\r\n                repeatRefreshData()\r\n                setSliderRecycler()\r\n                lisners()\r\n                welcomeHomeText()\r\n                getCategories()\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun getOngoingOrders() {\r\n        log(\"Completed SKUs(auth key): \"+ Utilities.getPreference(requireContext(), AppConstants.AUTH_KEY))\r\n\r\n        viewModel.getProjects(Utilities.getPreference(requireContext(), AppConstants.AUTH_KEY).toString(), \"ongoing\")\r\n\r\n        viewModel.getProjectsResponse.observe(\r\n            viewLifecycleOwner, Observer {\r\n                when (it) {\r\n                    is Resource.Success -> {\r\n                        binding.rvOngoingShoots.visibility = View.VISIBLE\r\n                        binding.shimmerOngoing.stopShimmer()\r\n                        binding.shimmerOngoing.visibility = View.GONE\r\n                        if (it.value.data.project_data.isNullOrEmpty()) {\r\n                            binding.rlOngoingShoots.visibility = View.GONE\r\n                            refreshData = false\r\n                        }\r\n\r\n                        if (it.value.data != null) {\r\n                            ongoingProjectList = ArrayList()\r\n                            ongoingProjectList.clear()\r\n                            ongoingProjectList.addAll(it.value.data.project_data)\r\n                            ongoingDashboardAdapter = OngoingDashboardAdapter(\r\n                                requireContext(),\r\n                                ongoingProjectList\r\n                            )\r\n\r\n                            val layoutManager: RecyclerView.LayoutManager = LinearLayoutManager(\r\n                                requireContext(),\r\n                                LinearLayoutManager.HORIZONTAL,\r\n                                false\r\n                            )\r\n                            binding.rvOngoingShoots.setLayoutManager(layoutManager)\r\n                            binding.rvOngoingShoots.setAdapter(ongoingDashboardAdapter)\r\n\r\n                        }\r\n                    }\r\n                    is Resource.Loading -> {\r\n                        binding.shimmerOngoing.startShimmer()\r\n                    }\r\n                    is Resource.Failure -> {\r\n                        binding.shimmerOngoing.stopShimmer()\r\n                        binding.shimmerOngoing.visibility = View.GONE\r\n\r\n                        if (it.errorCode == 404) {\r\n                            binding.rlOngoingShoots.visibility = View.GONE\r\n                            refreshData = false\r\n                        } else {\r\n                            requireContext().captureFailureEvent(\r\n                                Events.GET_ONGOING_ORDERS_FAILED, HashMap<String,Any?>(),\r\n                                it.errorMessage!!\r\n                            )\r\n                            handleApiError(it)\r\n                        }\r\n                    }\r\n\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n\r\n\r\n    private fun getCompletedOrders() {\r\n\r\n        viewModel.getCompletedProjects(Utilities.getPreference(requireContext(), AppConstants.AUTH_KEY).toString(), \"completed\")\r\n\r\n        log(\"Completed SKUs(auth key): \"+ Utilities.getPreference(requireContext(), AppConstants.AUTH_KEY))\r\n        viewModel.getCompletedProjectsResponse.observe(\r\n            viewLifecycleOwner, Observer {\r\n                when (it) {\r\n                    is Resource.Success -> {\r\n\r\n                        requireContext().captureEvent(Events.GET_COMPLETED_ORDERS, HashMap<String,Any?>())\r\n                        completedProjectList = ArrayList()\r\n                        if (it.value.data.project_data.isNullOrEmpty()) {\r\n                            binding.rlCompletedShoots.visibility = View.GONE\r\n                            refreshData = false\r\n                        }\r\n\r\n                        binding.rvCompletedShoots.visibility = View.VISIBLE\r\n                        binding.shimmerCompleted.stopShimmer()\r\n                        binding.shimmerCompleted.visibility = View.GONE\r\n                        if (it.value.data != null) {\r\n                            completedProjectList.clear()\r\n                            completedProjectList.addAll(it.value.data.project_data)\r\n\r\n                            completedDashboardAdapter = CompletedDashboardAdapter(\r\n                                requireContext(),\r\n                                completedProjectList\r\n                            )\r\n\r\n                            val layoutManager: RecyclerView.LayoutManager = LinearLayoutManager(\r\n                                requireContext(),\r\n                                LinearLayoutManager.HORIZONTAL,\r\n                                false\r\n                            )\r\n                            binding.rvCompletedShoots.setLayoutManager(layoutManager)\r\n                            binding.rvCompletedShoots.setAdapter(completedDashboardAdapter)\r\n                        }\r\n\r\n                    }\r\n                    is Resource.Loading -> {\r\n                        binding.shimmerCompleted.startShimmer()\r\n                    }\r\n                    is Resource.Failure -> {\r\n                        binding.shimmerCompleted.stopShimmer()\r\n                        binding.shimmerCompleted.visibility = View.GONE\r\n\r\n                        if (it.errorCode == 404) {\r\n                            binding.rlCompletedShoots.visibility = View.GONE\r\n                            refreshData = false\r\n                        } else {\r\n                            requireContext().captureFailureEvent(\r\n                                Events.GET_COMPLETED_ORDERS_FAILED, HashMap<String,Any?>(),\r\n                                it.errorMessage!!\r\n                            )\r\n                            handleApiError(it)\r\n                        }\r\n                    }\r\n\r\n                }\r\n            }\r\n        )\r\n\r\n    }\r\n\r\n    private fun getCategories() {\r\n        viewModel.getCategories(\r\n            Utilities.getPreference(requireContext(), AppConstants.AUTH_KEY).toString()\r\n        )\r\n        viewModel.categoriesResponse.observe(viewLifecycleOwner, Observer {\r\n            when (it) {\r\n                is Resource.Success -> {\r\n                    requireContext().captureEvent(Events.GOT_CATEGORIES, HashMap<String,Any?>())\r\n\r\n                    binding.shimmerCategories.stopShimmer()\r\n                    binding.shimmerCategories.visibility = View.GONE\r\n                    binding.rvDashboardCategories.visibility = View.VISIBLE\r\n\r\n                    categoriesAdapter = CategoriesDashboardAdapter(requireContext(),\r\n                        it.value.data as ArrayList<NewCategoriesResponse.Data>,\r\n                        object : CategoriesDashboardAdapter.BtnClickListener {\r\n                            override fun onBtnClick(position: Int) {\r\n\r\n                                Utilities.savePrefrence(requireContext(), AppConstants.CATEGORY_ID, it.value.data[position].prod_cat_id)\r\n                                Utilities.savePrefrence(requireContext(), AppConstants.CATEGORY_NAME, it.value.data[position].prod_cat_name)\r\n\r\n                                catId = it.value.data[position].prod_cat_id\r\n                                displayName = it.value.data[position].prod_cat_name\r\n                                displayThumbnail = it.value.data[position].display_thumbnail\r\n                                description = it.value.data[position].description\r\n                                colorCode = it.value.data[position].color_code\r\n\r\n                                when(position){\r\n//                                    0 -> {\r\n//                                        val intent = Intent(requireContext(), StartShootActivity::class.java)\r\n//                                        intent.putExtra(\r\n//                                            AppConstants.CATEGORY_NAME,\r\n//                                            displayName\r\n//                                        )\r\n//                                        intent.putExtra(\r\n//                                            AppConstants.CATEGORY_ID,\r\n//                                            catId\r\n//                                        )\r\n//                                        intent.putExtra(\r\n//                                            AppConstants.IMAGE_URL,\r\n//                                            displayThumbnail\r\n//                                        )\r\n//                                        intent.putExtra(\r\n//                                            AppConstants.DESCRIPTION,\r\n//                                            description\r\n//                                        )\r\n//                                        intent.putExtra(AppConstants.COLOR, colorCode)\r\n//                                        startActivity(intent)\r\n//                                    }\r\n//                                    1 -> {\r\n//                                        val intent = Intent(requireContext(), ShootActivity::class.java)\r\n//                                        intent.putExtra(\r\n//                                            AppConstants.CATEGORY_NAME,\r\n//                                            displayName\r\n//                                        )\r\n//                                        intent.putExtra(\r\n//                                            AppConstants.CATEGORY_ID,\r\n//                                            catId\r\n//                                        )\r\n//                                        intent.putExtra(\r\n//                                            AppConstants.IMAGE_URL,\r\n//                                            displayThumbnail\r\n//                                        )\r\n//                                        intent.putExtra(\r\n//                                            AppConstants.DESCRIPTION,\r\n//                                            description\r\n//                                        )\r\n//                                        intent.putExtra(AppConstants.COLOR, colorCode)\r\n//                                        startActivity(intent)\r\n//                                    }\r\n\r\n                                    0, 1 -> {\r\n                                        val intent = Intent(requireContext(), ShootPortraitActivity::class.java)\r\n                                        intent.putExtra(\r\n                                            AppConstants.CATEGORY_NAME,\r\n                                            displayName\r\n                                        )\r\n                                        intent.putExtra(\r\n                                            AppConstants.CATEGORY_ID,\r\n                                            catId\r\n                                        )\r\n                                        intent.putExtra(\r\n                                            AppConstants.IMAGE_URL,\r\n                                            displayThumbnail\r\n                                        )\r\n                                        intent.putExtra(\r\n                                            AppConstants.DESCRIPTION,\r\n                                            description\r\n                                        )\r\n                                        intent.putExtra(AppConstants.COLOR, colorCode)\r\n                                        startActivity(intent)\r\n                                    }\r\n                                    else -> {\r\n                                        Toast.makeText(\r\n                                            requireContext(),\r\n                                            \"Coming Soon !\",\r\n                                            Toast.LENGTH_SHORT\r\n                                        ).show()\r\n                                    }\r\n                                }\r\n\r\n                            }\r\n\r\n                        })\r\n                    val layoutManager: RecyclerView.LayoutManager = LinearLayoutManager(\r\n                        requireContext(),\r\n                        LinearLayoutManager.HORIZONTAL,\r\n                        false\r\n                    )\r\n                    binding.rvDashboardCategories.setLayoutManager(layoutManager)\r\n                    binding.rvDashboardCategories.setAdapter(categoriesAdapter)\r\n//                    categoriesAdapter.notifyDataSetChanged()\r\n                }\r\n                is Resource.Loading -> {\r\n                    binding.shimmerCategories.startShimmer()\r\n                }\r\n                is Resource.Failure -> {\r\n                    requireContext().captureFailureEvent(\r\n                        Events.GET_CATEGORIES_FAILED, HashMap<String,Any?>(),\r\n                        it.errorMessage!!\r\n                    )\r\n                    handleApiError(it)\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    private fun welcomeHomeText() {\r\n        if (Utilities.getPreference(requireContext(), AppConstants.USER_NAME).toString() != \"\") {\r\n            binding.tvWelcomeHome.visibility = View.VISIBLE\r\n            binding.viewWelcome.visibility = View.VISIBLE\r\n            binding.tvWelcomeHome.setText(\r\n                \"Welcome \" +\r\n                        Utilities.getPreference(requireContext(), AppConstants.USER_NAME).toString()\r\n            )\r\n            if (Utilities.getPreference(requireContext(), AppConstants.USER_NAME).toString().trim()\r\n                    .equals(\"default\")\r\n            ) {\r\n                binding.tvWelcomeHome.visibility = View.VISIBLE\r\n                binding.viewWelcome.visibility = View.VISIBLE\r\n                binding.tvWelcomeHome.setText(\"Welcome Home\")\r\n            }\r\n        }\r\n    }\r\n\r\n    fun repeatRefreshData(){\r\n        try {\r\n            getOngoingOrders()\r\n            getCompletedOrders()\r\n            runnable = Runnable {\r\n                if (refreshData)\r\n                    repeatRefreshData()  }\r\n            if (runnable != null)\r\n                handler.postDelayed(runnable!!,10000)\r\n        }catch (e : IllegalArgumentException){\r\n            e.printStackTrace()\r\n        }catch (e : Exception){\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n\r\n    override fun onPause() {\r\n        if (runnable != null)\r\n            handler.removeCallbacks(runnable!!)\r\n        super.onPause()\r\n    }\r\n\r\n\r\n\r\n\r\n    private fun setSliderRecycler() {\r\n\r\n        binding.ivBanner.setSliderThumb(\r\n            ContextCompat.getDrawable(\r\n                requireContext(),\r\n                R.drawable.ic_sliderline\r\n            )\r\n        )\r\n\r\n        tabLayout = binding.tbDashboard\r\n        tabLayout.addTab(tabLayout.newTab());\r\n        tabLayout.addTab(tabLayout.newTab());\r\n\r\n\r\n        binding.ivBanner.setBeforeImage(\r\n            ContextCompat.getDrawable(\r\n                requireContext(),\r\n                R.drawable.footwear_before\r\n            )\r\n        ).setAfterImage(ContextCompat.getDrawable(requireContext(), R.drawable.footwear_after))\r\n        binding.ivNext.setOnClickListener {\r\n            val tab: TabLayout.Tab = binding.tbDashboard.getTabAt(1)!!\r\n            tab.select()\r\n            binding.ivBanner.setBeforeImage(\r\n                ContextCompat.getDrawable(\r\n                    requireContext(),\r\n                    R.drawable.car_before\r\n                )\r\n            ).setAfterImage(ContextCompat.getDrawable(requireContext(), R.drawable.car_after))\r\n        }\r\n\r\n        binding.ivPrevious.setOnClickListener {\r\n            val tab: TabLayout.Tab = binding.tbDashboard.getTabAt(0)!!\r\n            tab.select()\r\n            binding.ivBanner.setBeforeImage(\r\n                ContextCompat.getDrawable(\r\n                    requireContext(),\r\n                    R.drawable.footwear_before\r\n                )\r\n            ).setAfterImage(ContextCompat.getDrawable(requireContext(), R.drawable.footwear_after))\r\n        }\r\n\r\n        tabLayout.addOnTabSelectedListener(object : TabLayout.OnTabSelectedListener {\r\n            override fun onTabSelected(tab: TabLayout.Tab?) {\r\n                if (tab?.position == 0)\r\n                    binding.ivBanner.setBeforeImage(\r\n                        ContextCompat.getDrawable(\r\n                            requireContext(),\r\n                            R.drawable.footwear_before\r\n                        )\r\n                    ).setAfterImage(\r\n                        ContextCompat.getDrawable(\r\n                            requireContext(),\r\n                            R.drawable.footwear_after\r\n                        )\r\n                    )\r\n                else\r\n                    binding.ivBanner.setBeforeImage(\r\n                        ContextCompat.getDrawable(\r\n                            requireContext(),\r\n                            R.drawable.car_before\r\n                        )\r\n                    ).setAfterImage(\r\n                        ContextCompat.getDrawable(\r\n                            requireContext(),\r\n                            R.drawable.car_after\r\n                        )\r\n                    )\r\n            }\r\n\r\n            override fun onTabUnselected(tab: TabLayout.Tab?) {\r\n            }\r\n\r\n            override fun onTabReselected(tab: TabLayout.Tab?) {\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n    private fun lisners() {\r\n        binding.tvCompletedViewall.setOnClickListener {\r\n            val intent = Intent(requireContext(), CompletedProjectsActivity::class.java)\r\n            startActivity(intent)\r\n        }\r\n\r\n        binding.tvOngoingViewall.setOnClickListener {\r\n            val intent = Intent(requireContext(), OngoingOrdersActivity::class.java)\r\n            startActivity(intent)\r\n        }\r\n        binding.btGetStarted.setOnClickListener {\r\n            val intent = Intent(requireContext(), CategoriesActivity::class.java)\r\n            startActivity(intent)\r\n        }\r\n    }\r\n\r\n\r\n\r\n    override fun onResume() {\r\n        super.onResume()\r\n\r\n        appUpdateManager\r\n            .appUpdateInfo\r\n            .addOnSuccessListener { appUpdateInfo ->\r\n                if (appUpdateInfo.updateAvailability()\r\n                    == UpdateAvailability.DEVELOPER_TRIGGERED_UPDATE_IN_PROGRESS\r\n                ) {\r\n                    // If an in-app update is already running, resume the update.\r\n                    appUpdateManager.startUpdateFlowForResult(\r\n                        appUpdateInfo,\r\n                        AppUpdateType.IMMEDIATE,\r\n                        this,\r\n                        MY_REQUEST_CODE\r\n                    )\r\n                }\r\n            }\r\n    }\r\n\r\n    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\r\n        super.onActivityResult(requestCode, resultCode, data)\r\n        if (requestCode == MY_REQUEST_CODE) {\r\n            if (resultCode != AppCompatActivity.RESULT_OK) {\r\n                activity?.moveTaskToBack(true)\r\n                activity?.finish()\r\n                Toast.makeText(\r\n                    requireContext(),\r\n                    \"Update flow failed!\" + requestCode,\r\n                    Toast.LENGTH_SHORT\r\n                ).show()\r\n\r\n                log(\"MY_APP\\\", \\\"Update flow failed! Result code: \"+resultCode)\r\n                // If the update is cancelled or fails,\r\n                // you can request to start the update again.\r\n            }\r\n        }\r\n    }\r\n\r\n    override fun getViewModel() = DashboardViewModel::class.java\r\n\r\n    override fun getFragmentBinding(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?\r\n    ) = HomeDashboardFragmentBinding.inflate(inflater, container, false)\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/lal10/java/com/spyneai/dashboard/ui/HomeDashboardFragment.kt b/app/src/lal10/java/com/spyneai/dashboard/ui/HomeDashboardFragment.kt
--- a/app/src/lal10/java/com/spyneai/dashboard/ui/HomeDashboardFragment.kt	
+++ b/app/src/lal10/java/com/spyneai/dashboard/ui/HomeDashboardFragment.kt	
@@ -33,8 +33,7 @@
 import com.spyneai.adapter.CategoriesDashboardAdapter
 import com.spyneai.base.BaseFragment
 import com.spyneai.base.network.Resource
-import com.spyneai.captureEvent
-import com.spyneai.captureFailureEvent
+
 import com.spyneai.dashboard.adapters.CompletedDashboardAdapter
 import com.spyneai.dashboard.adapters.OngoingDashboardAdapter
 import com.spyneai.dashboard.adapters.TutorialVideosAdapter
Index: app/src/cars24/java/com/spyneai/dashboard/ui/HomeDashboardFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.spyneai.dashboard.ui\r\n\r\nimport android.app.Dialog\r\nimport android.content.Intent\r\nimport android.graphics.Color\r\nimport android.graphics.drawable.ColorDrawable\r\nimport android.os.Bundle\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.view.Window\r\nimport android.widget.LinearLayout\r\nimport android.widget.TextView\r\nimport androidx.lifecycle.Observer\r\nimport com.posthog.android.Properties\r\nimport com.spyneai.R\r\nimport com.spyneai.activity.CompletedProjectsActivity\r\nimport com.spyneai.activity.OngoingOrdersActivity\r\nimport com.spyneai.adapter.CategoriesDashboardAdapter\r\nimport com.spyneai.base.BaseFragment\r\nimport com.spyneai.base.network.Resource\r\nimport com.spyneai.captureEvent\r\nimport com.spyneai.captureFailureEvent\r\nimport com.spyneai.dashboard.data.DashboardViewModel\r\nimport com.spyneai.databinding.HomeDashboardFragmentBinding\r\nimport com.spyneai.fragment.TopUpFragment\r\nimport com.spyneai.needs.AppConstants\r\nimport com.spyneai.needs.Utilities\r\nimport com.spyneai.orders.ui.MyOrdersActivity\r\nimport com.spyneai.posthog.Events\r\n\r\n\r\nclass HomeDashboardFragment :\r\n    BaseFragment<DashboardViewModel, HomeDashboardFragmentBinding>() {\r\n\r\n    lateinit var btnlistener: CategoriesDashboardAdapter.BtnClickListener\r\n\r\n    var categoryPosition: Int = 0\r\n    lateinit var tokenId: String\r\n    lateinit var email: String\r\n\r\n    lateinit var catId: String\r\n    lateinit var displayName: String\r\n    lateinit var displayThumbnail: String\r\n    lateinit var description: String\r\n    lateinit var colorCode: String\r\n\r\n\r\n    override fun onActivityCreated(savedInstanceState: Bundle?) {\r\n        super.onActivityCreated(savedInstanceState)\r\n\r\n        tokenId = Utilities.getPreference(requireContext(), AppConstants.TOKEN_ID).toString()\r\n        email = Utilities.getPreference(requireContext(), AppConstants.EMAIL_ID).toString()\r\n\r\n        lisners()\r\n\r\n        viewModel.getCategories(Utilities.getPreference(requireContext(),AppConstants.AUTH_KEY).toString())\r\n        viewModel.categoriesResponse.observe(viewLifecycleOwner, Observer {\r\n            when(it){\r\n                is Resource.Success -> {\r\n                    requireContext().captureEvent(Events.GOT_CATEGORIES, HashMap<String,Any?>())\r\n\r\n                }\r\n                is Resource.Loading -> {\r\n\r\n                }\r\n                is Resource.Failure -> {\r\n                    requireContext().captureFailureEvent(Events.GET_CATEGORIES_FAILED, HashMap<String,Any?>(),\r\n                        it.errorMessage!!)\r\n\r\n                    handleApiError(it)\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    private fun lisners(){\r\n        binding.llDrafts.setOnClickListener {\r\n            val intent = Intent(requireContext(), MyOrdersActivity::class.java)\r\n            intent.putExtra(\"TAB_ID\", 0)\r\n            startActivity(intent)\r\n        }\r\n\r\n        binding.llCompleted.setOnClickListener {\r\n            val intent = Intent(requireContext(), MyOrdersActivity::class.java)\r\n            intent.putExtra(\"TAB_ID\", 2)\r\n            startActivity(intent)\r\n        }\r\n\r\n        binding.llOngoing.setOnClickListener {\r\n            val intent = Intent(requireContext(), MyOrdersActivity::class.java)\r\n            intent.putExtra(\"TAB_ID\", 1)\r\n            startActivity(intent)\r\n        }\r\n    }\r\n\r\n\r\n    override fun getViewModel() = DashboardViewModel::class.java\r\n\r\n    override fun getFragmentBinding(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?\r\n    ) = HomeDashboardFragmentBinding.inflate(inflater, container, false)\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/cars24/java/com/spyneai/dashboard/ui/HomeDashboardFragment.kt b/app/src/cars24/java/com/spyneai/dashboard/ui/HomeDashboardFragment.kt
--- a/app/src/cars24/java/com/spyneai/dashboard/ui/HomeDashboardFragment.kt	
+++ b/app/src/cars24/java/com/spyneai/dashboard/ui/HomeDashboardFragment.kt	
@@ -19,8 +19,7 @@
 import com.spyneai.adapter.CategoriesDashboardAdapter
 import com.spyneai.base.BaseFragment
 import com.spyneai.base.network.Resource
-import com.spyneai.captureEvent
-import com.spyneai.captureFailureEvent
+
 import com.spyneai.dashboard.data.DashboardViewModel
 import com.spyneai.databinding.HomeDashboardFragmentBinding
 import com.spyneai.fragment.TopUpFragment
Index: app/src/main/java/com/spyneai/service/ImageUploadingService.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.spyneai.service\r\n\r\nimport android.app.*\r\nimport android.content.BroadcastReceiver\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.content.IntentFilter\r\nimport android.graphics.Color\r\nimport android.os.*\r\nimport com.spyneai.*\r\nimport com.spyneai.dashboard.ui.FoodSDKHome\r\nimport com.spyneai.dashboard.ui.MainDashboardActivity\r\nimport com.spyneai.needs.AppConstants\r\nimport com.spyneai.posthog.Events\r\nimport com.spyneai.shoot.repository.model.image.Image\r\n\r\n\r\nclass ImageUploadingService : Service(), DataSyncListener {\r\n\r\n    private var wakeLock: PowerManager.WakeLock? = null\r\n    lateinit var notificationManager: NotificationManager\r\n    lateinit var channel: NotificationChannel\r\n    lateinit var builder: Notification.Builder\r\n    private var receiver: InternetConnectionReceiver? = null\r\n    private var imageUploader: ImageUploader? = null\r\n    private var prjSync: ProjectSkuSync? = null\r\n    private var processSkuSync: ProcessSkuSync? = null\r\n    private var notificationId = 0\r\n    val notificationChannelId = \"PROCESSING SERVICE CHANNEL\"\r\n    var currentImage: Image? = null\r\n    val TAG = \"ImageUploader\"\r\n    var serviceStartedBy: String? = null\r\n\r\n    override fun onDestroy() {\r\n        super.onDestroy()\r\n        if (receiver != null)\r\n            unregisterReceiver(receiver)\r\n    }\r\n\r\n    override fun onCreate() {\r\n        super.onCreate()\r\n        setServiceState(this, ServiceState.STARTED)\r\n\r\n        //register internet connection receiver\r\n        this.receiver = InternetConnectionReceiver()\r\n        val filter = IntentFilter()\r\n        filter.addAction(\"android.net.conn.CONNECTIVITY_CHANGE\")\r\n        this.registerReceiver(receiver, filter)\r\n\r\n        wakeLock = (getSystemService(Context.POWER_SERVICE) as PowerManager).run {\r\n            newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, \"ProcessService::lock\").apply {\r\n                acquire()\r\n            }\r\n        }\r\n\r\n        notificationManager =\r\n            getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager\r\n\r\n        fetchDataAndStartService()\r\n    }\r\n\r\n    override fun onBind(intent: Intent?): IBinder? {\r\n        return null\r\n    }\r\n\r\n\r\n    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {\r\n        if (intent == null)\r\n            return START_STICKY\r\n\r\n        val action = intent.action\r\n\r\n        when (action) {\r\n            Actions.START.name -> {\r\n                this.serviceStartedBy = intent.getStringExtra(AppConstants.SERVICE_STARTED_BY)\r\n\r\n                when (intent.getSerializableExtra(AppConstants.SYNC_TYPE)) {\r\n                    ServerSyncTypes.CREATE -> {\r\n                        startProjectSync(\"onStartCommand\")\r\n                    }\r\n\r\n                    ServerSyncTypes.PROCESS -> {\r\n                        startProcessSync(\"onStartCommand\")\r\n                    }\r\n\r\n                    ServerSyncTypes.UPLOAD -> {\r\n                        val properties = java.util.HashMap<String, Any?>()\r\n                            .apply {\r\n                                put(\"service_state\", \"Started\")\r\n                                put(\"medium\", \"Image Uploading Service\")\r\n                            }\r\n\r\n                        captureEvent(Events.SERVICE_STARTED, properties)\r\n                        resumeUpload(\"onStartCommand\")\r\n                    }\r\n                }\r\n            }\r\n            Actions.STOP.name -> stopService()\r\n            else -> error(\"No action in the received intent\")\r\n        }\r\n\r\n        return START_STICKY\r\n    }\r\n\r\n\r\n    private fun fetchDataAndStartService() {\r\n        createOngoingNotificaiton()\r\n    }\r\n\r\n    private fun createOngoingNotificaiton() {\r\n        notificationId = 100\r\n        val title = getString(R.string.app_name)\r\n        val text = getString(R.string.image_uploading_in_progess)\r\n        var notification = createNotification(title, text, true)\r\n\r\n        notificationManager.notify(notificationId, notification)\r\n        startForeground(notificationId, notification)\r\n    }\r\n\r\n    private fun createNotification(title: String, text: String, isOngoing: Boolean): Notification {\r\n        // depending on the Android API that we're dealing with we will have\r\n        // to use a specific method to create the notification\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\r\n            channel = NotificationChannel(\r\n                notificationChannelId,\r\n                \"Process Images Service notifications channel\",\r\n                NotificationManager.IMPORTANCE_HIGH\r\n            ).let {\r\n                it.description = \"Process Images Service channel\"\r\n                it.enableLights(true)\r\n                it.lightColor = Color.RED\r\n                it.enableVibration(false)\r\n                it\r\n            }\r\n            notificationManager.createNotificationChannel(channel)\r\n        }\r\n\r\n        val pendingIntent : PendingIntent = if (getString(R.string.app_name) == AppConstants.SWIGGY\r\n            || getString(R.string.app_name) == AppConstants.ZOMATO ||\r\n            getString(R.string.app_name) == AppConstants.FOODPANDA) {\r\n            Intent(this, FoodSDKHome::class.java).let { notificationIntent ->\r\n                PendingIntent.getActivity(this, 0, notificationIntent, 0)\r\n            }\r\n        } else {\r\n            Intent(this, MainDashboardActivity::class.java).let { notificationIntent ->\r\n                PendingIntent.getActivity(this, 0, notificationIntent, 0)\r\n            }\r\n        }\r\n\r\n    builder =\r\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) Notification.Builder(\r\n    this,\r\n    notificationChannelId\r\n    ) else\r\n    Notification.Builder(this)\r\n\r\n    return builder\r\n    .setContentTitle(title)\r\n    .setContentText(text)\r\n    .setContentIntent(pendingIntent)\r\n    .setSmallIcon(R.drawable.app_logo)\r\n    .setOngoing(isOngoing)\r\n    .setAutoCancel(isOngoing)\r\n    .setOnlyAlertOnce(true)\r\n    .setPriority(Notification.PRIORITY_HIGH) // for under android 26 compatibility\r\n    .build()\r\n\r\n}\r\n\r\nprivate fun stopService() {\r\n    try {\r\n        wakeLock?.let {\r\n            if (it.isHeld) {\r\n                it.release()\r\n            }\r\n        }\r\n\r\n        stopForeground(false)\r\n        stopSelf()\r\n\r\n        //Utilities.saveBool(this, AppConstants.UPLOADING_RUNNING, false)\r\n        //cancel all jobs started by service\r\n\r\n\r\n    } catch (e: Exception) {\r\n        val properties = java.util.HashMap<String, Any?>()\r\n            .apply {\r\n                put(\"type\", e::class.java.simpleName)\r\n                put(\"error\", e.message)\r\n            }\r\n\r\n        captureEvent(\"SERVICE_STOPPED_EXCEPTION\", properties)\r\n    }\r\n\r\n    setServiceState(this, ServiceState.STOPPED)\r\n}\r\n\r\n\r\noverride fun inProgress(title: String, type: ServerSyncTypes) {\r\n    val internet =\r\n        if (isInternetActive()) getString(R.string.active) else getString(R.string.disconnected)\r\n    val finalContent = getString(R.string.innter_connection_label) + internet\r\n    var notification = createNotification(title, finalContent, true)\r\n\r\n    notificationManager.notify(notificationId, notification)\r\n\r\n//        if (type == ServerSyncTypes.UPLOAD)\r\n}\r\n\r\noverride fun onCompleted(title: String, type: ServerSyncTypes) {\r\n\r\n    val internet =\r\n        if (isInternetActive()) getString(R.string.active) else getString(R.string.disconnected)\r\n    val content = getString(R.string.innter_connection_label) + internet\r\n    var notification = createNotification(title, content, true)\r\n\r\n    notificationManager.notify(notificationId, notification)\r\n\r\n    //update notification after five minutes\r\n    if (allDataSynced()) {\r\n        Handler(Looper.getMainLooper()).postDelayed({\r\n            val title = getString(R.string.all_uploaded)\r\n            val internet =\r\n                if (isInternetActive()) getString(R.string.active) else getString(R.string.disconnected)\r\n            val content = getString(R.string.innter_connection_label) + internet\r\n            var notification = createNotification(title, content, false)\r\n\r\n            notificationManager.notify(notificationId, notification)\r\n            stopService()\r\n        }, 180000)\r\n    }\r\n}\r\n\r\n\r\noverride fun onConnectionLost(title: String, type: ServerSyncTypes) {\r\n    captureEvent(Events.INTERNET_DISCONNECTED,\r\n        HashMap<String, Any?>().apply {\r\n            put(\"medium\", \"Service\")\r\n        })\r\n\r\n    val internet =\r\n        if (isInternetActive()) getString(R.string.active) else getString(R.string.disconnected)\r\n    val content = getString(R.string.innter_connection_label) + internet\r\n    var notification = createNotification(title, content, true)\r\n\r\n    notificationManager.notify(notificationId, notification)\r\n}\r\n\r\ninner class InternetConnectionReceiver : BroadcastReceiver() {\r\n    override fun onReceive(context: Context?, intent: Intent?) {\r\n\r\n        val isConnected = context?.isInternetActive()\r\n\r\n        if (isConnected == true) {\r\n            //push event of internet connected\r\n            captureEvent(\r\n                Events.INTERNET_CONNECTED,\r\n                HashMap<String, Any?>().apply {\r\n                    put(\"medium\", \"Service\")\r\n                })\r\n\r\n            prjSync?.connectionLost = false\r\n            processSkuSync?.connectionLost = false\r\n            imageUploader?.connectionLost = false\r\n\r\n            checkPendingDataSync()\r\n\r\n//               GlobalScope.launch(Dispatchers.IO) {\r\n//                   val db = AppDatabase.getInstance(BaseApplication.getContext())\r\n//                   val shootLocalRepository = ImagesRepoV2(db.imageDao())\r\n//                   if (shootLocalRepository.getOldestImage() != null\r\n//                   ) {\r\n//\r\n//                       resumeUpload(\"onReceive\")\r\n//                   }\r\n//\r\n//                   val pendingProjects = db.projectDao().getPendingProjects()\r\n//\r\n//                   if (pendingProjects > 0){\r\n//                       startProjectSync(\"onReceive\")\r\n//                   }\r\n//\r\n//                   val pendingSkus = db.skuDao().getPendingSku()\r\n//\r\n//                   if (pendingSkus > 0){\r\n//                       startProcessSync(\"onReceive\")\r\n//                   }\r\n//               }\r\n\r\n        } else {\r\n            //push event of internet not connected\r\n            captureEvent(Events.INTERNET_DISCONNECTED,\r\n                HashMap<String, Any?>().apply {\r\n                    put(\"medium\", \"Service\")\r\n                })\r\n\r\n            prjSync?.connectionLost = true\r\n            processSkuSync?.connectionLost = true\r\n            imageUploader?.connectionLost = true\r\n        }\r\n    }\r\n}\r\n\r\nprivate fun resumeUpload(type: String) {\r\n    imageUploader = ImageUploader.getInstance(this, this)\r\n    imageUploader?.uploadParent(type, serviceStartedBy)\r\n}\r\n\r\nprivate fun startProjectSync(type: String) {\r\n    prjSync = ProjectSkuSync.getInstance(this, this)\r\n\r\n    prjSync?.projectSyncParent(type, serviceStartedBy)\r\n}\r\n\r\n\r\nprivate fun startProcessSync(type: String) {\r\n    processSkuSync = ProcessSkuSync.getInstance(\r\n        this, this\r\n    )\r\n\r\n    processSkuSync?.processSkuParent(type, serviceStartedBy)\r\n}\r\n\r\n}
===================================================================
diff --git a/app/src/main/java/com/spyneai/service/ImageUploadingService.kt b/app/src/main/java/com/spyneai/service/ImageUploadingService.kt
--- a/app/src/main/java/com/spyneai/service/ImageUploadingService.kt	
+++ b/app/src/main/java/com/spyneai/service/ImageUploadingService.kt	
@@ -7,11 +7,15 @@
 import android.content.IntentFilter
 import android.graphics.Color
 import android.os.*
-import com.spyneai.*
+import com.spyneai.R
+import com.spyneai.allDataSynced
+import com.spyneai.checkPendingDataSync
 import com.spyneai.dashboard.ui.FoodSDKHome
 import com.spyneai.dashboard.ui.MainDashboardActivity
+import com.spyneai.isInternetActive
 import com.spyneai.needs.AppConstants
 import com.spyneai.posthog.Events
+import com.spyneai.posthog.captureEvent
 import com.spyneai.shoot.repository.model.image.Image
 
 
Index: app/src/zomato/java/com/spyneai/dashboard/ui/HomeDashboardFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.spyneai.dashboard.ui\r\n\r\n\r\nimport android.app.Dialog\r\nimport android.content.Intent\r\nimport android.graphics.Color\r\nimport android.graphics.drawable.ColorDrawable\r\nimport android.os.Bundle\r\nimport android.os.Handler\r\nimport android.text.TextUtils.replace\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.view.Window\r\nimport android.widget.LinearLayout\r\nimport android.widget.TextView\r\nimport android.widget.Toast\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.core.content.ContextCompat\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.lifecycle.Observer\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.google.android.material.tabs.TabLayout\r\nimport com.google.android.play.core.appupdate.AppUpdateManager\r\nimport com.google.android.play.core.appupdate.AppUpdateManagerFactory\r\nimport com.google.android.play.core.install.model.AppUpdateType\r\nimport com.google.android.play.core.install.model.UpdateAvailability\r\nimport com.google.android.play.core.ktx.startUpdateFlowForResult\r\nimport com.google.gson.Gson\r\nimport com.spyneai.R\r\nimport com.spyneai.activity.CategoriesActivity\r\nimport com.spyneai.activity.CompletedProjectsActivity\r\n\r\nimport com.spyneai.adapter.CategoriesDashboardAdapter\r\nimport com.spyneai.base.BaseFragment\r\nimport com.spyneai.base.network.Resource\r\nimport com.spyneai.captureEvent\r\nimport com.spyneai.captureFailureEvent\r\n\r\nimport com.spyneai.dashboard.data.DashboardViewModel\r\nimport com.spyneai.dashboard.data.model.LayoutHolder\r\nimport com.spyneai.dashboard.response.NewCategoriesResponse\r\nimport com.spyneai.databinding.HomeDashboardFragmentBinding\r\nimport com.spyneai.needs.AppConstants\r\nimport com.spyneai.needs.Utilities\r\nimport com.spyneai.orders.data.response.GetProjectsResponse\r\nimport com.spyneai.posthog.Events\r\nimport com.spyneai.shoot.data.model.ProjectDetailResponse\r\nimport com.spyneai.shoot.ui.base.ShootPortraitActivity\r\nimport com.spyneai.shoot.utils.log\r\n\r\n\r\nclass HomeDashboardFragment :\r\n    BaseFragment<DashboardViewModel, HomeDashboardFragmentBinding>() {\r\n\r\n    lateinit var btnlistener: CategoriesDashboardAdapter.BtnClickListener\r\n\r\n    lateinit var categoriesAdapter: CategoriesDashboardAdapter\r\n\r\n//    lateinit var ongoingDashboardAdapter: OngoingDashboardAdapter\r\n//\r\n//    lateinit var completedDashboardAdapter: CompletedDashboardAdapter\r\n    lateinit var completedProjectList: ArrayList<GetProjectsResponse.Project_data>\r\n    lateinit var ongoingProjectList: ArrayList<GetProjectsResponse.Project_data>\r\n\r\n    lateinit var handler: Handler\r\n    private var runnable: Runnable? = null\r\n\r\n   // lateinit var tutorialVideosAdapter: TutorialVideosAdapter\r\n\r\n    var categoryPosition: Int = 0\r\n    lateinit var tokenId: String\r\n    lateinit var email: String\r\n\r\n    lateinit var catId: String\r\n    lateinit var displayName: String\r\n    lateinit var displayThumbnail: String\r\n    lateinit var description: String\r\n    lateinit var colorCode: String\r\n    private var refreshData = true\r\n    private lateinit var tabLayout: TabLayout\r\n\r\n    lateinit var appUpdateManager: AppUpdateManager\r\n    private val MY_REQUEST_CODE: Int = 1\r\n    lateinit var PACKAGE_NAME: String\r\n\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        handler = Handler()\r\n\r\n        tokenId = Utilities.getPreference(requireContext(), AppConstants.TOKEN_ID).toString()\r\n        email = Utilities.getPreference(requireContext(), AppConstants.EMAIL_ID).toString()\r\n\r\n        PACKAGE_NAME = requireContext().getPackageName().toString()\r\n        appUpdateManager = AppUpdateManagerFactory.create(requireContext())\r\n\r\n//        if (PACKAGE_NAME.equals(\"com.spyneai.swiggy.debug\")) {\r\n//            newUserCreditDialog()\r\n            repeatRefreshData()\r\n            setSliderRecycler()\r\n            lisners()\r\n            welcomeHomeText()\r\n            getCategories()\r\n//        } else\r\n//            autoUpdates()\r\n    }\r\n\r\n    private fun autoUpdates() {\r\n\r\n        val appUpdateInfoTask = appUpdateManager.appUpdateInfo\r\n        appUpdateInfoTask.addOnSuccessListener { appUpdateInfo ->\r\n            if (appUpdateInfo.updateAvailability() == UpdateAvailability.UPDATE_AVAILABLE\r\n                && appUpdateInfo.isUpdateTypeAllowed(AppUpdateType.IMMEDIATE)\r\n            ) {\r\n\r\n                // Request the update.\r\n                appUpdateManager.startUpdateFlowForResult(\r\n                    // Pass the intent that is returned by 'getAppUpdateInfo()'.\r\n                    appUpdateInfo,\r\n                    // Or 'AppUpdateType.FLEXIBLE' for flexible updates.\r\n                    AppUpdateType.IMMEDIATE,\r\n                    // The current activity making the update request.\r\n                    this,\r\n                    // Include a request code to later monitor this update request.\r\n                    MY_REQUEST_CODE\r\n                )\r\n            } else {\r\n//                newUserCreditDialog()\r\n                repeatRefreshData()\r\n                setSliderRecycler()\r\n                lisners()\r\n                welcomeHomeText()\r\n                getCategories()\r\n            }\r\n        }\r\n    }\r\n\r\n//    private fun getOngoingOrders() {\r\n//        log(\"Completed SKUs(auth key): \"+ Utilities.getPreference(requireContext(), AppConstants.AUTH_KEY))\r\n//\r\n//        viewModel.getProjects(Utilities.getPreference(requireContext(), AppConstants.AUTH_KEY).toString(), \"ongoing\")\r\n//\r\n//        viewModel.getProjectsResponse.observe(\r\n//            viewLifecycleOwner, Observer {\r\n//                when (it) {\r\n//                    is Resource.Success -> {\r\n//                        binding.rvOngoingShoots.visibility = View.VISIBLE\r\n//                        binding.shimmerOngoing.stopShimmer()\r\n//                        binding.shimmerOngoing.visibility = View.GONE\r\n//                        if (it.value.data.project_data.isNullOrEmpty()) {\r\n//                            binding.rlOngoingShoots.visibility = View.GONE\r\n//                            refreshData = false\r\n//                        }\r\n//\r\n//                        if (it.value.data != null) {\r\n//                            ongoingProjectList = ArrayList()\r\n//                            ongoingProjectList.clear()\r\n//                            ongoingProjectList.addAll(it.value.data.project_data)\r\n//                            ongoingDashboardAdapter = OngoingDashboardAdapter(\r\n//                                requireContext(),\r\n//                                ongoingProjectList\r\n//                            )\r\n//\r\n//                            val layoutManager: RecyclerView.LayoutManager = LinearLayoutManager(\r\n//                                requireContext(),\r\n//                                LinearLayoutManager.HORIZONTAL,\r\n//                                false\r\n//                            )\r\n//                            binding.rvOngoingShoots.setLayoutManager(layoutManager)\r\n//                            binding.rvOngoingShoots.setAdapter(ongoingDashboardAdapter)\r\n//\r\n//                        }\r\n//                    }\r\n//                    is Resource.Loading -> {\r\n//                        binding.shimmerOngoing.startShimmer()\r\n//                    }\r\n//                    is Resource.Failure -> {\r\n//                        binding.shimmerOngoing.stopShimmer()\r\n//                        binding.shimmerOngoing.visibility = View.GONE\r\n//\r\n//                        if (it.errorCode == 404) {\r\n//                            binding.rlOngoingShoots.visibility = View.GONE\r\n//                            refreshData = false\r\n//                        } else {\r\n//                            requireContext().captureFailureEvent(\r\n//                                Events.GET_ONGOING_ORDERS_FAILED, HashMap<String,Any?>(),\r\n//                                it.errorMessage!!\r\n//                            )\r\n//                            handleApiError(it)\r\n//                        }\r\n//                    }\r\n//\r\n//                }\r\n//            }\r\n//        )\r\n//    }\r\n\r\n    private fun newUserCreditDialog() {\r\n        if (viewModel.isNewUser.value == true) {\r\n            showFreeCreditDialog(viewModel.creditsMessage.value.toString())\r\n            viewModel.isNewUser.value = false\r\n        }\r\n    }\r\n\r\n//    private fun getCompletedOrders() {\r\n//\r\n//        viewModel.getCompletedProjects(Utilities.getPreference(requireContext(), AppConstants.AUTH_KEY).toString(), \"completed\")\r\n//\r\n//        log(\"Completed SKUs(auth key): \"+ Utilities.getPreference(requireContext(), AppConstants.AUTH_KEY))\r\n//        viewModel.getCompletedProjectsResponse.observe(\r\n//            viewLifecycleOwner, Observer {\r\n//                when (it) {\r\n//                    is Resource.Success -> {\r\n//\r\n//                        requireContext().captureEvent(Events.GET_COMPLETED_ORDERS, HashMap<String,Any?>())\r\n//                        completedProjectList = ArrayList()\r\n//                        if (it.value.data.project_data.isNullOrEmpty()) {\r\n//                            binding.rlCompletedShoots.visibility = View.GONE\r\n//                            refreshData = false\r\n//                        }\r\n//\r\n//                        binding.rvCompletedShoots.visibility = View.VISIBLE\r\n//                        binding.shimmerCompleted.stopShimmer()\r\n//                        binding.shimmerCompleted.visibility = View.GONE\r\n//                        if (it.value.data != null) {\r\n//                            completedProjectList.clear()\r\n//                            completedProjectList.addAll(it.value.data.project_data)\r\n//\r\n//                            completedDashboardAdapter = CompletedDashboardAdapter(\r\n//                                requireContext(),\r\n//                                completedProjectList\r\n//                            )\r\n//\r\n//                            val layoutManager: RecyclerView.LayoutManager = LinearLayoutManager(\r\n//                                requireContext(),\r\n//                                LinearLayoutManager.HORIZONTAL,\r\n//                                false\r\n//                            )\r\n//                            binding.rvCompletedShoots.setLayoutManager(layoutManager)\r\n//                            binding.rvCompletedShoots.setAdapter(completedDashboardAdapter)\r\n//                        }\r\n//\r\n//                    }\r\n//                    is Resource.Loading -> {\r\n//                        binding.shimmerCompleted.startShimmer()\r\n//                    }\r\n//                    is Resource.Failure -> {\r\n//                        binding.shimmerCompleted.stopShimmer()\r\n//                        binding.shimmerCompleted.visibility = View.GONE\r\n//\r\n//                        if (it.errorCode == 404) {\r\n//                            binding.rlCompletedShoots.visibility = View.GONE\r\n//                            refreshData = false\r\n//                        } else {\r\n//                            requireContext().captureFailureEvent(\r\n//                                Events.GET_COMPLETED_ORDERS_FAILED, HashMap<String,Any?>(),\r\n//                                it.errorMessage!!\r\n//                            )\r\n//                            handleApiError(it)\r\n//                        }\r\n//                    }\r\n//\r\n//                }\r\n//            }\r\n//        )\r\n//\r\n//    }\r\n\r\n    private fun getCategories() {\r\n        viewModel.getCategories(\r\n            Utilities.getPreference(requireContext(), AppConstants.AUTH_KEY).toString()\r\n        )\r\n\r\n//        viewModel.categoriesResponse.observe(viewLifecycleOwner, Observer {\r\n//            when (it) {\r\n//                is Resource.Success -> {\r\n//\r\n//                    if (it.value.data.size == 1)\r\n//                    Utilities.savePrefrence(requireContext(), AppConstants.CATEGORY_NAME, it.value.data[0].prod_cat_name)\r\n//\r\n//                    LayoutHolder.data = it.value.data\r\n//                    requireContext().captureEvent(Events.GOT_CATEGORIES, HashMap<String,Any?>())\r\n//\r\n//                    binding.shimmerCategories.stopShimmer()\r\n//                    binding.shimmerCategories.visibility = View.GONE\r\n//                    binding.rvDashboardCategories.visibility = View.VISIBLE\r\n//\r\n//                    categoriesAdapter = CategoriesDashboardAdapter(requireContext(),\r\n//                        it.value.data as ArrayList<NewCategoriesResponse.Data>,\r\n//                        object : CategoriesDashboardAdapter.BtnClickListener {\r\n//                            override fun onBtnClick(position: Int) {\r\n//\r\n//                                LayoutHolder.categoryPosition = position\r\n//\r\n//                                Utilities.savePrefrence(requireContext(), AppConstants.CATEGORY_ID, it.value.data[position].prod_cat_id)\r\n//                                Utilities.savePrefrence(requireContext(), AppConstants.CATEGORY_NAME, it.value.data[position].prod_cat_name)\r\n//\r\n//                                catId = it.value.data[position].prod_cat_id\r\n//                                displayName = it.value.data[position].prod_cat_name\r\n//                                displayThumbnail = it.value.data[position].display_thumbnail\r\n//                                description = it.value.data[position].description\r\n//                                colorCode = it.value.data[position].color_code\r\n//\r\n//                                when(position){\r\n////                                    0 -> {\r\n////                                        val intent = Intent(requireContext(), StartShootActivity::class.java)\r\n////                                        intent.putExtra(\r\n////                                            AppConstants.CATEGORY_NAME,\r\n////                                            displayName\r\n////                                        )\r\n////                                        intent.putExtra(\r\n////                                            AppConstants.CATEGORY_ID,\r\n////                                            catId\r\n////                                        )\r\n////                                        intent.putExtra(\r\n////                                            AppConstants.IMAGE_URL,\r\n////                                            displayThumbnail\r\n////                                        )\r\n////                                        intent.putExtra(\r\n////                                            AppConstants.DESCRIPTION,\r\n////                                            description\r\n////                                        )\r\n////                                        intent.putExtra(AppConstants.COLOR, colorCode)\r\n////                                        startActivity(intent)\r\n////                                    }\r\n////                                    1 -> {\r\n////                                        val intent = Intent(requireContext(), ShootActivity::class.java)\r\n////                                        intent.putExtra(\r\n////                                            AppConstants.CATEGORY_NAME,\r\n////                                            displayName\r\n////                                        )\r\n////                                        intent.putExtra(\r\n////                                            AppConstants.CATEGORY_ID,\r\n////                                            catId\r\n////                                        )\r\n////                                        intent.putExtra(\r\n////                                            AppConstants.IMAGE_URL,\r\n////                                            displayThumbnail\r\n////                                        )\r\n////                                        intent.putExtra(\r\n////                                            AppConstants.DESCRIPTION,\r\n////                                            description\r\n////                                        )\r\n////                                        intent.putExtra(AppConstants.COLOR, colorCode)\r\n////                                        startActivity(intent)\r\n////                                    }\r\n//\r\n//                                    0, 1 -> {\r\n//                                        val intent = Intent(requireContext(), ShootPortraitActivity::class.java)\r\n//                                        val gson = Gson()\r\n//                                        intent.putExtra(\r\n//                                            AppConstants.CATEGORY_NAME,\r\n//                                            displayName\r\n//                                        )\r\n//                                        intent.putExtra(\r\n//                                            AppConstants.CATEGORY_ID,\r\n//                                            catId\r\n//                                        )\r\n//                                        intent.putExtra(\r\n//                                            AppConstants.IMAGE_URL,\r\n//                                            displayThumbnail\r\n//                                        )\r\n//                                        intent.putExtra(\r\n//                                            AppConstants.DESCRIPTION,\r\n//                                            description\r\n//                                        )\r\n//                                        intent.putExtra(AppConstants.COLOR, colorCode)\r\n//                                        startActivity(intent)\r\n//                                    }\r\n//                                    else -> {\r\n//                                        Toast.makeText(\r\n//                                            requireContext(),\r\n//                                            \"Coming Soon !\",\r\n//                                            Toast.LENGTH_SHORT\r\n//                                        ).show()\r\n//                                    }\r\n//                                }\r\n//\r\n//                            }\r\n//\r\n//                        })\r\n//                    val layoutManager: RecyclerView.LayoutManager = LinearLayoutManager(\r\n//                        requireContext(),\r\n//                        LinearLayoutManager.HORIZONTAL,\r\n//                        false\r\n//                    )\r\n//                    binding.rvDashboardCategories.setLayoutManager(layoutManager)\r\n//                    binding.rvDashboardCategories.setAdapter(categoriesAdapter)\r\n////                    categoriesAdapter.notifyDataSetChanged()\r\n//                }\r\n//                is Resource.Loading -> {\r\n//                    binding.shimmerCategories.startShimmer()\r\n//                }\r\n//                is Resource.Failure -> {\r\n//                    requireContext().captureFailureEvent(\r\n//                        Events.GET_CATEGORIES_FAILED, HashMap<String,Any?>(),\r\n//                        it.errorMessage!!\r\n//                    )\r\n//                    handleApiError(it)\r\n//                }\r\n//            }\r\n//        })\r\n    }\r\n\r\n    private fun welcomeHomeText() {\r\n        if (Utilities.getPreference(requireContext(), AppConstants.USER_NAME).toString() != \"\") {\r\n            binding.tvWelcomeHome.visibility = View.VISIBLE\r\n            binding.viewWelcome.visibility = View.VISIBLE\r\n            binding.tvWelcomeHome.setText(\r\n                \"Welcome \" +\r\n                        Utilities.getPreference(requireContext(), AppConstants.USER_NAME).toString()\r\n            )\r\n            if (Utilities.getPreference(requireContext(), AppConstants.USER_NAME).toString().trim()\r\n                    .equals(\"default\")\r\n            ) {\r\n                binding.tvWelcomeHome.visibility = View.VISIBLE\r\n                binding.viewWelcome.visibility = View.VISIBLE\r\n                binding.tvWelcomeHome.setText(\"Welcome Home\")\r\n            }\r\n        }\r\n    }\r\n\r\n    fun repeatRefreshData(){\r\n        try {\r\n           // getOngoingOrders()\r\n            //getCompletedOrders()\r\n            runnable = Runnable {\r\n                if (refreshData)\r\n                    repeatRefreshData()  }\r\n            if (runnable != null)\r\n                handler.postDelayed(runnable!!,10000)\r\n        }catch (e : IllegalArgumentException){\r\n            e.printStackTrace()\r\n        }catch (e : Exception){\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n\r\n    override fun onPause() {\r\n        if (runnable != null)\r\n            handler.removeCallbacks(runnable!!)\r\n        super.onPause()\r\n    }\r\n\r\n\r\n\r\n\r\n    private fun setSliderRecycler() {\r\n\r\n        binding.ivBanner.setSliderThumb(\r\n            ContextCompat.getDrawable(\r\n                requireContext(),\r\n                R.drawable.ic_sliderline\r\n            )\r\n        )\r\n\r\n        tabLayout = binding.tbDashboard\r\n        tabLayout.addTab(tabLayout.newTab());\r\n//        tabLayout.addTab(tabLayout.newTab());\r\n\r\n\r\n        binding.ivBanner.setBeforeImage(\r\n            ContextCompat.getDrawable(\r\n                requireContext(),\r\n                R.drawable.food_before\r\n            )\r\n        ).setAfterImage(ContextCompat.getDrawable(requireContext(), R.drawable.food_after))\r\n    }\r\n\r\n    private fun showFreeCreditDialog(message: String) {\r\n        val dialog = Dialog(requireContext())\r\n        dialog.requestWindowFeature(Window.FEATURE_NO_TITLE)\r\n        dialog.setCancelable(true)\r\n\r\n        var dialogView =\r\n            LayoutInflater.from(requireContext()).inflate(R.layout.free_credit_dialog, null)\r\n        var tvMessage: TextView = dialogView.findViewById(R.id.tvSkuNameDialog)\r\n        tvMessage.text = message\r\n\r\n        dialog.setContentView(dialogView)\r\n\r\n        dialog.getWindow()?.setBackgroundDrawable(ColorDrawable(Color.TRANSPARENT));\r\n        val llOk: LinearLayout = dialog.findViewById(R.id.llOk)\r\n\r\n\r\n        llOk.setOnClickListener(View.OnClickListener {\r\n\r\n            dialog.dismiss()\r\n\r\n        })\r\n        dialog.show()\r\n\r\n    }\r\n\r\n    private fun lisners() {\r\n        binding.tvCompletedViewall.setOnClickListener {\r\n            val intent = Intent(requireContext(), CompletedProjectsActivity::class.java)\r\n            startActivity(intent)\r\n        }\r\n\r\n//        binding.tvOngoingViewall.setOnClickListener {\r\n//            val intent = Intent(requireContext(), OngoingOrdersActivity::class.java)\r\n//            startActivity(intent)\r\n//        }\r\n        binding.btGetStarted.setOnClickListener {\r\n            val intent = Intent(requireContext(), CategoriesActivity::class.java)\r\n            startActivity(intent)\r\n        }\r\n    }\r\n\r\n\r\n\r\n    override fun onResume() {\r\n        super.onResume()\r\n\r\n        appUpdateManager\r\n            .appUpdateInfo\r\n            .addOnSuccessListener { appUpdateInfo ->\r\n                if (appUpdateInfo.updateAvailability()\r\n                    == UpdateAvailability.DEVELOPER_TRIGGERED_UPDATE_IN_PROGRESS\r\n                ) {\r\n                    // If an in-app update is already running, resume the update.\r\n                    appUpdateManager.startUpdateFlowForResult(\r\n                        appUpdateInfo,\r\n                        AppUpdateType.IMMEDIATE,\r\n                        this,\r\n                        MY_REQUEST_CODE\r\n                    )\r\n                }\r\n            }\r\n    }\r\n\r\n    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\r\n        super.onActivityResult(requestCode, resultCode, data)\r\n        if (requestCode == MY_REQUEST_CODE) {\r\n            if (resultCode != AppCompatActivity.RESULT_OK) {\r\n                activity?.moveTaskToBack(true)\r\n                activity?.finish()\r\n                Toast.makeText(\r\n                    requireContext(),\r\n                    \"Update flow failed!\" + requestCode,\r\n                    Toast.LENGTH_SHORT\r\n                ).show()\r\n\r\n                log(\"MY_APP\\\", \\\"Update flow failed! Result code: \"+resultCode)\r\n                // If the update is cancelled or fails,\r\n                // you can request to start the update again.\r\n            }\r\n        }\r\n    }\r\n\r\n    override fun getViewModel() = DashboardViewModel::class.java\r\n\r\n    override fun getFragmentBinding(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?\r\n    ) = HomeDashboardFragmentBinding.inflate(inflater, container, false)\r\n\r\n}
===================================================================
diff --git a/app/src/zomato/java/com/spyneai/dashboard/ui/HomeDashboardFragment.kt b/app/src/zomato/java/com/spyneai/dashboard/ui/HomeDashboardFragment.kt
--- a/app/src/zomato/java/com/spyneai/dashboard/ui/HomeDashboardFragment.kt	
+++ b/app/src/zomato/java/com/spyneai/dashboard/ui/HomeDashboardFragment.kt	
@@ -35,8 +35,6 @@
 import com.spyneai.adapter.CategoriesDashboardAdapter
 import com.spyneai.base.BaseFragment
 import com.spyneai.base.network.Resource
-import com.spyneai.captureEvent
-import com.spyneai.captureFailureEvent
 
 import com.spyneai.dashboard.data.DashboardViewModel
 import com.spyneai.dashboard.data.model.LayoutHolder
Index: app/src/foodpanda/java/com/spyneai/dashboard/ui/HomeDashboardFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.spyneai.dashboard.ui\r\n\r\n\r\nimport android.app.Dialog\r\nimport android.content.Intent\r\nimport android.graphics.Color\r\nimport android.graphics.drawable.ColorDrawable\r\nimport android.os.Bundle\r\nimport android.os.Handler\r\nimport android.text.TextUtils.replace\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.view.Window\r\nimport android.widget.LinearLayout\r\nimport android.widget.TextView\r\nimport android.widget.Toast\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.core.content.ContextCompat\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.lifecycle.Observer\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.google.android.material.tabs.TabLayout\r\nimport com.google.android.play.core.appupdate.AppUpdateManager\r\nimport com.google.android.play.core.appupdate.AppUpdateManagerFactory\r\nimport com.google.android.play.core.install.model.AppUpdateType\r\nimport com.google.android.play.core.install.model.UpdateAvailability\r\nimport com.google.android.play.core.ktx.startUpdateFlowForResult\r\nimport com.google.gson.Gson\r\nimport com.spyneai.R\r\nimport com.spyneai.activity.CategoriesActivity\r\nimport com.spyneai.activity.CompletedProjectsActivity\r\n\r\nimport com.spyneai.adapter.CategoriesDashboardAdapter\r\nimport com.spyneai.base.BaseFragment\r\nimport com.spyneai.base.network.Resource\r\nimport com.spyneai.captureEvent\r\nimport com.spyneai.captureFailureEvent\r\n\r\nimport com.spyneai.dashboard.data.DashboardViewModel\r\nimport com.spyneai.dashboard.data.model.LayoutHolder\r\nimport com.spyneai.dashboard.response.NewCategoriesResponse\r\nimport com.spyneai.databinding.HomeDashboardFragmentBinding\r\nimport com.spyneai.needs.AppConstants\r\nimport com.spyneai.needs.Utilities\r\nimport com.spyneai.orders.data.response.GetProjectsResponse\r\nimport com.spyneai.posthog.Events\r\nimport com.spyneai.shoot.data.model.ProjectDetailResponse\r\nimport com.spyneai.shoot.ui.base.ShootPortraitActivity\r\nimport com.spyneai.shoot.utils.log\r\n\r\n\r\nclass HomeDashboardFragment :\r\n    BaseFragment<DashboardViewModel, HomeDashboardFragmentBinding>() {\r\n\r\n    lateinit var btnlistener: CategoriesDashboardAdapter.BtnClickListener\r\n\r\n    lateinit var categoriesAdapter: CategoriesDashboardAdapter\r\n\r\n//    lateinit var ongoingDashboardAdapter: OngoingDashboardAdapter\r\n//\r\n//    lateinit var completedDashboardAdapter: CompletedDashboardAdapter\r\n    lateinit var completedProjectList: ArrayList<GetProjectsResponse.Project_data>\r\n    lateinit var ongoingProjectList: ArrayList<GetProjectsResponse.Project_data>\r\n\r\n    lateinit var handler: Handler\r\n    private var runnable: Runnable? = null\r\n\r\n   // lateinit var tutorialVideosAdapter: TutorialVideosAdapter\r\n\r\n    var categoryPosition: Int = 0\r\n    lateinit var tokenId: String\r\n    lateinit var email: String\r\n\r\n    lateinit var catId: String\r\n    lateinit var displayName: String\r\n    lateinit var displayThumbnail: String\r\n    lateinit var description: String\r\n    lateinit var colorCode: String\r\n    private var refreshData = true\r\n    private lateinit var tabLayout: TabLayout\r\n\r\n    lateinit var appUpdateManager: AppUpdateManager\r\n    private val MY_REQUEST_CODE: Int = 1\r\n    lateinit var PACKAGE_NAME: String\r\n\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        handler = Handler()\r\n\r\n        tokenId = Utilities.getPreference(requireContext(), AppConstants.TOKEN_ID).toString()\r\n        email = Utilities.getPreference(requireContext(), AppConstants.EMAIL_ID).toString()\r\n\r\n        PACKAGE_NAME = requireContext().getPackageName().toString()\r\n        appUpdateManager = AppUpdateManagerFactory.create(requireContext())\r\n\r\n//        if (PACKAGE_NAME.equals(\"com.spyneai.swiggy.debug\")) {\r\n//            newUserCreditDialog()\r\n            repeatRefreshData()\r\n            setSliderRecycler()\r\n            lisners()\r\n            welcomeHomeText()\r\n            getCategories()\r\n//        } else\r\n//            autoUpdates()\r\n    }\r\n\r\n    private fun autoUpdates() {\r\n\r\n        val appUpdateInfoTask = appUpdateManager.appUpdateInfo\r\n        appUpdateInfoTask.addOnSuccessListener { appUpdateInfo ->\r\n            if (appUpdateInfo.updateAvailability() == UpdateAvailability.UPDATE_AVAILABLE\r\n                && appUpdateInfo.isUpdateTypeAllowed(AppUpdateType.IMMEDIATE)\r\n            ) {\r\n\r\n                // Request the update.\r\n                appUpdateManager.startUpdateFlowForResult(\r\n                    // Pass the intent that is returned by 'getAppUpdateInfo()'.\r\n                    appUpdateInfo,\r\n                    // Or 'AppUpdateType.FLEXIBLE' for flexible updates.\r\n                    AppUpdateType.IMMEDIATE,\r\n                    // The current activity making the update request.\r\n                    this,\r\n                    // Include a request code to later monitor this update request.\r\n                    MY_REQUEST_CODE\r\n                )\r\n            } else {\r\n//                newUserCreditDialog()\r\n                repeatRefreshData()\r\n                setSliderRecycler()\r\n                lisners()\r\n                welcomeHomeText()\r\n                getCategories()\r\n            }\r\n        }\r\n    }\r\n\r\n//    private fun getOngoingOrders() {\r\n//        log(\"Completed SKUs(auth key): \"+ Utilities.getPreference(requireContext(), AppConstants.AUTH_KEY))\r\n//\r\n//        viewModel.getProjects(Utilities.getPreference(requireContext(), AppConstants.AUTH_KEY).toString(), \"ongoing\")\r\n//\r\n//        viewModel.getProjectsResponse.observe(\r\n//            viewLifecycleOwner, Observer {\r\n//                when (it) {\r\n//                    is Resource.Success -> {\r\n//                        binding.rvOngoingShoots.visibility = View.VISIBLE\r\n//                        binding.shimmerOngoing.stopShimmer()\r\n//                        binding.shimmerOngoing.visibility = View.GONE\r\n//                        if (it.value.data.project_data.isNullOrEmpty()) {\r\n//                            binding.rlOngoingShoots.visibility = View.GONE\r\n//                            refreshData = false\r\n//                        }\r\n//\r\n//                        if (it.value.data != null) {\r\n//                            ongoingProjectList = ArrayList()\r\n//                            ongoingProjectList.clear()\r\n//                            ongoingProjectList.addAll(it.value.data.project_data)\r\n//                            ongoingDashboardAdapter = OngoingDashboardAdapter(\r\n//                                requireContext(),\r\n//                                ongoingProjectList\r\n//                            )\r\n//\r\n//                            val layoutManager: RecyclerView.LayoutManager = LinearLayoutManager(\r\n//                                requireContext(),\r\n//                                LinearLayoutManager.HORIZONTAL,\r\n//                                false\r\n//                            )\r\n//                            binding.rvOngoingShoots.setLayoutManager(layoutManager)\r\n//                            binding.rvOngoingShoots.setAdapter(ongoingDashboardAdapter)\r\n//\r\n//                        }\r\n//                    }\r\n//                    is Resource.Loading -> {\r\n//                        binding.shimmerOngoing.startShimmer()\r\n//                    }\r\n//                    is Resource.Failure -> {\r\n//                        binding.shimmerOngoing.stopShimmer()\r\n//                        binding.shimmerOngoing.visibility = View.GONE\r\n//\r\n//                        if (it.errorCode == 404) {\r\n//                            binding.rlOngoingShoots.visibility = View.GONE\r\n//                            refreshData = false\r\n//                        } else {\r\n//                            requireContext().captureFailureEvent(\r\n//                                Events.GET_ONGOING_ORDERS_FAILED, HashMap<String,Any?>(),\r\n//                                it.errorMessage!!\r\n//                            )\r\n//                            handleApiError(it)\r\n//                        }\r\n//                    }\r\n//\r\n//                }\r\n//            }\r\n//        )\r\n//    }\r\n\r\n    private fun newUserCreditDialog() {\r\n        if (viewModel.isNewUser.value == true) {\r\n            showFreeCreditDialog(viewModel.creditsMessage.value.toString())\r\n            viewModel.isNewUser.value = false\r\n        }\r\n    }\r\n\r\n//    private fun getCompletedOrders() {\r\n//\r\n//        viewModel.getCompletedProjects(Utilities.getPreference(requireContext(), AppConstants.AUTH_KEY).toString(), \"completed\")\r\n//\r\n//        log(\"Completed SKUs(auth key): \"+ Utilities.getPreference(requireContext(), AppConstants.AUTH_KEY))\r\n//        viewModel.getCompletedProjectsResponse.observe(\r\n//            viewLifecycleOwner, Observer {\r\n//                when (it) {\r\n//                    is Resource.Success -> {\r\n//\r\n//                        requireContext().captureEvent(Events.GET_COMPLETED_ORDERS, HashMap<String,Any?>())\r\n//                        completedProjectList = ArrayList()\r\n//                        if (it.value.data.project_data.isNullOrEmpty()) {\r\n//                            binding.rlCompletedShoots.visibility = View.GONE\r\n//                            refreshData = false\r\n//                        }\r\n//\r\n//                        binding.rvCompletedShoots.visibility = View.VISIBLE\r\n//                        binding.shimmerCompleted.stopShimmer()\r\n//                        binding.shimmerCompleted.visibility = View.GONE\r\n//                        if (it.value.data != null) {\r\n//                            completedProjectList.clear()\r\n//                            completedProjectList.addAll(it.value.data.project_data)\r\n//\r\n//                            completedDashboardAdapter = CompletedDashboardAdapter(\r\n//                                requireContext(),\r\n//                                completedProjectList\r\n//                            )\r\n//\r\n//                            val layoutManager: RecyclerView.LayoutManager = LinearLayoutManager(\r\n//                                requireContext(),\r\n//                                LinearLayoutManager.HORIZONTAL,\r\n//                                false\r\n//                            )\r\n//                            binding.rvCompletedShoots.setLayoutManager(layoutManager)\r\n//                            binding.rvCompletedShoots.setAdapter(completedDashboardAdapter)\r\n//                        }\r\n//\r\n//                    }\r\n//                    is Resource.Loading -> {\r\n//                        binding.shimmerCompleted.startShimmer()\r\n//                    }\r\n//                    is Resource.Failure -> {\r\n//                        binding.shimmerCompleted.stopShimmer()\r\n//                        binding.shimmerCompleted.visibility = View.GONE\r\n//\r\n//                        if (it.errorCode == 404) {\r\n//                            binding.rlCompletedShoots.visibility = View.GONE\r\n//                            refreshData = false\r\n//                        } else {\r\n//                            requireContext().captureFailureEvent(\r\n//                                Events.GET_COMPLETED_ORDERS_FAILED, HashMap<String,Any?>(),\r\n//                                it.errorMessage!!\r\n//                            )\r\n//                            handleApiError(it)\r\n//                        }\r\n//                    }\r\n//\r\n//                }\r\n//            }\r\n//        )\r\n//\r\n//    }\r\n\r\n    private fun getCategories() {\r\n        viewModel.getCategories(\r\n            Utilities.getPreference(requireContext(), AppConstants.AUTH_KEY).toString()\r\n        )\r\n\r\n//        viewModel.categoriesResponse.observe(viewLifecycleOwner, Observer {\r\n//            when (it) {\r\n//                is Resource.Success -> {\r\n//\r\n//                    if (it.value.data.size == 1)\r\n//                    Utilities.savePrefrence(requireContext(), AppConstants.CATEGORY_NAME, it.value.data[0].prod_cat_name)\r\n//\r\n//                    LayoutHolder.data = it.value.data\r\n//                    requireContext().captureEvent(Events.GOT_CATEGORIES, HashMap<String,Any?>())\r\n//\r\n//                    binding.shimmerCategories.stopShimmer()\r\n//                    binding.shimmerCategories.visibility = View.GONE\r\n//                    binding.rvDashboardCategories.visibility = View.VISIBLE\r\n//\r\n//                    categoriesAdapter = CategoriesDashboardAdapter(requireContext(),\r\n//                        it.value.data as ArrayList<NewCategoriesResponse.Data>,\r\n//                        object : CategoriesDashboardAdapter.BtnClickListener {\r\n//                            override fun onBtnClick(position: Int) {\r\n//\r\n//                                LayoutHolder.categoryPosition = position\r\n//\r\n//                                Utilities.savePrefrence(requireContext(), AppConstants.CATEGORY_ID, it.value.data[position].prod_cat_id)\r\n//                                Utilities.savePrefrence(requireContext(), AppConstants.CATEGORY_NAME, it.value.data[position].prod_cat_name)\r\n//\r\n//                                catId = it.value.data[position].prod_cat_id\r\n//                                displayName = it.value.data[position].prod_cat_name\r\n//                                displayThumbnail = it.value.data[position].display_thumbnail\r\n//                                description = it.value.data[position].description\r\n//                                colorCode = it.value.data[position].color_code\r\n//\r\n//                                when(position){\r\n////                                    0 -> {\r\n////                                        val intent = Intent(requireContext(), StartShootActivity::class.java)\r\n////                                        intent.putExtra(\r\n////                                            AppConstants.CATEGORY_NAME,\r\n////                                            displayName\r\n////                                        )\r\n////                                        intent.putExtra(\r\n////                                            AppConstants.CATEGORY_ID,\r\n////                                            catId\r\n////                                        )\r\n////                                        intent.putExtra(\r\n////                                            AppConstants.IMAGE_URL,\r\n////                                            displayThumbnail\r\n////                                        )\r\n////                                        intent.putExtra(\r\n////                                            AppConstants.DESCRIPTION,\r\n////                                            description\r\n////                                        )\r\n////                                        intent.putExtra(AppConstants.COLOR, colorCode)\r\n////                                        startActivity(intent)\r\n////                                    }\r\n////                                    1 -> {\r\n////                                        val intent = Intent(requireContext(), ShootActivity::class.java)\r\n////                                        intent.putExtra(\r\n////                                            AppConstants.CATEGORY_NAME,\r\n////                                            displayName\r\n////                                        )\r\n////                                        intent.putExtra(\r\n////                                            AppConstants.CATEGORY_ID,\r\n////                                            catId\r\n////                                        )\r\n////                                        intent.putExtra(\r\n////                                            AppConstants.IMAGE_URL,\r\n////                                            displayThumbnail\r\n////                                        )\r\n////                                        intent.putExtra(\r\n////                                            AppConstants.DESCRIPTION,\r\n////                                            description\r\n////                                        )\r\n////                                        intent.putExtra(AppConstants.COLOR, colorCode)\r\n////                                        startActivity(intent)\r\n////                                    }\r\n//\r\n//                                    0, 1 -> {\r\n//                                        val intent = Intent(requireContext(), ShootPortraitActivity::class.java)\r\n//                                        val gson = Gson()\r\n//                                        intent.putExtra(\r\n//                                            AppConstants.CATEGORY_NAME,\r\n//                                            displayName\r\n//                                        )\r\n//                                        intent.putExtra(\r\n//                                            AppConstants.CATEGORY_ID,\r\n//                                            catId\r\n//                                        )\r\n//                                        intent.putExtra(\r\n//                                            AppConstants.IMAGE_URL,\r\n//                                            displayThumbnail\r\n//                                        )\r\n//                                        intent.putExtra(\r\n//                                            AppConstants.DESCRIPTION,\r\n//                                            description\r\n//                                        )\r\n//                                        intent.putExtra(AppConstants.COLOR, colorCode)\r\n//                                        startActivity(intent)\r\n//                                    }\r\n//                                    else -> {\r\n//                                        Toast.makeText(\r\n//                                            requireContext(),\r\n//                                            \"Coming Soon !\",\r\n//                                            Toast.LENGTH_SHORT\r\n//                                        ).show()\r\n//                                    }\r\n//                                }\r\n//\r\n//                            }\r\n//\r\n//                        })\r\n//                    val layoutManager: RecyclerView.LayoutManager = LinearLayoutManager(\r\n//                        requireContext(),\r\n//                        LinearLayoutManager.HORIZONTAL,\r\n//                        false\r\n//                    )\r\n//                    binding.rvDashboardCategories.setLayoutManager(layoutManager)\r\n//                    binding.rvDashboardCategories.setAdapter(categoriesAdapter)\r\n////                    categoriesAdapter.notifyDataSetChanged()\r\n//                }\r\n//                is Resource.Loading -> {\r\n//                    binding.shimmerCategories.startShimmer()\r\n//                }\r\n//                is Resource.Failure -> {\r\n//                    requireContext().captureFailureEvent(\r\n//                        Events.GET_CATEGORIES_FAILED, HashMap<String,Any?>(),\r\n//                        it.errorMessage!!\r\n//                    )\r\n//                    handleApiError(it)\r\n//                }\r\n//            }\r\n//        })\r\n    }\r\n\r\n    private fun welcomeHomeText() {\r\n        if (Utilities.getPreference(requireContext(), AppConstants.USER_NAME).toString() != \"\") {\r\n            binding.tvWelcomeHome.visibility = View.VISIBLE\r\n            binding.viewWelcome.visibility = View.VISIBLE\r\n            binding.tvWelcomeHome.setText(\r\n                \"Welcome \" +\r\n                        Utilities.getPreference(requireContext(), AppConstants.USER_NAME).toString()\r\n            )\r\n            if (Utilities.getPreference(requireContext(), AppConstants.USER_NAME).toString().trim()\r\n                    .equals(\"default\")\r\n            ) {\r\n                binding.tvWelcomeHome.visibility = View.VISIBLE\r\n                binding.viewWelcome.visibility = View.VISIBLE\r\n                binding.tvWelcomeHome.setText(\"Welcome Home\")\r\n            }\r\n        }\r\n    }\r\n\r\n    fun repeatRefreshData(){\r\n        try {\r\n           // getOngoingOrders()\r\n            //getCompletedOrders()\r\n            runnable = Runnable {\r\n                if (refreshData)\r\n                    repeatRefreshData()  }\r\n            if (runnable != null)\r\n                handler.postDelayed(runnable!!,10000)\r\n        }catch (e : IllegalArgumentException){\r\n            e.printStackTrace()\r\n        }catch (e : Exception){\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n\r\n    override fun onPause() {\r\n        if (runnable != null)\r\n            handler.removeCallbacks(runnable!!)\r\n        super.onPause()\r\n    }\r\n\r\n\r\n\r\n\r\n    private fun setSliderRecycler() {\r\n\r\n        binding.ivBanner.setSliderThumb(\r\n            ContextCompat.getDrawable(\r\n                requireContext(),\r\n                R.drawable.ic_sliderline\r\n            )\r\n        )\r\n\r\n        tabLayout = binding.tbDashboard\r\n        tabLayout.addTab(tabLayout.newTab());\r\n//        tabLayout.addTab(tabLayout.newTab());\r\n\r\n\r\n        binding.ivBanner.setBeforeImage(\r\n            ContextCompat.getDrawable(\r\n                requireContext(),\r\n                R.drawable.food_before\r\n            )\r\n        ).setAfterImage(ContextCompat.getDrawable(requireContext(), R.drawable.food_after))\r\n    }\r\n\r\n    private fun showFreeCreditDialog(message: String) {\r\n        val dialog = Dialog(requireContext())\r\n        dialog.requestWindowFeature(Window.FEATURE_NO_TITLE)\r\n        dialog.setCancelable(true)\r\n\r\n        var dialogView =\r\n            LayoutInflater.from(requireContext()).inflate(R.layout.free_credit_dialog, null)\r\n        var tvMessage: TextView = dialogView.findViewById(R.id.tvSkuNameDialog)\r\n        tvMessage.text = message\r\n\r\n        dialog.setContentView(dialogView)\r\n\r\n        dialog.getWindow()?.setBackgroundDrawable(ColorDrawable(Color.TRANSPARENT));\r\n        val llOk: LinearLayout = dialog.findViewById(R.id.llOk)\r\n\r\n\r\n        llOk.setOnClickListener(View.OnClickListener {\r\n\r\n            dialog.dismiss()\r\n\r\n        })\r\n        dialog.show()\r\n\r\n    }\r\n\r\n    private fun lisners() {\r\n        binding.tvCompletedViewall.setOnClickListener {\r\n            val intent = Intent(requireContext(), CompletedProjectsActivity::class.java)\r\n            startActivity(intent)\r\n        }\r\n\r\n//        binding.tvOngoingViewall.setOnClickListener {\r\n//            val intent = Intent(requireContext(), OngoingOrdersActivity::class.java)\r\n//            startActivity(intent)\r\n//        }\r\n        binding.btGetStarted.setOnClickListener {\r\n            val intent = Intent(requireContext(), CategoriesActivity::class.java)\r\n            startActivity(intent)\r\n        }\r\n    }\r\n\r\n\r\n\r\n    override fun onResume() {\r\n        super.onResume()\r\n\r\n        appUpdateManager\r\n            .appUpdateInfo\r\n            .addOnSuccessListener { appUpdateInfo ->\r\n                if (appUpdateInfo.updateAvailability()\r\n                    == UpdateAvailability.DEVELOPER_TRIGGERED_UPDATE_IN_PROGRESS\r\n                ) {\r\n                    // If an in-app update is already running, resume the update.\r\n                    appUpdateManager.startUpdateFlowForResult(\r\n                        appUpdateInfo,\r\n                        AppUpdateType.IMMEDIATE,\r\n                        this,\r\n                        MY_REQUEST_CODE\r\n                    )\r\n                }\r\n            }\r\n    }\r\n\r\n    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\r\n        super.onActivityResult(requestCode, resultCode, data)\r\n        if (requestCode == MY_REQUEST_CODE) {\r\n            if (resultCode != AppCompatActivity.RESULT_OK) {\r\n                activity?.moveTaskToBack(true)\r\n                activity?.finish()\r\n                Toast.makeText(\r\n                    requireContext(),\r\n                    \"Update flow failed!\" + requestCode,\r\n                    Toast.LENGTH_SHORT\r\n                ).show()\r\n\r\n                log(\"MY_APP\\\", \\\"Update flow failed! Result code: \"+resultCode)\r\n                // If the update is cancelled or fails,\r\n                // you can request to start the update again.\r\n            }\r\n        }\r\n    }\r\n\r\n    override fun getViewModel() = DashboardViewModel::class.java\r\n\r\n    override fun getFragmentBinding(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?\r\n    ) = HomeDashboardFragmentBinding.inflate(inflater, container, false)\r\n\r\n}
===================================================================
diff --git a/app/src/foodpanda/java/com/spyneai/dashboard/ui/HomeDashboardFragment.kt b/app/src/foodpanda/java/com/spyneai/dashboard/ui/HomeDashboardFragment.kt
--- a/app/src/foodpanda/java/com/spyneai/dashboard/ui/HomeDashboardFragment.kt	
+++ b/app/src/foodpanda/java/com/spyneai/dashboard/ui/HomeDashboardFragment.kt	
@@ -35,8 +35,7 @@
 import com.spyneai.adapter.CategoriesDashboardAdapter
 import com.spyneai.base.BaseFragment
 import com.spyneai.base.network.Resource
-import com.spyneai.captureEvent
-import com.spyneai.captureFailureEvent
+
 
 import com.spyneai.dashboard.data.DashboardViewModel
 import com.spyneai.dashboard.data.model.LayoutHolder
Index: app/src/main/java/com/spyneai/dealership/ui/ChooseDealershipFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.spyneai.dealership.ui\r\n\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport android.text.Editable\r\nimport android.text.TextWatcher\r\nimport android.util.Log\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport com.spyneai.base.BaseFragment\r\nimport com.spyneai.base.OnItemClickListener\r\nimport com.spyneai.base.network.Resource\r\nimport com.spyneai.dashboard.ui.MainDashboardActivity\r\nimport com.spyneai.dashboard.ui.handleApiError\r\nimport com.spyneai.databinding.FragmentChooseDealershipBinding\r\nimport com.spyneai.dealership.data.ChooseDealerShipViewModel\r\nimport com.spyneai.dealership.data.DealershipRes\r\nimport com.spyneai.needs.AppConstants\r\nimport com.spyneai.needs.Utilities\r\nimport com.spyneai.posthog.captureEvent\r\n\r\nclass ChooseDealershipFragment : BaseFragment<ChooseDealerShipViewModel,FragmentChooseDealershipBinding>(),OnItemClickListener {\r\n\r\n    val TAG = ChooseDealershipFragment::class.java.simpleName\r\n    var finalList : ArrayList<DealershipRes.DealershipResItem>? = null\r\n    var dealershipAdapter: DealershipAdapter? = null\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r\n        getDealerships()\r\n\r\n        binding.etSearch.addTextChangedListener(object : TextWatcher {\r\n\r\n            override fun afterTextChanged(s: Editable) {\r\n            }\r\n\r\n            override fun beforeTextChanged(s: CharSequence, start: Int,\r\n                                           count: Int, after: Int) {\r\n            }\r\n\r\n            override fun onTextChanged(s: CharSequence, start: Int,\r\n                                       before: Int, count: Int) {\r\n                filterList(s.toString())\r\n            }\r\n        })\r\n\r\n        viewModel.dealershipResponse.observe(viewLifecycleOwner,{\r\n            when(it){\r\n                is Resource.Success -> {\r\n                    Utilities.hideProgressDialog()\r\n\r\n                    finalList = it.value\r\n\r\n                    dealershipAdapter = DealershipAdapter(it.value,this@ChooseDealershipFragment)\r\n                    binding.rvDealerhship.apply {\r\n                        layoutManager = LinearLayoutManager(requireContext(),LinearLayoutManager.VERTICAL,false)\r\n                        adapter = dealershipAdapter\r\n                    }\r\n                }\r\n\r\n                is Resource.Failure -> {\r\n                    requireContext().captureEvent(\r\n                        \"Get Dealership Failed\",\r\n                        HashMap<String,Any?>().apply {\r\n                            put(\"code\",it.errorCode)\r\n                            put(\"message\",it.errorMessage)\r\n                            put(\"throwable\",it.throwable)\r\n                        }\r\n                    )\r\n                    Utilities.hideProgressDialog()\r\n                    handleApiError(it){ getDealerships() }\r\n                }\r\n            }\r\n        })\r\n\r\n\r\n    }\r\n\r\n    private fun filterList(text: String) {\r\n        var filteredList = ArrayList<DealershipRes.DealershipResItem>()\r\n\r\n        if (text.isNullOrEmpty()){\r\n            finalList?.let {\r\n                filteredList.addAll(it)\r\n            }\r\n        }else {\r\n            finalList?.forEach {item ->\r\n                if (item.superuserName.lowercase().contains(text.lowercase()) || item.superuserId.lowercase().contains(text.lowercase()))\r\n                    filteredList.add(item)\r\n            }\r\n        }\r\n\r\n        dealershipAdapter?.listItems = filteredList\r\n        dealershipAdapter?.notifyDataSetChanged()\r\n    }\r\n\r\n    private fun getDealerships() {\r\n        Utilities.showProgressDialog(requireContext())\r\n        viewModel.getDealerships()\r\n    }\r\n\r\n    override fun onItemClick(view: View, position: Int, data: Any?) {\r\n            when(data){\r\n                is DealershipRes.DealershipResItem -> {\r\n                    Utilities.savePrefrence(requireContext(),AppConstants.DEALERSHIP_ID,data.superuserId)\r\n                    Utilities.savePrefrence(requireContext(),AppConstants.DEALERSHIP_NAME,data.superuserName)\r\n\r\n                    Log.d(\r\n                        TAG,\r\n                        \"onItemClick: ${\r\n                            Utilities.getPreference(\r\n                                requireContext(),\r\n                                AppConstants.DEALERSHIP_ID\r\n                            )\r\n                        }\"\r\n                    )\r\n                    val intent = Intent(requireContext(), MainDashboardActivity::class.java)\r\n                    intent.flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK\r\n                    startActivity(intent)\r\n                }\r\n            }\r\n    }\r\n\r\n    override fun getViewModel() = ChooseDealerShipViewModel::class.java\r\n\r\n    override fun getFragmentBinding(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?\r\n    ) = FragmentChooseDealershipBinding.inflate(inflater, container, false)\r\n\r\n}
===================================================================
diff --git a/app/src/main/java/com/spyneai/dealership/ui/ChooseDealershipFragment.kt b/app/src/main/java/com/spyneai/dealership/ui/ChooseDealershipFragment.kt
--- a/app/src/main/java/com/spyneai/dealership/ui/ChooseDealershipFragment.kt	
+++ b/app/src/main/java/com/spyneai/dealership/ui/ChooseDealershipFragment.kt	
@@ -20,6 +20,8 @@
 import com.spyneai.needs.AppConstants
 import com.spyneai.needs.Utilities
 import com.spyneai.posthog.captureEvent
+import com.spyneai.posthog.captureEvent
+import com.spyneai.shoot.data.ShootViewModel
 
 class ChooseDealershipFragment : BaseFragment<ChooseDealerShipViewModel,FragmentChooseDealershipBinding>(),OnItemClickListener {
 
